// Generated by Haxe 4.1.1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Cix0 = function() {
	this.css = cix_css_Declarations.add(tink_domspec_ClassName.ofString("χ"),function() {
		return ".χ {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}";
	});
};
Cix0.__name__ = true;
Cix0.prototype = {
	css: null
	,__class__: Cix0
};
var Cix1 = function() {
	this.css = cix_css_Declarations.add(tink_domspec_ClassName.ofString("χb"),function() {
		return ".χb {\n  width: 100%;\n  height: 100%;\n}";
	});
};
Cix1.__name__ = true;
Cix1.prototype = {
	css: null
	,__class__: Cix1
};
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw haxe_Exception.thrown("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var ListEnumAbstract = function() { };
ListEnumAbstract.__name__ = true;
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: haxe_ds_List
};
var tink_state_Observable = {};
tink_state_Observable.get_value = function(this1) {
	return tink_state_Observable.measure(this1).a;
};
tink_state_Observable._new = function(get,changed) {
	var this1 = tink_state_Observable.create(function() {
		var this1 = new tink_core_MPair(get(),tink_core_Signal.nextTime(changed));
		var this2 = this1;
		return this2;
	});
	return this1;
};
tink_state_Observable.combine = function(this1,that,f) {
	return new tink_state__$Observable_SimpleObservable(function() {
		var p = tink_state_Observable.measure(this1);
		var q = tink_state_Observable.measure(that);
		var this2 = new tink_core_MPair(f(p.a,q.a),tink_core_Future.first(p.b,q.b));
		var this3 = this2;
		return this3;
	});
};
tink_state_Observable.nextTime = function(this1,options,check) {
	return tink_state_Observable.getNext(this1,options,function(v) {
		if(check(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_state_Observable.getNext = function(this1,options,select) {
	var ret = new tink_core_FutureTrigger();
	var waiting = options != null && options.butNotNow;
	var link = tink_state_Observable.bind(this1,{ direct : options != null && options.hires},function(value) {
		var out = select(value);
		if(waiting) {
			waiting = out != haxe_ds_Option.None;
		} else {
			switch(out._hx_index) {
			case 0:
				var value = out.v;
				ret.trigger(value);
				break;
			case 1:
				break;
			}
		}
	});
	var _e = link;
	var tmp = function() {
		if(_e != null) {
			_e.cancel();
		}
	};
	ret.handle(tink_core_Callback.fromNiladic(tmp));
	return ret;
};
tink_state_Observable.join = function(this1,that) {
	var lastA = null;
	return tink_state_Observable.combine(this1,that,function(a,b) {
		var ret = lastA == a ? b : a;
		lastA = a;
		return ret;
	});
};
tink_state_Observable.map = function(this1,f) {
	return tink_state_Observable.create(function() {
		var m = tink_state_Observable.measure(this1);
		var this2 = new tink_core_MPair(f(m.a),m.b);
		var this3 = this2;
		return this3;
	});
};
tink_state_Observable.combineAsync = function(this1,that,f) {
	return tink_state_Observable.mapAsync(tink_state_Observable.combine(this1,that,f),tink_state_Transform.plain(function(x) {
		return x;
	}));
};
tink_state_Observable.mapAsync = function(this1,f) {
	return tink_state_Observable.flatten(tink_state_Observable.map(tink_state_Observable.map(this1,f),tink_state_Transform.plain(tink_state_Observable.ofPromise)));
};
tink_state_Observable.measure = function(this1) {
	var before = tink_state_Observable.stack.first();
	tink_state_Observable.stack.push(this1);
	var p = this1.poll();
	if(js_Boot.getClass(before) == tink_state__$Observable_AutoObservable) {
		before.subscribe(this1,p);
	}
	tink_state_Observable.stack.pop();
	return p;
};
tink_state_Observable.switchSync = function(this1,cases,dfault) {
	return new tink_state__$Observable_SimpleObservable(function() {
		var p = tink_state_Observable.measure(this1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			if(c.when(p.a)) {
				dfault = c.then;
				break;
			}
		}
		var p2 = tink_state_Observable.measure(dfault.get());
		var this2 = new tink_core_MPair(p2.a,tink_core_Future.first(p.b,p2.b));
		var this3 = this2;
		return this3;
	});
};
tink_state_Observable.bind = function(this1,options,cb) {
	var cb1;
	if(options == null) {
		cb1 = cb;
	} else {
		var _g = options.direct;
		var _g = options.comparator;
		if(_g == null) {
			cb1 = cb;
		} else {
			var equal = _g;
			var isFirst = true;
			var last = null;
			cb1 = function(data) {
				if(isFirst) {
					isFirst = false;
					tink_core_Callback.invoke(cb,data);
				} else if(!equal(last,data)) {
					tink_core_Callback.invoke(cb,data);
				}
				last = data;
			};
		}
	}
	if(options == null) {
		var scheduled = false;
		var active = true;
		var updated = null;
		var link = null;
		var update = function() {
			if(active) {
				var _e = this1;
				var next = tink_state_Observable.untracked(function() {
					return tink_state_Observable.measure(_e);
				});
				tink_core_Callback.invoke(cb1,next.a);
				scheduled = false;
				link = next.b.handle(updated);
			}
		};
		var doSchedule = function() {
			if(scheduled) {
				return;
			}
			scheduled = true;
			tink_state_Observable.schedule(update);
		};
		updated = tink_core_Callback.fromNiladic(doSchedule);
		doSchedule();
		var this2 = new tink_core_SimpleLink(function() {
			if(active) {
				active = false;
				if(link != null) {
					link.cancel();
				}
			}
		});
		return this2;
	} else {
		var _g = options.direct;
		var _g1 = options.comparator;
		if(_g == null) {
			var scheduled1 = false;
			var active1 = true;
			var updated1 = null;
			var link1 = null;
			var update1 = function() {
				if(active1) {
					var _e = this1;
					var next = tink_state_Observable.untracked(function() {
						return tink_state_Observable.measure(_e);
					});
					tink_core_Callback.invoke(cb1,next.a);
					scheduled1 = false;
					link1 = next.b.handle(updated1);
				}
			};
			var doSchedule = function() {
				if(scheduled1) {
					return;
				}
				scheduled1 = true;
				tink_state_Observable.schedule(update1);
			};
			updated1 = tink_core_Callback.fromNiladic(doSchedule);
			doSchedule();
			var this2 = new tink_core_SimpleLink(function() {
				if(active1) {
					active1 = false;
					if(link1 != null) {
						link1.cancel();
					}
				}
			});
			return this2;
		} else if(_g == false) {
			var scheduled2 = false;
			var active2 = true;
			var updated2 = null;
			var link2 = null;
			var update2 = function() {
				if(active2) {
					var _e = this1;
					var next = tink_state_Observable.untracked(function() {
						return tink_state_Observable.measure(_e);
					});
					tink_core_Callback.invoke(cb1,next.a);
					scheduled2 = false;
					link2 = next.b.handle(updated2);
				}
			};
			var doSchedule = function() {
				if(scheduled2) {
					return;
				}
				scheduled2 = true;
				tink_state_Observable.schedule(update2);
			};
			updated2 = tink_core_Callback.fromNiladic(doSchedule);
			doSchedule();
			var this2 = new tink_core_SimpleLink(function() {
				if(active2) {
					active2 = false;
					if(link2 != null) {
						link2.cancel();
					}
				}
			});
			return this2;
		} else {
			var link3 = null;
			var update3 = null;
			update3 = function(_) {
				var _e = this1;
				var next = tink_state_Observable.untracked(function() {
					return tink_state_Observable.measure(_e);
				});
				tink_core_Callback.invoke(cb1,next.a);
				link3 = next.b.handle(update3);
			};
			update3(tink_core_Noise.Noise);
			var this2 = new tink_core_SimpleLink(function() {
				if(link3 != null) {
					link3.cancel();
				}
			});
			return this2;
		}
	}
};
tink_state_Observable.schedule = function(f) {
	var _g = tink_state_Observable.scheduled;
	if(_g == null) {
		f();
	} else {
		var v = _g;
		v.push(f);
		tink_state_Observable.scheduleUpdate();
	}
};
tink_state_Observable.scheduleUpdate = function() {
	if(!tink_state_Observable.isScheduled) {
		tink_state_Observable.isScheduled = true;
		if(tink_state_Observable.hasRAF) {
			window.requestAnimationFrame(function(_) {
				tink_state_Observable.scheduledRun();
			});
		} else {
			tink_core_Callback.defer(tink_state_Observable.scheduledRun);
		}
	}
};
tink_state_Observable.scheduledRun = function() {
	tink_state_Observable.isScheduled = false;
	tink_state_Observable.updatePending();
};
tink_state_Observable.updatePending = function(maxSeconds) {
	if(maxSeconds == null) {
		maxSeconds = .01;
	}
	var end = HxOverrides.now() / 1000 + maxSeconds;
	while(true) {
		var old = tink_state_Observable.scheduled;
		tink_state_Observable.scheduled = [];
		var _g = 0;
		while(_g < old.length) {
			var o = old[_g];
			++_g;
			o();
		}
		if(!(tink_state_Observable.scheduled.length > 0 && HxOverrides.now() / 1000 < end)) {
			break;
		}
	}
	if(tink_state_Observable.scheduled.length > 0) {
		tink_state_Observable.scheduleUpdate();
		return true;
	} else {
		return false;
	}
};
tink_state_Observable.updateAll = function() {
	tink_state_Observable.updatePending(Infinity);
};
tink_state_Observable.lift = function(o) {
	return o;
};
tink_state_Observable.deliver = function(o,initial) {
	return tink_state_Observable.map(o,tink_state_Transform.plain(function(p) {
		if(p._hx_index == 1) {
			var v = p.result;
			initial = v;
			return initial;
		} else {
			return initial;
		}
	}));
};
tink_state_Observable.flatten = function(o) {
	return tink_state_Observable.create(function() {
		var m = tink_state_Observable.measure(o);
		var m2 = tink_state_Observable.measure(m.a);
		var this1 = new tink_core_MPair(m2.a,tink_core_Future.or(m.b,m2.b));
		var this2 = this1;
		return this2;
	});
};
tink_state_Observable.ofPromise = function(p) {
	if(p == null) {
		throw haxe_Exception.thrown("Expected Promise but got null");
	}
	var value = tink_state_Promised.Loading;
	var _e = p;
	var _g = function(f) {
		var ret = _e.map(f);
		return ret.gather();
	};
	var f = function(_) {
		return tink_core_Noise.Noise;
	};
	var becameInvalid = new tink_core__$Lazy_LazyFunc(function() {
		return _g(f);
	});
	return tink_state_Observable.create(function() {
		if(p != null) {
			p.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var v = o.data;
					value = tink_state_Promised.Done(v);
					break;
				case 1:
					var e = o.failure;
					value = tink_state_Promised.Failed(e);
					break;
				}
				becameInvalid = new tink_core__$Lazy_LazyConst(tink_state_ConstObservable.NEVER);
			});
		}
		var becameInvalid1 = becameInvalid.get();
		var this1 = new tink_core_MPair(value,becameInvalid1);
		var this2 = this1;
		return this2;
	});
};
tink_state_Observable.create = function(f,comparator) {
	return new tink_state__$Observable_SimpleObservable(f,comparator);
};
tink_state_Observable.auto = function(f,comparator) {
	return new tink_state__$Observable_AutoObservable(f,comparator);
};
tink_state_Observable.const = function(value) {
	return new tink_state_ConstObservable(value);
};
tink_state_Observable.untracked = function(f) {
	tink_state_Observable.stack.push(null);
	return tink_core_TypedError.tryFinally(f,($_=tink_state_Observable.stack,$bind($_,$_.pop)));
};
tink_state_Observable.eq = function(a,b) {
	if(a == null) {
		if(b == null) {
			return true;
		} else {
			return false;
		}
	} else if(b == null) {
		return false;
	} else {
		return tink_state_Observable.get_value(a) == tink_state_Observable.get_value(b);
	}
};
tink_state_Observable.neq = function(a,b) {
	return !tink_state_Observable.eq(a,b);
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		var _e = this1;
		var _g = function(data) {
			tink_core_Callback.invoke(_e,data);
		};
		var data1 = data;
		tink_core_Callback.defer(function() {
			_g(data1);
		});
	}
};
tink_core_Callback.ignore = function(cb) {
	return function(_) {
		tink_core_Callback.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var coconut_diffing_Widget = function(rendered,mounted,updated,unmounting) {
	this._coco_pendingChildren = [];
	this._coco_alive = false;
	this._coco_invalid = false;
	var _gthis = this;
	this._coco_vStructure = tink_state_Observable.map(rendered,tink_state_Transform.plain(function(r) {
		if(r == null) {
			return _gthis._coco_differ.applicator.placeholder(_gthis);
		} else if(r._hx_index == 2) {
			var nodes = r.nodes;
			var isEmpty = null;
			isEmpty = function(nodes) {
				var _g = 0;
				while(_g < nodes.length) {
					var n = nodes[_g];
					++_g;
					if(n != null) {
						if(n._hx_index == 2) {
							var nodes1 = n.nodes;
							if(!isEmpty(nodes1)) {
								return false;
							}
						} else {
							return false;
						}
					}
				}
				return true;
			};
			if(isEmpty(nodes)) {
				return _gthis._coco_differ.applicator.placeholder(_gthis);
			} else {
				return r;
			}
		} else {
			return r;
		}
	}));
	this._coco_viewMounted = mounted;
	this._coco_viewUpdated = updated;
	this._coco_viewUnmounting = unmounting;
};
coconut_diffing_Widget.__name__ = true;
coconut_diffing_Widget.prototype = {
	_coco_viewMounted: null
	,_coco_viewUpdated: null
	,_coco_viewUnmounting: null
	,_coco_vStructure: null
	,_coco_lastSnapshot: null
	,_coco_lastRender: null
	,_coco_invalid: null
	,_coco_alive: null
	,_coco_parent: null
	,_coco_differ: null
	,_coco_link: null
	,_coco_getRender: function(later) {
		if(this._coco_invalid) {
			this._coco_invalid = false;
			var nuSnapshot = this._coco_poll().a;
			this._coco_arm();
			if(nuSnapshot != this._coco_lastSnapshot) {
				this._coco_lastSnapshot = nuSnapshot;
				this._coco_lastRender = this._coco_differ.updateAll(this._coco_lastRender,[nuSnapshot],this,later);
				later(this._coco_viewUpdated);
			}
		}
		return this._coco_lastRender;
	}
	,_coco_poll: function() {
		var _e = this._coco_vStructure;
		return tink_state_Observable.untracked(function() {
			return tink_state_Observable.measure(_e);
		});
	}
	,_coco_pendingChildren: null
	,_coco_scheduleChild: function(child) {
		this._coco_pendingChildren.push(child);
		this._coco_invalidate();
	}
	,_coco_invalidate: function() {
		if(!this._coco_invalid) {
			this._coco_invalid = true;
			if(this._coco_parent != null) {
				this._coco_parent._coco_scheduleChild(this);
			} else {
				var _g = $bind(this,this._coco_update);
				var later = null;
				var tmp = function() {
					_g(later);
				};
				coconut_diffing_Widget.defer(tmp);
			}
		}
	}
	,_coco_updateChildren: function(later) {
		if(this._coco_pendingChildren.length > 0) {
			var _g = 0;
			var _g1 = this._coco_pendingChildren.splice(0,this._coco_pendingChildren.length);
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c._coco_update(later);
			}
		}
	}
	,_coco_performUpdate: function(later) {
		var previous = this._coco_lastRender;
		var next = this._coco_getRender(later);
		this._coco_updateChildren(later);
		if(previous == next) {
			return;
		}
		var previousCount = 0;
		var first = null;
		previous.each(later,function(r) {
			if(first == null) {
				first = r;
			}
			previousCount += 1;
		});
		this._coco_differ.setChildren(later,previousCount,this._coco_differ.applicator.traverseSiblings(first),next);
	}
	,_coco_update: function(later) {
		if(this._coco_invalid && this._coco_alive) {
			if(later == null) {
				this._coco_differ.run($bind(this,this._coco_performUpdate));
			} else {
				this._coco_performUpdate(later);
			}
		}
	}
	,_coco_arm: function() {
		var this1 = this._coco_link;
		if(this1 != null) {
			this1.cancel();
		}
		this._coco_link = this._coco_poll().b.handle(tink_core_Callback.fromNiladic($bind(this,this._coco_invalidate)));
	}
	,_coco_teardown: function() {
		this._coco_alive = false;
		this._coco_viewUnmounting();
		var _g = 0;
		var _g1 = this._coco_lastRender.childList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var _this = this._coco_differ;
			switch(c._hx_index) {
			case 0:
				var _g2 = c.ref;
				var _g3 = c.a;
				var real = c.r;
				var _g4 = _this.applicator.unsetLastRender(real);
				if(_g4 != null) {
					var _g5 = _g4.byType;
					var children = _g4.childList;
					var _g6 = 0;
					while(_g6 < children.length) {
						var c1 = children[_g6];
						++_g6;
						_this.destroyRender(c1);
					}
				}
				break;
			case 1:
				var _g7 = c.ref;
				var w = c.w;
				w._coco_teardown();
				break;
			}
		}
	}
	,_coco_initialize: function(differ,parent,later) {
		this._coco_alive = true;
		this._coco_parent = parent;
		this._coco_differ = differ;
		this._coco_lastRender = differ.renderAll([this._coco_lastSnapshot = this._coco_poll().a],this,later);
		this._coco_arm();
		later(this._coco_viewMounted);
	}
	,__class__: coconut_diffing_Widget
};
var coconut_vdom_View = function(render,shouldUpdate,track,beforeRerender,rendered) {
	this.__au = [];
	this.__bc = [];
	this.__bu = [];
	this._coco_revision = new tink_state__$State_SimpleState(0,null,null);
	this.viewId = coconut_vdom_View.idCounter++;
	var _gthis = this;
	var mounted;
	if(rendered != null) {
		var _g = rendered;
		var a1 = true;
		mounted = function() {
			_g(a1);
		};
	} else {
		mounted = null;
	}
	var updated;
	if(rendered != null) {
		var _g1 = rendered;
		var a11 = false;
		updated = function() {
			_g1(a11);
		};
	} else {
		updated = null;
	}
	var firstTime = true;
	var last = null;
	var hasBeforeRerender = beforeRerender != null;
	var hasUpdated = updated != null;
	var lastRev = tink_state_State.get_value(this._coco_revision);
	var renderView = function() {
		var curRev = tink_state_State.get_value(_gthis._coco_revision);
		if(track != null) {
			track();
		}
		if(firstTime) {
			firstTime = false;
		} else {
			if(curRev == lastRev && shouldUpdate != null && !shouldUpdate()) {
				return last;
			}
			var hasCallbacks = _gthis.__bc.length > 0;
			if(hasBeforeRerender || hasCallbacks) {
				tink_state_Observable.untracked(function() {
					if(hasBeforeRerender) {
						beforeRerender();
					}
					if(hasCallbacks) {
						var _g = 0;
						var _g1 = _gthis.__bc.splice(0,_gthis.__bc.length);
						while(_g < _g1.length) {
							var c = _g1[_g];
							++_g;
							tink_core_Callback.invoke(c,false);
						}
					}
				});
			}
		}
		lastRev = curRev;
		last = render();
		return last;
	};
	var this1 = { f : renderView};
	coconut_diffing_Widget.call(this,tink_state_Observable.auto(this1),mounted,function() {
		var hasCallbacks = _gthis.__au.length > 0;
		if(hasUpdated || hasCallbacks) {
			tink_state_Observable.untracked(function() {
				if(hasUpdated) {
					updated();
				}
				if(hasCallbacks) {
					var _g = 0;
					var _g1 = _gthis.__au.splice(0,_gthis.__au.length);
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						tink_core_Callback.invoke(c,tink_core_Noise.Noise);
					}
				}
			});
		}
	},function() {
		last = null;
		firstTime = true;
		_gthis.__beforeUnmount();
	});
};
coconut_vdom_View.__name__ = true;
coconut_vdom_View.__super__ = coconut_diffing_Widget;
coconut_vdom_View.prototype = $extend(coconut_diffing_Widget.prototype,{
	viewId: null
	,_coco_revision: null
	,__bu: null
	,__beforeUnmount: function() {
		var _g = 0;
		var _g1 = this.__bu.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c != null) {
				c.cancel();
			}
		}
		var _g = 0;
		var _g1 = this.__bc.splice(0,this.__bu.length);
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			tink_core_Callback.invoke(c,true);
		}
	}
	,__bc: null
	,__au: null
	,forceUpdate: function(callback) {
		this._coco_revision.set(tink_state_State.get_value(this._coco_revision) + 1);
		if(callback != null) {
			this.__au.push(tink_core_Callback.fromNiladic(callback));
		}
	}
	,__class__: coconut_vdom_View
});
var tink_state_ObservableObject = function() { };
tink_state_ObservableObject.__name__ = true;
tink_state_ObservableObject.__isInterface__ = true;
tink_state_ObservableObject.prototype = {
	isValid: null
	,getComparator: null
	,poll: null
	,__class__: tink_state_ObservableObject
};
var coconut_ui_tools_Slot = function(owner,compare,defaultData) {
	this.owner = owner;
	var tmp;
	if(compare == null) {
		tmp = function(a,b) {
			return a == b;
		};
	} else {
		var v = compare;
		tmp = v;
	}
	this.compare = tmp;
	this.data = this.defaultData = defaultData;
};
coconut_ui_tools_Slot.__name__ = true;
coconut_ui_tools_Slot.__interfaces__ = [tink_state_ObservableObject];
coconut_ui_tools_Slot.prototype = {
	defaultData: null
	,data: null
	,last: null
	,link: null
	,owner: null
	,compare: null
	,get_value: function() {
		return tink_state_Observable.get_value(this);
	}
	,getComparator: function() {
		return this.compare;
	}
	,poll: function() {
		var _gthis = this;
		if(this.last == null) {
			if(this.data == null) {
				var this1 = new tink_core_MPair(null,new tink_core_FutureTrigger());
				this.last = this1;
			} else {
				this.link = null;
				var m = tink_state_Observable.measure(this.data);
				var changed = new tink_core_FutureTrigger();
				var dFault = null;
				var a;
				var _g = m.a;
				if(_g == null && this.defaultData != null) {
					dFault = tink_state_Observable.measure(this.defaultData);
					a = dFault.a;
				} else {
					var v = _g;
					a = v;
				}
				var this1 = new tink_core_MPair(a,changed);
				this.last = this1;
				this.link = m.b.handle($bind(changed,changed.trigger));
				if(dFault != null) {
					this.link = new tink_core__$Callback_LinkPair(this.link,dFault.b.handle($bind(changed,changed.trigger)));
				}
			}
			this.last.b.handle(tink_core_Callback.fromNiladic(function() {
				_gthis.last = null;
			}));
		}
		var this1 = new tink_core_MPair(this.last.a,this.last.b);
		var this2 = this1;
		return this2;
	}
	,isValid: function() {
		if(this.data != null) {
			return this.data.isValid();
		} else {
			return true;
		}
	}
	,observe: function() {
		return this;
	}
	,setData: function(data) {
		if(data == null) {
			data = this.defaultData;
		}
		if(data == this.data) {
			return;
		}
		this.data = data;
		if(this.last != null) {
			var this1 = this.link;
			if(this1 != null) {
				this1.cancel();
			}
			if(data != null) {
				var _e = data;
				var m = tink_state_Observable.untracked(function() {
					return tink_state_Observable.measure(_e);
				});
				if(this.compare(m.a,this.last.a)) {
					this.link = m.b.handle(($_=this.last.b,$bind($_,$_.trigger)));
				} else {
					this.last.b.trigger(tink_core_Noise.Noise);
				}
			}
		}
	}
	,toString: function() {
		return "Slot(" + Std.string(this.owner) + ")";
	}
	,__class__: coconut_ui_tools_Slot
};
var tink_state_ObservableBase = function() {
	this._changes = new tink_core_SignalTrigger();
	this.changes = this._changes;
};
tink_state_ObservableBase.__name__ = true;
tink_state_ObservableBase.prototype = {
	_changes: null
	,changes: null
	,observable: function(ret,when) {
		var _gthis = this;
		return tink_state_Observable.create(function() {
			var ret1 = ret();
			var this1;
			if(when == null) {
				this1 = _gthis.changes;
			} else {
				var _g = when;
				var a1 = ret1;
				var this2 = function(a2) {
					return _g(a1,a2);
				};
				this1 = tink_core_Signal.filter(_gthis.changes,this2,false);
			}
			var ret2 = tink_core_Signal.nextTime(this1).map(function(_) {
				return tink_core_Noise.Noise;
			});
			var this1 = new tink_core_MPair(ret1,ret2.gather());
			var this2 = this1;
			return this2;
		});
	}
	,__class__: tink_state_ObservableBase
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,toString: null
	,__class__: haxe_IMap
};
var tink_state_ObservableMap = function(initial) {
	tink_state_ObservableBase.call(this);
	this.map = initial;
	var _e = this.map;
	this.observableKeys = tink_state_ObservableIterator.make(function() {
		return _e.keys();
	},this.changes,function(c) {
		var _g = c.to;
		var _g1 = c.from;
		if(_g1._hx_index == 0) {
			var _g2 = _g1.v;
			if(_g._hx_index == 0) {
				var _g1 = _g.v;
				return false;
			} else {
				return true;
			}
		} else {
			return true;
		}
	});
	var _e1 = this.map;
	this.observableValues = tink_state_ObservableIterator.make(function() {
		return _e1.iterator();
	},this.changes);
	var _e2 = this.map;
	this.asString = this.observable(function() {
		return _e2.toString();
	});
};
tink_state_ObservableMap.__name__ = true;
tink_state_ObservableMap.__interfaces__ = [haxe_IMap];
tink_state_ObservableMap.__super__ = tink_state_ObservableBase;
tink_state_ObservableMap.prototype = $extend(tink_state_ObservableBase.prototype,{
	map: null
	,observableKeys: null
	,observableValues: null
	,asString: null
	,observe: function(key) {
		var _e = this.map;
		var _g = function(key) {
			return _e.get(key);
		};
		var key1 = key;
		return this.observable(function() {
			return _g(key1);
		},function(_,c) {
			return c.key == key;
		});
	}
	,get: function(key) {
		return tink_state_Observable.get_value(this.observe(key));
	}
	,set: function(key,value) {
		var _g = this.map.get(key);
		var unchanged = _g;
		if(value != unchanged) {
			var old = _g;
			var from = this.map.exists(key) ? haxe_ds_Option.Some(old) : haxe_ds_Option.None;
			this.map.set(key,value);
			var _this = this._changes;
			var event = new tink_state__$ObservableMap_Update(key,from,haxe_ds_Option.Some(value));
			_this.handlers.invoke(event);
		}
	}
	,remove: function(key) {
		if(this.map.exists(key)) {
			var from = haxe_ds_Option.Some(this.map.get(key));
			this.map.remove(key);
			var _this = this._changes;
			var event = new tink_state__$ObservableMap_Update(key,from,haxe_ds_Option.None);
			_this.handlers.invoke(event);
			return true;
		} else {
			return false;
		}
	}
	,exists: function(key) {
		var _e = this.map;
		var _g = function(key) {
			return _e.exists(key);
		};
		var key1 = key;
		return tink_state_Observable.get_value(this.observable(function() {
			return _g(key1);
		},function(exists,c) {
			return exists == (c.to == haxe_ds_Option.None);
		}));
	}
	,iterator: function() {
		return tink_state_Observable.get_value(this.observableValues);
	}
	,keyValueIterator: function() {
		var _gthis = this;
		var keys = tink_state_Observable.get_value(this.observableKeys);
		return { hasNext : $bind(keys,keys.hasNext), next : function() {
			var key = keys.next();
			return { key : key, value : tink_state_Observable.get_value(_gthis.observe(key))};
		}};
	}
	,keys: function() {
		return tink_state_Observable.get_value(this.observableKeys);
	}
	,toString: function() {
		return tink_state_Observable.get_value(this.asString);
	}
	,clear: function() {
		var key = this.map.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.map.remove(key1);
		}
	}
	,copy: function() {
		return new tink_state_ObservableMap(this.map);
	}
	,__class__: tink_state_ObservableMap
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_state_ObservableIterator = function(iterator,changes) {
	this.iterator = iterator;
	this.changes = changes;
};
tink_state_ObservableIterator.__name__ = true;
tink_state_ObservableIterator.__interfaces__ = [tink_state_ObservableObject];
tink_state_ObservableIterator.make = function(iterator,changes,trigger) {
	return new tink_state_ObservableIterator(iterator,tink_core_Signal.select(changes,function(c) {
		if(trigger == null || trigger(c)) {
			return tink_state_ObservableIterator.TRIGGER;
		} else {
			return haxe_ds_Option.None;
		}
	}));
};
tink_state_ObservableIterator.prototype = {
	iterator: null
	,changes: null
	,isValid: function() {
		return true;
	}
	,poll: function() {
		var this1 = new tink_core_MPair(this.iterator(),tink_core_Signal.nextTime(this.changes));
		var this2 = this1;
		return this2;
	}
	,getComparator: function() {
		return null;
	}
	,__class__: tink_state_ObservableIterator
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			tink_core_Callback.invoke(cb,f(result));
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			if(f(result)) {
				tink_core_Callback.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core_Callback.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.listen(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.listen($yield);
		if(this2 == null) {
			return tink_core_CallbackLink.noop;
		} else {
			return $bind(this2,this2.cancel);
		}
	});
	end.handle(tink_core_Callback.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core_Signal.gather = function(this1) {
	var ret = tink_core_Signal.trigger();
	this1.listen(function(x) {
		ret.handlers.invoke(x);
	});
	return ret;
};
tink_core_Signal.generate = function(generator) {
	var ret = tink_core_Signal.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core_Callback.invoke(cb,a);
		};
		add(f);
		var _g = remove;
		var a1 = f;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
	var ret = this1;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
tink_core_SignalObject.__isInterface__ = true;
tink_core_SignalObject.prototype = {
	listen: null
	,__class__: tink_core_SignalObject
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	f: null
	,listen: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	handlers: null
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_state__$State_StateObject = function() { };
tink_state__$State_StateObject.__name__ = true;
tink_state__$State_StateObject.__isInterface__ = true;
tink_state__$State_StateObject.__interfaces__ = [tink_state_ObservableObject];
tink_state__$State_StateObject.prototype = {
	set: null
	,__class__: tink_state__$State_StateObject
};
var tink_state__$State_SimpleState = function(value,isEqual,guard) {
	this.guard = guard;
	this.isEqual = isEqual;
	this.value = value;
};
tink_state__$State_SimpleState.__name__ = true;
tink_state__$State_SimpleState.__interfaces__ = [tink_state__$State_StateObject];
tink_state__$State_SimpleState.prototype = {
	next: null
	,trigger: null
	,isEqual: null
	,guard: null
	,isValid: function() {
		return true;
	}
	,poll: function() {
		if(this.next == null) {
			if(this.guard != null) {
				this.value = this.guard(this.value);
			}
			this.arm();
		}
		return this.next;
	}
	,value: null
	,arm: function() {
		this.trigger = new tink_core_FutureTrigger();
		var this1 = new tink_core_MPair(this.value,this.trigger);
		var this2 = this1;
		this.next = this2;
	}
	,differs: function(a,b) {
		if(this.isEqual == null) {
			return a != b;
		} else {
			return !this.isEqual(a,b);
		}
	}
	,getComparator: function() {
		return this.isEqual;
	}
	,set: function(value) {
		if(this.guard != null) {
			if(this.next == null) {
				this.value = this.guard(this.value);
			}
			value = this.guard(value);
		}
		var b = this.value;
		if(this.isEqual == null ? value != b : !this.isEqual(value,b)) {
			this.value = value;
			var last = this.trigger;
			this.arm();
			if(last != null) {
				last.trigger(tink_core_Noise.Noise);
			}
		}
	}
	,__class__: tink_state__$State_SimpleState
};
var tink_state_State = {};
tink_state_State.get_value = function(this1) {
	return tink_state_Observable.get_value(this1);
};
tink_state_State._new = function(value,isEqual,guard) {
	var this1 = new tink_state__$State_SimpleState(value,isEqual,guard);
	return this1;
};
tink_state_State.observe = function(this1) {
	return this1;
};
tink_state_State.transform = function(this1,rules) {
	return new tink_state__$State_CompoundState(tink_state_Observable.map(this1,tink_state_Transform.plain($bind(rules,rules.read))),function(value) {
		this1.set(rules.write(value));
	});
};
tink_state_State.bind = function(this1,options,cb) {
	return tink_state_Observable.bind(this1,options,cb);
};
tink_state_State.toggle = function(s) {
	s.set(!s.poll().a);
};
tink_state_State.toCallback = function(this1) {
	return $bind(this1,this1.set);
};
tink_state_State.compound = function(source,update,comparator) {
	return new tink_state__$State_CompoundState(source,update,comparator);
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var tink_state__$Observable_SimpleObservable = function(f,comparator) {
	this._poll = f;
	this.comparator = comparator;
};
tink_state__$Observable_SimpleObservable.__name__ = true;
tink_state__$Observable_SimpleObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state__$Observable_SimpleObservable.prototype = {
	_poll: null
	,comparator: null
	,cache: null
	,resetCache: function(_) {
		this.cache = null;
	}
	,isValid: function() {
		return this.cache != null;
	}
	,poll: function() {
		var count = 0;
		var last = null;
		while(this.cache == null) {
			var cache = this.cache = this._poll();
			if(last == cache) {
				throw haxe_Exception.thrown("Polling loops on the same value");
			}
			last = cache;
			cache.b.handle($bind(this,this.resetCache));
			if(count++ >= 100) {
				throw haxe_Exception.thrown("Polling not concluded after 100 iterations");
			}
		}
		return this.cache;
	}
	,getComparator: function() {
		return this.comparator;
	}
	,__class__: tink_state__$Observable_SimpleObservable
};
var tink_state__$Observable_AutoObservable = function(comp,comparator) {
	var _gthis = this;
	tink_state__$Observable_SimpleObservable.call(this,function() {
		_gthis.trigger = new tink_core_FutureTrigger();
		if(_gthis.dependencies != null) {
			var changed = false;
			var _g = 0;
			var _g1 = _gthis.dependencies;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				if(d.changed()) {
					changed = true;
					break;
				}
			}
			if(changed) {
				var _g = 0;
				var _g1 = _gthis.dependencies;
				while(_g < _g1.length) {
					var d = _g1[_g];
					++_g;
					d.unlink();
				}
			} else {
				var _g = 0;
				var _g1 = _gthis.dependencies;
				while(_g < _g1.length) {
					var d = _g1[_g];
					++_g;
					d.resubscribe(_gthis.trigger);
				}
				var this1 = new tink_core_MPair(_gthis.last,_gthis.trigger);
				var this2 = this1;
				return this2;
			}
		}
		_gthis.dependencies = [];
		_gthis.isSubscribed = new haxe_ds_ObjectMap();
		var this1 = new tink_core_MPair(_gthis.last = comp.f(),_gthis.trigger);
		var this2 = this1;
		return this2;
	},comparator);
};
tink_state__$Observable_AutoObservable.__name__ = true;
tink_state__$Observable_AutoObservable.__super__ = tink_state__$Observable_SimpleObservable;
tink_state__$Observable_AutoObservable.prototype = $extend(tink_state__$Observable_SimpleObservable.prototype,{
	trigger: null
	,dependencies: null
	,isSubscribed: null
	,last: null
	,subscribe: function(dependency,initial) {
		if(!this.isSubscribed.h[dependency.__id__]) {
			this.isSubscribed.set(dependency,true);
			this.dependencies.push(new tink_state__$Observable_DependencyOf(dependency,initial,this.trigger));
		}
	}
	,__class__: tink_state__$Observable_AutoObservable
});
var tink_core_FutureObject = function() { };
tink_core_FutureObject.__name__ = true;
tink_core_FutureObject.__isInterface__ = true;
tink_core_FutureObject.prototype = {
	map: null
	,flatMap: null
	,handle: null
	,gather: null
	,eager: null
	,__class__: tink_core_FutureObject
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		return f.handle($yield);
	});
};
tink_core_FutureTrigger.prototype = {
	result: null
	,list: null
	,handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				ret.trigger(f(v));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
tink_core_CallbackList.__name__ = true;
tink_core_CallbackList.prototype = {
	cells: null
	,used: null
	,queue: null
	,busy: null
	,ondrain: function() {
	}
	,get_length: function() {
		return this.used;
	}
	,release: function() {
		if(--this.used < this.used >> 1) {
			this.compact();
		}
	}
	,add: function(cb) {
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		this.used++;
		return node;
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var _g = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g1 = 0;
			var _g2 = length;
			while(_g1 < _g2) {
				var i = _g1++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g1 = 0;
				var _g2 = length;
				while(_g1 < _g2) {
					var i = _g1++;
					var _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				var _g1 = 0;
				var _g2 = added;
				while(_g1 < _g2) {
					var i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		var _g = tink_core_TypedError.asError(e);
		var tmp;
		if(_g == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e);
		} else {
			var e = _g;
			tmp = e;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,__class__: tink_core_TypedError
};
var tink_state_Transform = {};
tink_state_Transform._new = function(f) {
	var this1 = f;
	return this1;
};
tink_state_Transform.apply = function(this1,value) {
	return this1(value);
};
tink_state_Transform.naiveAsync = function(f) {
	var this1 = function(p) {
		switch(p._hx_index) {
		case 0:
			var this1 = new tink_core__$Future_SuspendableFuture(function(_) {
				return null;
			});
			return this1;
		case 1:
			var v = p.result;
			return f(v);
		case 2:
			var e = p.error;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	};
	return this1;
};
tink_state_Transform.naive = function(f) {
	var this1 = function(p) {
		switch(p._hx_index) {
		case 0:
			return tink_state_Promised.Loading;
		case 1:
			var v = p.result;
			return tink_state_Promised.Done(f(v));
		case 2:
			var e = p.error;
			return tink_state_Promised.Failed(e);
		}
	};
	return this1;
};
tink_state_Transform.plain = function(f) {
	var this1 = f;
	return this1;
};
var Main = function(__coco_data_) {
	this.__coco_data = new coconut_ui_tools_Slot(this,null,null);
	var __tmp = new haxe_ds_StringMap();
	var target = "C++";
	__tmp.h[target] = true;
	var target = "C++ (GC Gen)";
	__tmp.h[target] = true;
	var target = "Cppia";
	__tmp.h[target] = true;
	var target = "NodeJS";
	__tmp.h[target] = true;
	var target = "NodeJS (ES6)";
	__tmp.h[target] = true;
	var target = "Java";
	__tmp.h[target] = true;
	var target = "JVM";
	__tmp.h[target] = true;
	var target = "HashLink";
	__tmp.h[target] = true;
	var target = "HashLink/C";
	__tmp.h[target] = true;
	var target = "HashLink Immix";
	__tmp.h[target] = true;
	var target = "HashLink/C Immix";
	__tmp.h[target] = true;
	var target = "C#";
	__tmp.h[target] = true;
	var target = "PHP";
	__tmp.h[target] = true;
	var target = "Python";
	__tmp.h[target] = true;
	var target = "Eval";
	__tmp.h[target] = true;
	var target = "Lua";
	__tmp.h[target] = true;
	var target = "Luajit";
	__tmp.h[target] = true;
	var target = "Neko";
	__tmp.h[target] = true;
	var this1 = new tink_state__$State_SimpleState(new tink_state_ObservableMap(__tmp),null,null);
	this.__coco_active = this1;
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
Main.__name__ = true;
Main.main = function() {
	var data = new data_BenchmarkData({ name : "formatter_noio", version : "haxe4"});
	var tmp = window.document.getElementById("app");
	var this1 = { f : function() {
		return data;
	}};
	coconut_vdom_Renderer.mountInto(tmp,Main.fromHxx({ },{ data : tink_state_Observable.auto(this1)}));
};
Main.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(Main.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
Main.__super__ = coconut_vdom_View;
Main.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var _gthis = this;
		var hxxMeta = { };
		var __r = [];
		var _g = tink_state_Observable.get_value(tink_state_Observable.get_value(this.__coco_data).__coco_data);
		switch(_g._hx_index) {
		case 0:
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"Loading",null));
			break;
		case 1:
			var list = _g.result;
			var hxxMeta1 = { };
			var this1 = { f : function() {
				return tink_state_Observable.get_value(_gthis.__coco_data);
			}};
			var target = tink_state_Observable.auto(this1);
			var this1 = { f : function() {
				return tink_state_State.get_value(tink_state_Observable.get_value(target).__coco_version);
			}};
			var children = tink_state_State.compound(tink_state_Observable.auto(this1),function(value) {
				tink_state_Observable.get_value(target).set_version(value);
			});
			var this1 = { f : function() {
				return tink_pure_List.fromArray(["haxe3","haxe4","haxe-nightly"]);
			}};
			var children1 = [Dropdown.fromHxx({ },{ value : children, options : tink_state_Observable.auto(this1)})];
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,{ },children1));
			var hxxMeta1 = { };
			var __r1 = [];
			var _g1 = 0;
			var _g2 = ["C++","C++ (GC Gen)","Cppia","NodeJS","NodeJS (ES6)","Java","JVM","HashLink","HashLink/C","HashLink Immix","HashLink/C Immix","C#","PHP","Python","Eval","Lua","Luajit","Neko"];
			while(_g1 < _g2.length) {
				var target1 = [_g2[_g1]];
				++_g1;
				var hxxMeta2 = { };
				var attr = tink_domspec_ClassName.ofString("button is-primary is-small " + (tink_state_Observable.get_value(tink_state_State.get_value(this.__coco_active).observe(target1[0])) ? "is-active" : "is-outlined"));
				var attr1 = { style : { margin : "4px"}, className : attr, onclick : (function(target) {
					return function(event) {
						tink_state_State.get_value(_gthis.__coco_active).set(target[0],!tink_state_Observable.get_value(tink_state_State.get_value(_gthis.__coco_active).observe(target[0])));
					};
				})(target1)};
				__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta2.ref,hxxMeta2.key,attr1,[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,target1[0],null)]));
			}
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,{ },__r1));
			var this1 = { f : function() {
				var series = [];
				var target = tink_state_Observable.get_value(tink_state_State.get_value(_gthis.__coco_active).observableKeys);
				while(target.hasNext()) {
					var target1 = target.next();
					if(tink_state_Observable.get_value(tink_state_State.get_value(_gthis.__coco_active).observe(target1))) {
						series.push(data_DataSeries.slice(data_DataSeries.time(list,target1),-20,-1));
					}
				}
				var dataset = data_DataSet.merge(series);
				var __tmp = [];
				var _g = 0;
				var _g1 = dataset.dates;
				while(_g < _g1.length) {
					var date = _g1[_g];
					++_g;
					__tmp.push(HxOverrides.dateStr(date));
				}
				var this1 = __tmp;
				var __tmp = [];
				var target = haxe_ds_StringMap.keysIterator(dataset.series.h);
				while(target.hasNext()) {
					var target1 = target.next();
					__tmp.push({ label : target1, backgroundColor : "rgba(0, 0, 0, 0)", borderColor : data_Target.color(target1), data : dataset.series.h[target1]});
				}
				return { type : "line", data : { labels : this1, datasets : __tmp}, options : { animation : false}};
			}};
			__r.push(ui_Chart.fromHxx({ },{ config : tink_state_Observable.auto(this1)}));
			break;
		case 2:
			var e = _g.error;
			__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,e.message,null));
			break;
		}
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ style : { width : "100vw", height : "100vh"}},__r);
	}
	,dropdown: function(attrs) {
		var _gthis = this;
		var hxxMeta = { };
		var attr = { className : tink_domspec_ClassName.ofString("dropdown")};
		var __r = [];
		var hxxMeta1 = { };
		var attr1 = { className : tink_domspec_ClassName.ofString("dropdown-trigger")};
		var hxxMeta2 = { };
		var attr2 = { className : tink_domspec_ClassName.ofString("button"), attributes : { "aria-haspopup" : "true", "aria-controls" : "dropdown-menu"}};
		var __r1 = [];
		var hxxMeta3 = { };
		var s = tink_state_State.get_value(tink_state_Observable.get_value(this.__coco_data).__coco_version);
		__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SPAN,hxxMeta3.ref,hxxMeta3.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null)]));
		var hxxMeta3 = { };
		var attr3 = { className : tink_domspec_ClassName.ofString("icon is-small")};
		var hxxMeta4 = { };
		var attr4 = { className : tink_domspec_ClassName.ofString("fas fa-angle-down"), attributes : { "aria-hidden" : "true"}};
		var __r2 = [];
		__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SPAN,hxxMeta3.ref,hxxMeta3.key,attr3,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.I,hxxMeta4.ref,hxxMeta4.key,attr4,__r2)]));
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,attr1,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta2.ref,hxxMeta2.key,attr2,__r1)]));
		var hxxMeta1 = { };
		var attr1 = { className : tink_domspec_ClassName.ofString("dropdown-menu"), id : "dropdown-menu", role : "menu"};
		var hxxMeta2 = { };
		var attr2 = { className : tink_domspec_ClassName.ofString("dropdown-content")};
		var __r1 = [];
		var v = "haxe3";
		var hxxMeta3 = { };
		var attr3 = { href : "#", className : tink_domspec_ClassName.ofString("dropdown-item " + (tink_state_State.get_value(tink_state_Observable.get_value(this.__coco_data).__coco_version) == v ? "is-active" : "")), onclick : function(event) {
			tink_state_Observable.get_value(_gthis.__coco_data).set_version(v);
		}};
		__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta3.ref,hxxMeta3.key,attr3,[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,v,null)]));
		var v1 = "haxe4";
		var hxxMeta3 = { };
		var attr3 = { href : "#", className : tink_domspec_ClassName.ofString("dropdown-item " + (tink_state_State.get_value(tink_state_Observable.get_value(this.__coco_data).__coco_version) == v1 ? "is-active" : "")), onclick : function(event) {
			tink_state_Observable.get_value(_gthis.__coco_data).set_version(v1);
		}};
		__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta3.ref,hxxMeta3.key,attr3,[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,v1,null)]));
		var v2 = "haxe-nightly";
		var hxxMeta3 = { };
		var attr3 = { href : "#", className : tink_domspec_ClassName.ofString("dropdown-item " + (tink_state_State.get_value(tink_state_Observable.get_value(this.__coco_data).__coco_version) == v2 ? "is-active" : "")), onclick : function(event) {
			tink_state_Observable.get_value(_gthis.__coco_data).set_version(v2);
		}};
		__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta3.ref,hxxMeta3.key,attr3,[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,v2,null)]));
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,attr1,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta2.ref,hxxMeta2.key,attr2,__r1)]));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,__coco_data: null
	,get_data: function() {
		return tink_state_Observable.get_value(this.__coco_data);
	}
	,__coco_active: null
	,get_active: function() {
		return tink_state_State.get_value(this.__coco_active);
	}
	,set_active: function(param) {
		this.__coco_active.set(param);
		return param;
	}
	,__initAttributes: function(attributes) {
		this.__coco_data.setData(attributes.data);
	}
	,__class__: Main
});
var Dropdown = function(__coco_data_) {
	this.__coco_options = new coconut_ui_tools_Slot(this,null,null);
	this.__coco_value = new coconut_ui_tools_Slot(this,null,null);
	var this1 = new tink_state__$State_SimpleState(false,null,null);
	this.__coco_open = this1;
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,null);
};
Dropdown.__name__ = true;
Dropdown.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(Dropdown.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
Dropdown.__super__ = coconut_vdom_View;
Dropdown.prototype = $extend(coconut_vdom_View.prototype,{
	render: function() {
		var _gthis = this;
		var hxxMeta = { };
		var attr = { className : tink_domspec_ClassName.ofString("dropdown " + (tink_state_State.get_value(this.__coco_open) ? "is-active" : ""))};
		var __r = [];
		var hxxMeta1 = { };
		var attr1 = { className : tink_domspec_ClassName.ofString("dropdown-trigger")};
		var hxxMeta2 = { };
		var attr2 = { className : tink_domspec_ClassName.ofString("button is-small"), onclick : function(event) {
			_gthis.__coco_open.set(true);
		}, attributes : { "aria-haspopup" : "true", "aria-controls" : "dropdown-menu"}};
		var __r1 = [];
		var hxxMeta3 = { };
		var s = tink_state_Observable.get_value(this.__coco_value);
		__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SPAN,hxxMeta3.ref,hxxMeta3.key,{ },[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null)]));
		var hxxMeta3 = { };
		var attr3 = { className : tink_domspec_ClassName.ofString("icon is-small")};
		var hxxMeta4 = { };
		var attr4 = { className : tink_domspec_ClassName.ofString("fas fa-angle-down"), attributes : { "aria-hidden" : "true"}};
		var __r2 = [];
		__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SPAN,hxxMeta3.ref,hxxMeta3.key,attr3,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.I,hxxMeta4.ref,hxxMeta4.key,attr4,__r2)]));
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,attr1,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta2.ref,hxxMeta2.key,attr2,__r1)]));
		var hxxMeta1 = { };
		var attr1 = { className : tink_domspec_ClassName.ofString("dropdown-menu"), id : "dropdown-menu", role : "menu"};
		var hxxMeta2 = { };
		var attr2 = { className : tink_domspec_ClassName.ofString("dropdown-content")};
		var __r1 = [];
		var _g = new tink_pure_NodeIterator(tink_state_Observable.get_value(this.__coco_options));
		while(_g.list.length > 0) {
			var v = [_g.next()];
			var hxxMeta3 = { };
			var attr3 = { className : tink_domspec_ClassName.ofString("dropdown-item " + (tink_state_Observable.get_value(this.__coco_value) == v[0] ? "is-active" : "")), onclick : tink_core_Callback.fromNiladic((function(v) {
				return function() {
					_gthis.__coco_open.set(false);
					return _gthis.set_value(v[0]);
				};
			})(v))};
			__r1.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta3.ref,hxxMeta3.key,attr3,[coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,v[0],null)]));
		}
		__r.push(coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta1.ref,hxxMeta1.key,attr1,[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta2.ref,hxxMeta2.key,attr2,__r1)]));
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,__r);
	}
	,__coco_options: null
	,get_options: function() {
		return tink_state_Observable.get_value(this.__coco_options);
	}
	,__coco_value: null
	,get_value: function() {
		return tink_state_Observable.get_value(this.__coco_value);
	}
	,set_value: function(param) {
		var _g = this.__coco_value.data;
		if(_g != null) {
			var v = _g;
			v.set(param);
		}
		return param;
	}
	,__coco_open: null
	,get_open: function() {
		return tink_state_State.get_value(this.__coco_open);
	}
	,set_open: function(param) {
		this.__coco_open.set(param);
		return param;
	}
	,__initAttributes: function(attributes) {
		this.__coco_options.setData(attributes.options);
		this.__coco_value.setData(attributes.value);
	}
	,__class__: Dropdown
});
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = true;
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var api_Root = function() { };
api_Root.__name__ = true;
api_Root.__isInterface__ = true;
api_Root.prototype = {
	get: null
	,__class__: api_Root
};
var cix_Style = function() { };
cix_Style.__name__ = true;
var cix_css_Declarations = function() { };
cix_css_Declarations.__name__ = true;
cix_css_Declarations.add = function(className,css) {
	if(cix_css_Declarations.declared == null) {
		cix_css_Declarations.declared = new haxe_ds_StringMap();
	}
	if(!cix_css_Declarations.declared.h[className]) {
		cix_css_Runtime.addRule(className,css());
		cix_css_Declarations.declared.h[className] = true;
	}
	return className;
};
var cix_css_Runtime = function() { };
cix_css_Runtime.__name__ = true;
cix_css_Runtime.addRule = function(id,css) {
	if(cix_css_Runtime.indices == null) {
		cix_css_Runtime.indices = new haxe_ds_StringMap();
		var old = window.document.querySelector("head style#_cix_");
		if(old != null) {
			window.document.head.removeChild(old);
		}
		var style = window.document.createElement("style");
		style.id = "_cix_";
		window.document.head.appendChild(style);
		cix_css_Runtime.sheet = style.sheet;
	}
	var _g = cix_css_Runtime.indices.h[id];
	var tmp;
	if(_g == null) {
		var v = cix_css_Runtime.sheet.cssRules.length;
		cix_css_Runtime.indices.h[id] = v;
		tmp = v;
	} else {
		var v = _g;
		tmp = v;
	}
	cix_css_Runtime.sheet.insertRule("@media all { " + css + " }",tmp);
};
var coconut_Ui = function() { };
coconut_Ui.__name__ = true;
var coconut_data_Model = function() { };
coconut_data_Model.__name__ = true;
coconut_data_Model.__isInterface__ = true;
var coconut_data_Value = {};
coconut_data_Value.getValue = function(this1) {
	return tink_state_Observable.get_value(this1);
};
coconut_data_Value.or = function(this1,fallback) {
	if(this1 == null) {
		return fallback;
	} else {
		return this1;
	}
};
var coconut_data_Variable = {};
coconut_data_Variable.or = function(this1,fallback) {
	if(this1 == null) {
		return fallback;
	} else {
		return this1;
	}
};
var coconut_data_helpers_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
coconut_data_helpers_Annex.__name__ = true;
coconut_data_helpers_Annex.prototype = {
	target: null
	,registry: null
	,__doGet: function(cls,fn) {
		var _g = this.registry.get(cls);
		if(_g == null) {
			var this1 = this.registry;
			var v = fn(this.target);
			this1.set(cls,v);
			return v;
		} else {
			var v = _g;
			return v;
		}
	}
	,__class__: coconut_data_helpers_Annex
};
var coconut_data_macros_Models = function() { };
coconut_data_macros_Models.__name__ = true;
var coconut_diffing_Applicator = function() { };
coconut_diffing_Applicator.__name__ = true;
coconut_diffing_Applicator.__isInterface__ = true;
coconut_diffing_Applicator.prototype = {
	unsetLastRender: null
	,setLastRender: null
	,getLastRender: null
	,traverseSiblings: null
	,traverseChildren: null
	,placeholder: null
	,__class__: coconut_diffing_Applicator
};
var coconut_diffing_Cursor = function() { };
coconut_diffing_Cursor.__name__ = true;
coconut_diffing_Cursor.__isInterface__ = true;
coconut_diffing_Cursor.prototype = {
	insert: null
	,'delete': null
	,step: null
	,current: null
	,__class__: coconut_diffing_Cursor
};
var coconut_diffing_Differ = function(applicator) {
	this.applicator = applicator;
};
coconut_diffing_Differ.__name__ = true;
coconut_diffing_Differ.prototype = {
	applicator: null
	,_renderAll: function(nodes,later,parent,$with) {
		var byType = new haxe_ds_ObjectMap();
		var childList = [];
		var process = null;
		process = function(nodes) {
			if(nodes != null) {
				var _g = 0;
				while(_g < nodes.length) {
					var n = nodes[_g];
					++_g;
					if(n != null) {
						switch(n._hx_index) {
						case 0:
							var n1 = n.n;
							childList.push(coconut_diffing_RNode.RNative(null,n1,null));
							break;
						case 1:
							var w = n.w;
							$with.widgetInst(w);
							var ref = [null];
							var key = coconut_diffing_Key.ofObject(w);
							var type = coconut_diffing_Differ.WIDGET_INST;
							var n2 = coconut_diffing_RNode.RWidget(w,null);
							var registry;
							var _g1 = byType.h[type.__id__];
							if(_g1 == null) {
								var v = new coconut_diffing_TypeRegistry();
								byType.set(type,v);
								registry = v;
							} else {
								var v1 = _g1;
								registry = v1;
							}
							if(ref[0] != null) {
								later((function(ref,r) {
									return function() {
										ref[0](r[0]);
									};
								})(ref,[w]));
							}
							if(key == null) {
								registry.put(n2);
							} else {
								var k = key;
								registry.set(k,n2);
							}
							childList.push(n2);
							break;
						case 2:
							var nodes1 = n.nodes;
							process(nodes1);
							break;
						case 3:
							var children = n.children;
							var attr = n.a;
							var key1 = n.key;
							var ref1 = n.ref;
							var type1 = n.type;
							var real = $with.native(type1,key1,attr,children);
							var ref2 = [ref1];
							var n3 = coconut_diffing_RNode.RNative(attr,real,ref1);
							var registry1;
							var _g2 = byType.h[type1.__id__];
							if(_g2 == null) {
								var v2 = new coconut_diffing_TypeRegistry();
								byType.set(type1,v2);
								registry1 = v2;
							} else {
								var v3 = _g2;
								registry1 = v3;
							}
							if(ref2[0] != null) {
								later((function(ref,r) {
									return function() {
										ref[0](r[0]);
									};
								})(ref2,[real]));
							}
							if(key1 == null) {
								registry1.put(n3);
							} else {
								var k1 = key1;
								registry1.set(k1,n3);
							}
							childList.push(n3);
							break;
						case 4:
							var a = n.a;
							var key2 = n.key;
							var ref3 = n.ref;
							var type2 = n.type;
							var w1 = $with.widget(type2,key2,a);
							var ref4 = [ref3];
							var n4 = coconut_diffing_RNode.RWidget(w1,ref3);
							var registry2;
							var _g3 = byType.h[type2.__id__];
							if(_g3 == null) {
								var v4 = new coconut_diffing_TypeRegistry();
								byType.set(type2,v4);
								registry2 = v4;
							} else {
								var v5 = _g3;
								registry2 = v5;
							}
							if(ref4[0] != null) {
								later((function(ref,r) {
									return function() {
										ref[0](r[0]);
									};
								})(ref4,[w1]));
							}
							if(key2 == null) {
								registry2.put(n4);
							} else {
								var k2 = key2;
								registry2.set(k2,n4);
							}
							childList.push(n4);
							break;
						}
					}
				}
			}
		};
		process(nodes);
		return new coconut_diffing_Rendered(byType,childList);
	}
	,renderAll: function(nodes,parent,later) {
		var _gthis = this;
		return this._renderAll(nodes,later,parent,{ native : function(type,_,attr,children) {
			return _gthis.createNative(type,attr,children,parent,later);
		}, widget : function(t,_,a) {
			return _gthis.createWidget(t,a,parent,later);
		}, widgetInst : function(w) {
			_gthis.mountInstance(w,parent,later);
		}});
	}
	,mountInstance: function(w,parent,later) {
		if(w._coco_alive) {
			tink_core_TypedError.withData(null,"Same widget instance mounted twice",w,{ fileName : "coconut/diffing/Differ.hx", lineNumber : 93, className : "coconut.diffing.Differ", methodName : "mountInstance"});
		}
		w._coco_initialize(this,parent,later);
	}
	,createWidget: function(t,a,parent,later) {
		var ret = t.create(a);
		ret._coco_initialize(this,parent,later);
		return ret;
	}
	,updateAll: function(before,nodes,parent,later) {
		var _gthis = this;
		var _g = 0;
		var _g1 = before.childList;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			switch(node._hx_index) {
			case 0:
				var _g2 = node.r;
				var _g3 = node.a;
				var f = node.ref;
				if(f != null) {
					f(null);
				}
				break;
			case 1:
				var _g4 = node.w;
				var f1 = node.ref;
				if(f1 != null) {
					f1(null);
				}
				break;
			default:
			}
		}
		var previous = function(t,key) {
			var _g = before.byType.h[t.__id__];
			if(_g == null) {
				return null;
			} else {
				var v = _g;
				if(key == null) {
					return v.pull();
				} else {
					return v.get(key);
				}
			}
		};
		var native = function(type,key,nuAttr,nuChildren) {
			var _g = previous(type,key);
			if(_g == null) {
				return _gthis.createNative(type,nuAttr,nuChildren,parent,later);
			} else if(_g._hx_index == 0) {
				var _g1 = _g.ref;
				var r = _g.r;
				var oldAttr = _g.a;
				type.update(r,oldAttr,nuAttr);
				_gthis._render(nuChildren,r,parent,later);
				return r;
			} else {
				throw haxe_Exception.thrown("assert");
			}
		};
		var after = this._renderAll(nodes,later,parent,{ native : native, widget : function(type,key,attr) {
			var _g = previous(type,key);
			if(_g == null) {
				return _gthis.createWidget(type,attr,parent,later);
			} else if(_g._hx_index == 1) {
				var _g1 = _g.ref;
				var w = _g.w;
				type.update(attr,w);
				return w;
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}, widgetInst : function(w) {
			var _g = previous(coconut_diffing_Differ.WIDGET_INST,coconut_diffing_Key.ofObject(w));
			if(_g == null) {
				_gthis.mountInstance(w,parent,later);
			} else if(_g._hx_index == 1) {
				var _g1 = _g.ref;
				var w = _g.w;
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}});
		var registry = before.byType.iterator();
		while(registry.hasNext()) {
			var registry1 = registry.next();
			var f = $bind(this,this.destroyRender);
			if(registry1.keyed != null) {
				var v = haxe_ds_StringMap.valueIterator(registry1.keyed.h);
				while(v.hasNext()) {
					var v1 = v.next();
					f(v1);
				}
			}
			if(registry1.unkeyed != null) {
				var _g = 0;
				var _g1 = registry1.unkeyed;
				while(_g < _g1.length) {
					var v2 = _g1[_g];
					++_g;
					f(v2);
				}
			}
		}
		return after;
	}
	,destroyRender: function(r) {
		switch(r._hx_index) {
		case 0:
			var _g = r.ref;
			var _g = r.a;
			var real = r.r;
			var _g = this.applicator.unsetLastRender(real);
			if(_g != null) {
				var _g1 = _g.byType;
				var children = _g.childList;
				var _g = 0;
				while(_g < children.length) {
					var c = children[_g];
					++_g;
					this.destroyRender(c);
				}
			}
			break;
		case 1:
			var _g = r.ref;
			var w = r.w;
			w._coco_teardown();
			break;
		}
	}
	,_render: function(nodes,target,parent,later) {
		var lastCount = 0;
		var ret;
		var _g = this.applicator.getLastRender(target);
		if(_g == null) {
			ret = this.renderAll(nodes,parent,later);
		} else {
			var v = _g;
			lastCount = v.justCount();
			ret = this.updateAll(v,nodes,parent,later);
		}
		this.applicator.setLastRender(target,ret);
		this.setChildren(later,lastCount,this.applicator.traverseChildren(target),ret);
		return ret;
	}
	,setChildren: function(later,previousCount,cursor,next,log) {
		var insertedCount = 0;
		var currentCount = 0;
		next.each(later,function(r) {
			currentCount += 1;
			if(r == cursor.current()) {
				cursor.step();
			} else if(cursor.insert(r)) {
				insertedCount += 1;
			}
		});
		var deleteCount = previousCount + insertedCount - currentCount;
		if(log) {
			console.log("coconut/diffing/Differ.hx:197:",deleteCount);
		}
		var _g = 0;
		var _g1 = deleteCount;
		while(_g < _g1) {
			var i = _g++;
			if(!cursor.delete()) {
				break;
			}
		}
	}
	,render: function(virtual,target) {
		var _gthis = this;
		this.run(function(later) {
			return _gthis._render(virtual,target,null,later);
		});
	}
	,run: function(f) {
		var after = [];
		var ret = f(function(later) {
			if(later != null) {
				after.push(later);
			}
		});
		var _g = 0;
		while(_g < after.length) {
			var f = after[_g];
			++_g;
			f();
		}
		return ret;
	}
	,createNative: function(type,attr,children,parent,later) {
		var ret = type.create(attr);
		if(children != null) {
			this._render(children,ret,parent,later);
		}
		return ret;
	}
	,__class__: coconut_diffing_Differ
};
var coconut_diffing_Key = {};
coconut_diffing_Key.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
coconut_diffing_Key.ofObject = function(o) {
	return coconut_diffing_Key.ofFloat(o.__id__ || (o.__id__ = $global.$haxeUID++));
};
var coconut_diffing_KeyMap = {};
coconut_diffing_KeyMap._new = function() {
	var this1 = new haxe_ds_StringMap();
	return this1;
};
coconut_diffing_KeyMap.get = function(this1,key) {
	var _g = this1.h[key];
	if(_g == null) {
		return null;
	} else {
		var v = _g;
		if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
			delete(this1.h[key]);
		}
		return v;
	}
};
coconut_diffing_KeyMap.each = function(this1,f) {
	var v = haxe_ds_StringMap.valueIterator(this1.h);
	while(v.hasNext()) {
		var v1 = v.next();
		f(v1);
	}
};
var coconut_diffing_NodeType = function() { };
coconut_diffing_NodeType.__name__ = true;
coconut_diffing_NodeType.__isInterface__ = true;
coconut_diffing_NodeType.prototype = {
	create: null
	,update: null
	,__class__: coconut_diffing_NodeType
};
var coconut_diffing_RNode = $hxEnums["coconut.diffing.RNode"] = { __ename__ : true, __constructs__ : ["RNative","RWidget"]
	,RNative: ($_=function(a,r,ref) { return {_hx_index:0,a:a,r:r,ref:ref,__enum__:"coconut.diffing.RNode",toString:$estr}; },$_.__params__ = ["a","r","ref"],$_)
	,RWidget: ($_=function(w,ref) { return {_hx_index:1,w:w,ref:ref,__enum__:"coconut.diffing.RNode",toString:$estr}; },$_.__params__ = ["w","ref"],$_)
};
var coconut_diffing_Rendered = function(byType,childList) {
	this.byType = byType;
	this.childList = childList;
};
coconut_diffing_Rendered.__name__ = true;
coconut_diffing_Rendered.prototype = {
	byType: null
	,childList: null
	,flatten: function(later) {
		var ret = [];
		this.each(later,function(r) {
			ret.push(r);
		});
		return ret;
	}
	,first: function(later) {
		var found = null;
		try {
			this.each(later,function(r) {
				found = r;
				throw haxe_Exception.thrown(found);
			});
		} catch( _g ) {
			var d = haxe_Exception.caught(_g).unwrap();
			if(d != found) {
				throw haxe_Exception.thrown(d);
			}
		}
		return found;
	}
	,justCount: function() {
		var ret = 0;
		var _g = 0;
		var _g1 = this.childList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var ret1;
			switch(c._hx_index) {
			case 0:
				var _g2 = c.ref;
				var _g3 = c.r;
				var _g4 = c.a;
				ret1 = 1;
				break;
			case 1:
				var _g5 = c.ref;
				var w = c.w;
				ret1 = w._coco_lastRender.justCount();
				break;
			}
			ret += ret1;
		}
		return ret;
	}
	,each: function(later,f) {
		var rec = null;
		rec = function(children) {
			var _g = 0;
			while(_g < children.length) {
				var c = children[_g];
				++_g;
				switch(c._hx_index) {
				case 0:
					var _g1 = c.ref;
					var _g2 = c.a;
					var r = c.r;
					f(r);
					break;
				case 1:
					var _g3 = c.ref;
					var w = c.w;
					rec(w._coco_getRender(later).childList);
					break;
				}
			}
		};
		rec(this.childList);
	}
	,__class__: coconut_diffing_Rendered
};
var coconut_diffing_TypeRegistry = function() {
};
coconut_diffing_TypeRegistry.__name__ = true;
coconut_diffing_TypeRegistry.prototype = {
	keyed: null
	,unkeyed: null
	,get: function(key) {
		if(this.keyed == null) {
			return null;
		} else {
			var this1 = this.keyed;
			var _g = this1.h[key];
			if(_g == null) {
				return null;
			} else {
				var v = _g;
				var _this = this1;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
				return v;
			}
		}
	}
	,set: function(key,value) {
		if(this.keyed == null) {
			var this1 = new haxe_ds_StringMap();
			this.keyed = this1;
		}
		this.keyed.h[key] = value;
	}
	,put: function(v) {
		if(this.unkeyed == null) {
			this.unkeyed = [];
		}
		this.unkeyed.push(v);
	}
	,pull: function() {
		if(this.unkeyed == null) {
			return null;
		} else {
			return this.unkeyed.shift();
		}
	}
	,__class__: coconut_diffing_TypeRegistry
};
var coconut_diffing_VNode = {};
coconut_diffing_VNode.native = function(type,ref,key,attr,children) {
	return coconut_diffing_VNodeData.VNative(type,ref,key,attr,children);
};
coconut_diffing_VNode.fragment = function(attr,children) {
	return coconut_diffing_VNodeData.VMany(children);
};
var coconut_diffing_VNodeData = $hxEnums["coconut.diffing.VNodeData"] = { __ename__ : true, __constructs__ : ["VNativeInst","VWidgetInst","VMany","VNative","VWidget"]
	,VNativeInst: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["n"],$_)
	,VWidgetInst: ($_=function(w) { return {_hx_index:1,w:w,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["w"],$_)
	,VMany: ($_=function(nodes) { return {_hx_index:2,nodes:nodes,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["nodes"],$_)
	,VNative: ($_=function(type,ref,key,a,children) { return {_hx_index:3,type:type,ref:ref,key:key,a:a,children:children,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["type","ref","key","a","children"],$_)
	,VWidget: ($_=function(type,ref,key,a) { return {_hx_index:4,type:type,ref:ref,key:key,a:a,__enum__:"coconut.diffing.VNodeData",toString:$estr}; },$_.__params__ = ["type","ref","key","a"],$_)
};
var coconut_ui_ChildrenOf = {};
coconut_ui_ChildrenOf.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
coconut_ui_ChildrenOf.get = function(this1,index) {
	if(this1 == null) {
		return null;
	} else {
		return this1[index];
	}
};
coconut_ui_ChildrenOf.ofSingle = function(r) {
	return [r];
};
coconut_ui_ChildrenOf.concat = function(this1,that) {
	if(this1 == null) {
		return that;
	} else {
		return this1.concat(that);
	}
};
coconut_ui_ChildrenOf.prepend = function(this1,r) {
	if(this1 == null) {
		if(r == null) {
			return null;
		} else {
			var v = r;
			return coconut_ui_ChildrenOf.ofSingle(v);
		}
	} else if(r == null) {
		var v = this1;
		return v;
	} else {
		var a = this1;
		var b = r;
		return [b].concat(a);
	}
};
coconut_ui_ChildrenOf.append = function(this1,r) {
	if(this1 == null) {
		if(r == null) {
			return null;
		} else {
			var v = r;
			return coconut_ui_ChildrenOf.ofSingle(v);
		}
	} else if(r == null) {
		var v = this1;
		return v;
	} else {
		var a = this1;
		var b = r;
		return a.concat([b]);
	}
};
var coconut_ui_Ref = {};
coconut_ui_Ref._new = function(f) {
	var this1 = f;
	return this1;
};
var coconut_vdom__$Html_Elt = function(tag) {
	this.tag = tag;
};
coconut_vdom__$Html_Elt.__name__ = true;
coconut_vdom__$Html_Elt.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_Elt.setField = function(target,name,newVal,oldVal) {
	target[name] = newVal;
};
coconut_vdom__$Html_Elt.setStyle = function(target,name,newVal,oldVal) {
	target[name] = newVal == null ? null : newVal;
};
coconut_vdom__$Html_Elt.setProp = function(element,name,newVal,oldVal) {
	switch(name) {
	case "attributes":
		var newProps = newVal;
		var oldProps = oldVal;
		var updateProp = coconut_vdom__$Html_Elt.updateAttribute;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					var b = _g2;
					var a = _g3;
					if(a != b) {
						var old = _g2;
						var nu = _g3;
						updateProp(element,key,nu,old);
					}
				} else {
					var b1 = _g2;
					var a1 = _g3;
					if(a1 != b1) {
						var old1 = _g2;
						var nu1 = _g3;
						updateProp(element,key,nu1,old1);
					}
				}
			}
		}
		break;
	case "className":
		if(!newVal) {
			element.removeAttribute("class");
		} else if(newVal == null) {
			if(element.hasAttribute(name)) {
				element.removeAttribute(name);
			} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
				element[name] = null;
			} else {
				delete(element[name]);
			}
		} else {
			element[name] = newVal;
		}
		break;
	case "style":
		var target = element.style;
		var newProps = newVal;
		var oldProps = oldVal;
		var updateProp = coconut_vdom__$Html_Elt.setStyle;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					var b = _g2;
					var a = _g3;
					if(a != b) {
						var old = _g2;
						var nu = _g3;
						updateProp(target,key,nu,old);
					}
				} else {
					var b1 = _g2;
					var a1 = _g3;
					if(a1 != b1) {
						var old1 = _g2;
						var nu1 = _g3;
						updateProp(target,key,nu1,old1);
					}
				}
			}
		}
		break;
	default:
		if(newVal == null) {
			if(element.hasAttribute(name)) {
				element.removeAttribute(name);
			} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
				element[name] = null;
			} else {
				delete(element[name]);
			}
		} else {
			element[name] = newVal;
		}
	}
};
coconut_vdom__$Html_Elt.updateAttribute = function(element,name,newVal,oldVal) {
	if(newVal == null) {
		element.removeAttribute(name);
	} else {
		element.setAttribute(name,newVal);
	}
};
coconut_vdom__$Html_Elt.prototype = {
	tag: null
	,create: function(attr) {
		var ret = window.document.createElement(this.tag);
		var newProps = attr;
		var oldProps = null;
		var updateProp = coconut_vdom__$Html_Elt.setProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret1 = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret1[key] = true;
				}
				keys = ret1;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					var b = _g2;
					var a = _g3;
					if(a != b) {
						var old = _g2;
						var nu = _g3;
						updateProp(ret,key,nu,old);
					}
				} else {
					var b1 = _g2;
					var a1 = _g3;
					if(a1 != b1) {
						var old1 = _g2;
						var nu1 = _g3;
						updateProp(ret,key,nu1,old1);
					}
				}
			}
		}
		return ret;
	}
	,update: function(target,old,nu) {
		var newProps = nu;
		var oldProps = old;
		var updateProp = coconut_vdom__$Html_Elt.setProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					var b = _g2;
					var a = _g3;
					if(a != b) {
						var old = _g2;
						var nu = _g3;
						updateProp(target,key,nu,old);
					}
				} else {
					var b1 = _g2;
					var a1 = _g3;
					if(a1 != b1) {
						var old1 = _g2;
						var nu1 = _g3;
						updateProp(target,key,nu1,old1);
					}
				}
			}
		}
	}
	,__class__: coconut_vdom__$Html_Elt
};
var coconut_vdom__$Html_Svg = function(tag) {
	this.tag = tag;
};
coconut_vdom__$Html_Svg.__name__ = true;
coconut_vdom__$Html_Svg.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_Svg.setSvgProp = function(element,name,newVal,oldVal) {
	switch(name) {
	case "className":case "viewBox":
		if(newVal == null) {
			element.removeAttributeNS("http://www.w3.org/2000/svg",name);
		} else {
			element.setAttributeNS("http://www.w3.org/2000/svg",name,newVal);
		}
		break;
	case "xmlns":
		break;
	default:
		if(name in element) {
			switch(name) {
			case "attributes":
				var newProps = newVal;
				var oldProps = oldVal;
				var updateProp = coconut_vdom__$Html_Elt.updateAttribute;
				if(newProps != oldProps) {
					var keys;
					if(newProps == null) {
						newProps = coconut_diffing_Differ.EMPTY;
						keys = oldProps;
					} else if(oldProps == null) {
						oldProps = coconut_diffing_Differ.EMPTY;
						keys = newProps;
					} else {
						var ret = Reflect.copy(newProps);
						var _g = 0;
						var _g1 = Reflect.fields(oldProps);
						while(_g < _g1.length) {
							var key = _g1[_g];
							++_g;
							ret[key] = true;
						}
						keys = ret;
					}
					var _g = 0;
					var _g1 = Reflect.fields(keys);
					while(_g < _g1.length) {
						var key = _g1[_g];
						++_g;
						var _g2 = oldProps[key];
						var _g3 = newProps[key];
						if(_g3 == null) {
							var b = _g2;
							var a = _g3;
							if(a != b) {
								var old = _g2;
								var nu = _g3;
								updateProp(element,key,nu,old);
							}
						} else {
							var b1 = _g2;
							var a1 = _g3;
							if(a1 != b1) {
								var old1 = _g2;
								var nu1 = _g3;
								updateProp(element,key,nu1,old1);
							}
						}
					}
				}
				break;
			case "className":
				if(!newVal) {
					element.removeAttribute("class");
				} else if(newVal == null) {
					if(element.hasAttribute(name)) {
						element.removeAttribute(name);
					} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
						element[name] = null;
					} else {
						delete(element[name]);
					}
				} else {
					element[name] = newVal;
				}
				break;
			case "style":
				var target = element.style;
				var newProps = newVal;
				var oldProps = oldVal;
				var updateProp = coconut_vdom__$Html_Elt.setStyle;
				if(newProps != oldProps) {
					var keys;
					if(newProps == null) {
						newProps = coconut_diffing_Differ.EMPTY;
						keys = oldProps;
					} else if(oldProps == null) {
						oldProps = coconut_diffing_Differ.EMPTY;
						keys = newProps;
					} else {
						var ret = Reflect.copy(newProps);
						var _g = 0;
						var _g1 = Reflect.fields(oldProps);
						while(_g < _g1.length) {
							var key = _g1[_g];
							++_g;
							ret[key] = true;
						}
						keys = ret;
					}
					var _g = 0;
					var _g1 = Reflect.fields(keys);
					while(_g < _g1.length) {
						var key = _g1[_g];
						++_g;
						var _g2 = oldProps[key];
						var _g3 = newProps[key];
						if(_g3 == null) {
							var b = _g2;
							var a = _g3;
							if(a != b) {
								var old = _g2;
								var nu = _g3;
								updateProp(target,key,nu,old);
							}
						} else {
							var b1 = _g2;
							var a1 = _g3;
							if(a1 != b1) {
								var old1 = _g2;
								var nu1 = _g3;
								updateProp(target,key,nu1,old1);
							}
						}
					}
				}
				break;
			default:
				if(newVal == null) {
					if(element.hasAttribute(name)) {
						element.removeAttribute(name);
					} else if(HxOverrides.cca(name,0) == 111 && HxOverrides.cca(name,1) == 110) {
						element[name] = null;
					} else {
						delete(element[name]);
					}
				} else {
					element[name] = newVal;
				}
			}
		} else if(newVal == null) {
			element.removeAttribute(name);
		} else {
			element.setAttribute(name,newVal);
		}
	}
};
coconut_vdom__$Html_Svg.prototype = {
	tag: null
	,create: function(attr) {
		var ret = window.document.createElementNS("http://www.w3.org/2000/svg",this.tag);
		var newProps = attr;
		var oldProps = null;
		var updateProp = coconut_vdom__$Html_Svg.setSvgProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret1 = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret1[key] = true;
				}
				keys = ret1;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					var b = _g2;
					var a = _g3;
					if(a != b) {
						var old = _g2;
						var nu = _g3;
						updateProp(ret,key,nu,old);
					}
				} else {
					var b1 = _g2;
					var a1 = _g3;
					if(a1 != b1) {
						var old1 = _g2;
						var nu1 = _g3;
						updateProp(ret,key,nu1,old1);
					}
				}
			}
		}
		return ret;
	}
	,update: function(target,old,nu) {
		var newProps = nu;
		var oldProps = old;
		var updateProp = coconut_vdom__$Html_Svg.setSvgProp;
		if(newProps != oldProps) {
			var keys;
			if(newProps == null) {
				newProps = coconut_diffing_Differ.EMPTY;
				keys = oldProps;
			} else if(oldProps == null) {
				oldProps = coconut_diffing_Differ.EMPTY;
				keys = newProps;
			} else {
				var ret = Reflect.copy(newProps);
				var _g = 0;
				var _g1 = Reflect.fields(oldProps);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					ret[key] = true;
				}
				keys = ret;
			}
			var _g = 0;
			var _g1 = Reflect.fields(keys);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _g2 = oldProps[key];
				var _g3 = newProps[key];
				if(_g3 == null) {
					var b = _g2;
					var a = _g3;
					if(a != b) {
						var old = _g2;
						var nu = _g3;
						updateProp(target,key,nu,old);
					}
				} else {
					var b1 = _g2;
					var a1 = _g3;
					if(a1 != b1) {
						var old1 = _g2;
						var nu1 = _g3;
						updateProp(target,key,nu1,old1);
					}
				}
			}
		}
	}
	,__class__: coconut_vdom__$Html_Svg
};
var coconut_vdom_Html = function() { };
coconut_vdom_Html.__name__ = true;
coconut_vdom_Html.nodeType = function(tag) {
	var _g = coconut_vdom_Html.nodeTypes.h[tag];
	var tmp;
	if(_g == null) {
		var this1 = coconut_vdom_Html.nodeTypes;
		var v;
		var _g1 = tag.split(":");
		switch(_g1.length) {
		case 1:
			var _g2 = _g1[0];
			v = new coconut_vdom__$Html_Elt(tag);
			break;
		case 2:
			var _g2 = _g1[0];
			if(_g2 == "svg") {
				var tag1 = _g1[1];
				v = new coconut_vdom__$Html_Svg(tag1);
			} else {
				var unknown = _g2;
				throw haxe_Exception.thrown("unknown namespace " + unknown);
			}
			break;
		default:
			throw haxe_Exception.thrown("invalid tag " + tag);
		}
		this1.h[tag] = v;
		tmp = v;
	} else {
		var v = _g;
		tmp = v;
	}
	return tmp;
};
coconut_vdom_Html.text = function(value) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,value,null);
};
coconut_vdom_Html.h = function(tag,ref,key,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.nodeType(tag),ref,key,attr,children);
};
coconut_vdom_Html.raw = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_HtmlFragment.byTag(attr.tag),hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.wbr = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.WBR,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.video = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.VIDEO,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ul = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.UL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.track = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TRACK,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.tr = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TR,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.title = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TITLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.thead = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.THEAD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.th = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TH,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.tfoot = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TFOOT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.textarea = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TEXTAREA,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.td = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.tbody = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TBODY,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.table = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.TABLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.svg = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SVG,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.summary = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SUMMARY,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.style = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.STYLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.strong = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.STRONG,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.span = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SPAN,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.source = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SOURCE,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.small = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SMALL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.select = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SELECT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.section = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SECTION,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.script = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.SCRIPT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.rect = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.RECT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.pre = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PRE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.polygon = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.POLYGON,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.picture = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PICTURE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.path = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PATH,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.param = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.PARAM,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.p = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.P,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.option = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.OPTION,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ol = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.OL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.object = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.OBJECT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.nav = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.NAV,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.meta = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.META,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.menu = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.MENU,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.main = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.MAIN,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.link = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LINK,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.li = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LI,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.legend = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LEGEND,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.label = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.LABEL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ins = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INS,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.input = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.INPUT,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.img = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.IMG,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.iframe = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.IFRAME,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.i = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.I,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.html = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HTML,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.hr = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HR,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.header = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HEADER,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.head = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.HEAD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h6 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H6,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h5 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H5,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h4 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H4,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h3 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H3,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h2 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H2,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.h1 = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.H1,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.form = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.FORM,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.footer = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.FOOTER,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.fieldset = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.FIELDSET,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.embed = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.EMBED,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.em = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.EM,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.ellipse = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.ELLIPSE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.dt = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DT,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.dl = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.div = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.details = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DETAILS,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.del = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DEL,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.dd = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DD,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.code = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.CODE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.circle = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.CIRCLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.canvas = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.CANVAS,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.button = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BUTTON,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.br = function(hxxMeta,attr) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BR,hxxMeta.ref,hxxMeta.key,attr,null);
};
coconut_vdom_Html.body = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BODY,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.blockquote = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.BLOCKQUOTE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.b = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.B,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.audio = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.AUDIO,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.aside = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.ASIDE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.article = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.ARTICLE,hxxMeta.ref,hxxMeta.key,attr,children);
};
coconut_vdom_Html.a = function(hxxMeta,attr,children) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.A,hxxMeta.ref,hxxMeta.key,attr,children);
};
var coconut_vdom__$Html_HtmlFragment = function(tag) {
	this.tag = tag;
};
coconut_vdom__$Html_HtmlFragment.__name__ = true;
coconut_vdom__$Html_HtmlFragment.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_HtmlFragment.byTag = function(tag) {
	if(tag == null) {
		tag = "span";
	}
	tag = tag.toUpperCase();
	var _g = coconut_vdom__$Html_HtmlFragment.tags.h[tag];
	if(_g == null) {
		var v = new coconut_vdom__$Html_HtmlFragment(tag);
		coconut_vdom__$Html_HtmlFragment.tags.h[tag] = v;
		return v;
	} else {
		var v = _g;
		return v;
	}
};
coconut_vdom__$Html_HtmlFragment.prototype = {
	tag: null
	,create: function(a) {
		var ret = window.document.createElement(this.tag);
		ret.className = a.className;
		ret.innerHTML = a.content;
		return ret;
	}
	,update: function(w,old,nu) {
		w.className = nu.className;
		if(old.content != nu.content) {
			w.innerHTML = nu.content;
		}
	}
	,__class__: coconut_vdom__$Html_HtmlFragment
};
var coconut_vdom__$Html_Text = function() {
};
coconut_vdom__$Html_Text.__name__ = true;
coconut_vdom__$Html_Text.__interfaces__ = [coconut_diffing_NodeType];
coconut_vdom__$Html_Text.prototype = {
	create: function(text) {
		return window.document.createTextNode(text);
	}
	,update: function(target,old,nu) {
		if(nu != old) {
			target.textContent = nu;
		}
	}
	,__class__: coconut_vdom__$Html_Text
};
var coconut_vdom_RenderResult = {};
coconut_vdom_RenderResult._new = function(n) {
	var this1 = n;
	return this1;
};
coconut_vdom_RenderResult.ofText = function(s) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,s,null);
};
coconut_vdom_RenderResult.ofInt = function(i) {
	return coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,i == null ? "null" : "" + i,null);
};
coconut_vdom_RenderResult.ofNode = function(n) {
	return coconut_diffing_VNodeData.VNativeInst(n);
};
coconut_vdom_RenderResult.ofView = function(v) {
	return coconut_diffing_VNodeData.VWidgetInst(v);
};
var coconut_vdom__$Renderer_DomBackend = function() {
};
coconut_vdom__$Renderer_DomBackend.__name__ = true;
coconut_vdom__$Renderer_DomBackend.__interfaces__ = [coconut_diffing_Applicator];
coconut_vdom__$Renderer_DomBackend.prototype = {
	unsetLastRender: function(target) {
		var ret = target._coco_;
		delete(target["_coco_"]);
		return ret;
	}
	,traverseSiblings: function(first) {
		return new coconut_vdom__$Renderer_DomCursor(first.parentNode,first);
	}
	,traverseChildren: function(parent) {
		return new coconut_vdom__$Renderer_DomCursor(parent,parent.firstChild);
	}
	,placeholder: function(target) {
		return coconut_vdom__$Renderer_DomBackend.PLACEHOLDER;
	}
	,getLastRender: function(target) {
		return target._coco_;
	}
	,setLastRender: function(target,r) {
		target._coco_ = r;
	}
	,__class__: coconut_vdom__$Renderer_DomBackend
};
var coconut_vdom_Renderer = function() { };
coconut_vdom_Renderer.__name__ = true;
coconut_vdom_Renderer.mountInto = function(target,vdom) {
	coconut_vdom_Renderer.DIFFER.render([vdom],target);
};
coconut_vdom_Renderer.getNative = function(view) {
	return coconut_vdom_Renderer.getAllNative(view)[0];
};
coconut_vdom_Renderer.getAllNative = function(view) {
	var _g = view._coco_lastRender;
	if(_g == null) {
		return [];
	} else {
		var r = _g;
		return r.flatten(null);
	}
};
coconut_vdom_Renderer.updateAll = function() {
	tink_state_Observable.updateAll();
};
var coconut_vdom__$Renderer_DomCursor = function(parent,cur) {
	this.parent = parent;
	this.cur = cur;
};
coconut_vdom__$Renderer_DomCursor.__name__ = true;
coconut_vdom__$Renderer_DomCursor.__interfaces__ = [coconut_diffing_Cursor];
coconut_vdom__$Renderer_DomCursor.prototype = {
	parent: null
	,cur: null
	,insert: function(real) {
		var inserted = real.parentNode != this.parent;
		this.parent.insertBefore(real,this.cur);
		return inserted;
	}
	,step: function() {
		var _g = this.cur;
		if(_g == null) {
			return false;
		} else {
			var v = _g;
			return (this.cur = v.nextSibling) != null;
		}
	}
	,'delete': function() {
		var _g = this.cur;
		if(_g == null) {
			return false;
		} else {
			var v = _g;
			this.cur = v.nextSibling;
			this.parent.removeChild(v);
			return true;
		}
	}
	,current: function() {
		return this.cur;
	}
	,__class__: coconut_vdom__$Renderer_DomCursor
};
var data_BenchmarkData = function(__coco_init) {
	var _gthis = this;
	this._updatePerformed = tink_core_Signal.trigger();
	this.annex = new coconut_data_helpers_Annex(this);
	this.name = __coco_init.name;
	var this1 = new tink_state__$State_SimpleState(__coco_init.version,null,null);
	this.__coco_version = this1;
	this.remote = new tink_web_proxy_Remote0(new tink_http_clients_SecureJsClient(),{ host : tink_url_Host._new("benchs.haxe.org",443), pathSuffix : ".json"});
	this.__coco_data = tink_state_Observable.auto(tink_state_Computation.async(function() {
		return _gthis.remote.get(_gthis.name,tink_state_State.get_value(_gthis.__coco_version));
	}));
	var this1 = new tink_state__$State_SimpleState(0,null,null);
	this.__coco_transitionCount = this1;
	this.errorTrigger = tink_core_Signal.trigger();
	this.transitionErrors = this.errorTrigger;
	this.observables = { name : tink_state_Observable.const(this.name), version : this.__coco_version, remote : tink_state_Observable.const(this.remote), data : this.__coco_data, isInTransition : tink_state_Observable.map(this.__coco_transitionCount,tink_state_Transform.plain(function(count) {
		return count > 0;
	}))};
};
data_BenchmarkData.__name__ = true;
data_BenchmarkData.__interfaces__ = [coconut_data_Model];
data_BenchmarkData.prototype = {
	name: null
	,remote: null
	,get_name: function() {
		return this.name;
	}
	,__coco_version: null
	,get_version: function() {
		return tink_state_State.get_value(this.__coco_version);
	}
	,set_version: function(param) {
		this._updatePerformed.handlers.invoke({ version : param});
		this.__coco_version.set(param);
		return param;
	}
	,get_remote: function() {
		return this.remote;
	}
	,__coco_data: null
	,get_data: function() {
		return tink_state_Observable.get_value(this.__coco_data);
	}
	,__cocoupdate: function(ret) {
		var _gthis = this;
		var sync = true;
		var done = false;
		ret.handle(function(o) {
			done = true;
			if(!sync) {
				_gthis.__coco_transitionCount.set(tink_state_State.get_value(_gthis.__coco_transitionCount) - 1);
			}
			switch(o._hx_index) {
			case 0:
				var delta = o.data;
				var delta1 = delta;
				var existent = tink_Anon.getExistentFields(delta1);
				if(existent.version) {
					_gthis.__coco_version.set(delta1.version);
				}
				_gthis._updatePerformed.handlers.invoke(delta1);
				break;
			case 1:
				var e = o.failure;
				_gthis.errorTrigger.handlers.invoke(e);
				break;
			}
		});
		if(!done) {
			sync = false;
		}
		if(!sync) {
			this.__coco_transitionCount.set(tink_state_State.get_value(this.__coco_transitionCount) + 1);
		}
		return ret;
	}
	,_updatePerformed: null
	,get_updatePerformed: function() {
		return this._updatePerformed;
	}
	,observables: null
	,transitionErrors: null
	,errorTrigger: null
	,__coco_transitionCount: null
	,get_isInTransition: function() {
		return tink_state_State.get_value(this.__coco_transitionCount) > 0;
	}
	,annex: null
	,toString: function() {
		return "BenchmarkData";
	}
	,__class__: data_BenchmarkData
};
var data_HaxeDate = {};
data_HaxeDate._new = function(v) {
	var this1 = v;
	return this1;
};
data_HaxeDate.toRepresentation = function(this1) {
	var this2 = HxOverrides.dateStr(this1);
	return this2;
};
data_HaxeDate.fromRepresentation = function(v) {
	var this1 = HxOverrides.strDate(tink_json_Representation.get(v));
	return this1;
};
var data_DataSeries = {};
data_DataSeries.slice = function(this1,start,end) {
	return { name : this1.name, dates : this1.dates.slice(start,end), values : this1.values.slice(start,end)};
};
data_DataSeries.time = function(list,target) {
	var dates = [];
	var values = [];
	var _g = new tink_pure_NodeIterator(list);
	while(_g.list.length > 0) {
		var entry = _g.next();
		var _g1 = new tink_pure_NodeIterator(entry.targets);
		while(_g1.list.length > 0) {
			var t = _g1.next();
			if(t.name == target) {
				var _g2 = t.time;
				if(_g2 != null) {
					var v = _g2;
					dates.push(entry.date);
					values.push(v);
				}
			}
		}
	}
	return { name : target, dates : dates, values : values};
};
data_DataSeries.compileTime = function(list,target) {
	var dates = [];
	var values = [];
	var _g = new tink_pure_NodeIterator(list);
	while(_g.list.length > 0) {
		var entry = _g.next();
		var _g1 = new tink_pure_NodeIterator(entry.targets);
		while(_g1.list.length > 0) {
			var t = _g1.next();
			if(t.name == target) {
				var _g2 = t.compileTime;
				if(_g2 != null) {
					var v = _g2;
					dates.push(entry.date);
					values.push(v);
				}
			}
		}
	}
	return { name : target, dates : dates, values : values};
};
var data_DataSet = {};
data_DataSet.merge = function(series) {
	var times = [];
	var map = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < series.length) {
		var s = series[_g];
		++_g;
		var _g1 = 0;
		var _g2 = s.dates;
		while(_g1 < _g2.length) {
			var date = _g2[_g1];
			++_g1;
			var time = date.getTime();
			if(times.indexOf(time) == -1) {
				times.push(time);
			}
		}
	}
	times.sort(Reflect.compare);
	var _g = 0;
	while(_g < series.length) {
		var s = series[_g];
		++_g;
		var values = [];
		var _g1 = [];
		var _g2 = 0;
		var _g3 = s.dates;
		while(_g2 < _g3.length) {
			var date = _g3[_g2];
			++_g2;
			_g1.push(date.getTime());
		}
		var s_times = _g1;
		var _g4 = 0;
		while(_g4 < times.length) {
			var time = times[_g4];
			++_g4;
			var _g5 = s_times.indexOf(time);
			if(_g5 == -1) {
				values.push(null);
			} else {
				var i = _g5;
				values.push(s.values[i]);
			}
		}
		map.h[s.name] = values;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < times.length) {
		var time = times[_g1];
		++_g1;
		_g.push(new Date(time));
	}
	return { dates : _g, series : map};
};
var data_HaxeVersion = {};
data_HaxeVersion.list = function() {
	return ["haxe3","haxe4","haxe-nightly"];
};
var data_Target = {};
data_Target.list = function() {
	return ["C++","C++ (GC Gen)","Cppia","NodeJS","NodeJS (ES6)","Java","JVM","HashLink","HashLink/C","HashLink Immix","HashLink/C Immix","C#","PHP","Python","Eval","Lua","Luajit","Neko"];
};
data_Target.color = function(this1) {
	switch(this1) {
	case "C#":
		return "#f032e6";
	case "C++":
		return "#e6194B";
	case "C++ (GC Gen)":
		return "#dcbeff";
	case "Cppia":
		return "#9A6324";
	case "Eval":
		return "#469990";
	case "HashLink":
		return "#911eb4";
	case "HashLink Immix":
		return "#fffac8";
	case "HashLink/C":
		return "#42d4f4";
	case "HashLink/C Immix":
		return "#808000";
	case "JVM":
		return "#f58231";
	case "Java":
		return "#4363d8";
	case "Lua":
		return "#800000";
	case "Luajit":
		return "#ffd8b1";
	case "Neko":
		return "#aaffc3";
	case "NodeJS":
		return "#3cb44b";
	case "NodeJS (ES6)":
		return "#ffe119";
	case "PHP":
		return "#bfef45";
	case "Python":
		return "#fabed4";
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_format_JsonPrinter = function(replacer,space) {
	this.replacer = replacer;
	this.indent = space;
	this.pretty = space != null;
	this.nind = 0;
	this.buf = new StringBuf();
};
haxe_format_JsonPrinter.__name__ = true;
haxe_format_JsonPrinter.print = function(o,replacer,space) {
	var printer = new haxe_format_JsonPrinter(replacer,space);
	printer.write("",o);
	return printer.buf.b;
};
haxe_format_JsonPrinter.prototype = {
	buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
	,write: function(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			var v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			var c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				var v1 = v;
				this.buf.b += String.fromCodePoint(91);
				var len = v1.length;
				var last = len - 1;
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						var v2 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
						this.buf.b += Std.string(v2);
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							var v3 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
							this.buf.b += Std.string(v3);
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				var v1 = v;
				var o = { };
				var k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					var k1 = k.next();
					o[k1] = v1.h[k1];
				}
				var v1 = o;
				this.fieldsString(v1,Reflect.fields(v1));
			} else if(c == Date) {
				var v1 = v;
				this.quote(HxOverrides.dateStr(v1));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			var _g1 = _g.e;
			var i = v._hx_index;
			this.buf.b += Std.string(i);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	,classString: function(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	,fieldsString: function(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		var len = fields.length;
		var last = len - 1;
		var first = true;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var f = fields[i];
			var value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				var v1 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
				this.buf.b += Std.string(v1);
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					var v2 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
					this.buf.b += Std.string(v2);
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	,quote: function(s) {
		this.buf.b += String.fromCodePoint(34);
		var i = 0;
		while(true) {
			var c = s.charCodeAt(i++);
			if(c != c) {
				break;
			}
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	,__class__: haxe_format_JsonPrinter
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,setHeader: function(name,value) {
		var _g = 0;
		var _g1 = this.headers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	,setPostData: function(data) {
		this.postData = data;
		this.postBytes = null;
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = true;
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	async: null
	,withCredentials: null
	,req: null
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined" && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postBytes;
		var _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				var bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			var str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var value = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = value + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,close: function() {
	}
	,__class__: haxe_io_Input
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var httpstatus_HttpStatusCode = {};
httpstatus_HttpStatusCode.toMessage = function(this1) {
	var this2 = httpstatus_HttpStatusMessage.fromCode(this1);
	return this2;
};
httpstatus_HttpStatusCode.toInt = function(this1) {
	return this1;
};
httpstatus_HttpStatusCode.fromErrorCode = function(code) {
	return code;
};
httpstatus_HttpStatusCode.toWebResponse = function(this1) {
	return httpstatus_HttpStatusCode.toOutgoingResponse(this1);
};
httpstatus_HttpStatusCode.toOutgoingResponse = function(this1) {
	var this2 = httpstatus_HttpStatusMessage.fromCode(this1);
	var this3 = new tink_http_ResponseHeaderBase(this1,this2,[new tink_http_HeaderField("content-length","0")],"HTTP/1.1");
	var this1 = new tink_http__$Response_OutgoingResponseData(this3,tink_io_Source.EMPTY);
	return this1;
};
httpstatus_HttpStatusCode.fromIncomingResponse = function(res) {
	return res.header.statusCode;
};
var httpstatus_HttpStatusMessage = {};
httpstatus_HttpStatusMessage._new = function(statusCode) {
	var this1 = httpstatus_HttpStatusMessage.fromCode(statusCode);
	return this1;
};
httpstatus_HttpStatusMessage.fromCode = function(statusCode) {
	switch(statusCode) {
	case 100:
		return "Continue";
	case 101:
		return "Switching Protocols";
	case 102:
		return "Processing";
	case 200:
		return "OK";
	case 201:
		return "Created";
	case 202:
		return "Accepted";
	case 203:
		return "Non-Authoritative Information";
	case 204:
		return "No Content";
	case 205:
		return "Reset Content";
	case 206:
		return "Partial Content";
	case 207:
		return "Multi-Status";
	case 208:
		return "Already Reported";
	case 226:
		return "IM Used";
	case 300:
		return "Multiple Choices";
	case 301:
		return "Moved Permanently";
	case 302:
		return "Found";
	case 303:
		return "See Other";
	case 304:
		return "Not Modified";
	case 305:
		return "Use Proxy";
	case 306:
		return "Switch Proxy";
	case 307:
		return "Temporary Redirect";
	case 308:
		return "Permanent Redirect";
	case 400:
		return "Bad Request";
	case 401:
		return "Unauthorized";
	case 402:
		return "Payment Required";
	case 403:
		return "Forbidden";
	case 404:
		return "Not Found";
	case 405:
		return "Method Not Allowed";
	case 406:
		return "Not Acceptable";
	case 407:
		return "Proxy Authentication Required";
	case 408:
		return "Request Timeout";
	case 409:
		return "Conflict";
	case 410:
		return "Gone";
	case 411:
		return "Length Required";
	case 412:
		return "Precondition Failed";
	case 413:
		return "Payload Too Large";
	case 414:
		return "URI Too Long";
	case 415:
		return "Unsupported Media Type";
	case 416:
		return "Range Not Satisfiable";
	case 417:
		return "Expectation Failed";
	case 418:
		return "I'm a teapot";
	case 421:
		return "Misdirected Request";
	case 422:
		return "Unprocessable Entity";
	case 423:
		return "Locked";
	case 424:
		return "Failed Dependency";
	case 426:
		return "Upgrade Required";
	case 428:
		return "Precondition Required";
	case 429:
		return "Too Many Requests";
	case 431:
		return "Request Header Fields Too Large";
	case 451:
		return "Unavailable For Legal Reasons";
	case 500:
		return "Internal Server Error";
	case 501:
		return "Not Implemented";
	case 502:
		return "Bad Gateway";
	case 503:
		return "Service Unavailable";
	case 504:
		return "Gateway Timeout";
	case 505:
		return "HTTP Version Not Supported";
	case 506:
		return "Variant Also Negotiates";
	case 507:
		return "Insufficient Storage";
	case 508:
		return "Loop Detected";
	case 510:
		return "Not Extended";
	case 511:
		return "Network Authentication Required";
	default:
		return "Unknown Status";
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var tink_Anon = function() { };
tink_Anon.__name__ = true;
tink_Anon.getExistentFields = function(o) {
	var ret = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		ret[f] = true;
	}
	return ret;
};
var tink_chunk_ChunkBase = function() { };
tink_chunk_ChunkBase.__name__ = true;
tink_chunk_ChunkBase.prototype = {
	flattened: null
	,getCursor: function() {
		if(this.flattened == null) {
			this.flatten(this.flattened = []);
		}
		return tink_chunk_ChunkCursor.create(this.flattened.slice());
	}
	,flatten: function(into) {
	}
	,__class__: tink_chunk_ChunkBase
};
var tink_chunk_ChunkObject = function() { };
tink_chunk_ChunkObject.__name__ = true;
tink_chunk_ChunkObject.__isInterface__ = true;
tink_chunk_ChunkObject.prototype = {
	getByte: null
	,getCursor: null
	,flatten: null
	,getLength: null
	,slice: null
	,toString: null
	,toBytes: null
	,blitTo: null
	,__class__: tink_chunk_ChunkObject
};
var tink__$Chunk_EmptyChunk = function() {
};
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_EmptyChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getByte: function(i) {
		return 0;
	}
	,getLength: function() {
		return 0;
	}
	,slice: function(from,to) {
		return this;
	}
	,blitTo: function(target,offset) {
	}
	,toString: function() {
		return "";
	}
	,toBytes: function() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
	,__class__: tink__$Chunk_EmptyChunk
});
var tink_Chunk = {};
tink_Chunk.get_length = function(this1) {
	return this1.getLength();
};
tink_Chunk.getByte = function(this1,i) {
	return this1.getByte(i);
};
tink_Chunk.concat = function(this1,that) {
	return tink_chunk_CompoundChunk.cons(this1,that);
};
tink_Chunk.cursor = function(this1) {
	return this1.getCursor();
};
tink_Chunk.iterator = function(this1) {
	return new tink_chunk_ChunkIterator(this1.getCursor());
};
tink_Chunk.slice = function(this1,from,to) {
	return this1.slice(from,to);
};
tink_Chunk.blitTo = function(this1,target,offset) {
	this1.blitTo(target,offset);
};
tink_Chunk.toHex = function(this1) {
	return this1.toBytes().toHex();
};
tink_Chunk.toString = function(this1) {
	return this1.toString();
};
tink_Chunk.toBytes = function(this1) {
	return this1.toBytes();
};
tink_Chunk.toBlob = function(this1) {
	return new Blob([this1.toBytes().b.bufferValue]);
};
tink_Chunk.join = function(chunks) {
	if(chunks == null) {
		return tink_Chunk.EMPTY;
	} else {
		switch(chunks.length) {
		case 0:
			return tink_Chunk.EMPTY;
		case 1:
			var v = chunks[0];
			return v;
		default:
			var v = chunks;
			var ret = tink_Chunk.concat(v[0],v[1]);
			var _g = 2;
			var _g1 = v.length;
			while(_g < _g1) {
				var i = _g++;
				ret = tink_Chunk.concat(ret,v[i]);
			}
			return ret;
		}
	}
};
tink_Chunk.ofBytes = function(b) {
	return tink_chunk_ByteChunk.of(b);
};
tink_Chunk.ofString = function(s) {
	return tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s));
};
tink_Chunk.ofHex = function(s) {
	var length = s.length >> 1;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		bytes.b[i] = Std.parseInt("0x" + HxOverrides.substr(s,i * 2,2));
	}
	return tink_chunk_ByteChunk.of(bytes);
};
tink_Chunk.catChunk = function(a,b) {
	return tink_Chunk.concat(a,b);
};
tink_Chunk.rcatString = function(a,b) {
	return tink_Chunk.concat(a,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(b)));
};
tink_Chunk.lcatString = function(a,b) {
	return tink_Chunk.concat(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(a)),b);
};
tink_Chunk.lcatBytes = function(a,b) {
	return tink_Chunk.concat(tink_chunk_ByteChunk.of(a),b);
};
tink_Chunk.rcatBytes = function(a,b) {
	return tink_Chunk.concat(a,tink_chunk_ByteChunk.of(b));
};
tink_Chunk.eqChunk = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.reqString = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.leqString = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.leqBytes = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.reqBytes = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.toRepresentation = function(this1) {
	var this2 = this1.toBytes();
	return this2;
};
tink_Chunk.ofRepresentation = function(rep) {
	return tink_chunk_ByteChunk.of(tink_json_Representation.get(rep));
};
var tink_Json = function() { };
tink_Json.__name__ = true;
var tink_Stringly = {};
tink_Stringly.isNumber = function(s,allowFloat) {
	if(s.length == 0) {
		return false;
	}
	var pos = 0;
	var max = s.length;
	if(pos < max && s.charCodeAt(pos) == 45) {
		++pos;
	}
	if(!allowFloat) {
		if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
			if(pos < max && s.charCodeAt(pos) == 120) {
				++pos;
			}
		}
	}
	while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
	if(allowFloat && pos < max) {
		if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
		if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
			if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
				if(pos < max && s.charCodeAt(pos) == 45) {
					++pos;
				}
			}
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
	}
	return pos == max;
};
tink_Stringly.toBool = function(this1) {
	if(this1 != null) {
		switch(StringTools.trim(this1).toLowerCase()) {
		case "0":case "false":case "no":
			return false;
		default:
			return true;
		}
	} else {
		return false;
	}
};
tink_Stringly.isFloat = function(this1) {
	return tink_Stringly.isNumber(StringTools.trim(this1),true);
};
tink_Stringly.parseFloat = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink_Stringly.isNumber(v,true)) {
		return tink_core_Outcome.Success(parseFloat(v));
	} else {
		var v = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v + " (encoded as " + this1 + ") is not a valid float",{ fileName : "tink/Stringly.hx", lineNumber : 64, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
	}
};
tink_Stringly.toFloat = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseFloat(this1));
};
tink_Stringly.isInt = function(this1) {
	return tink_Stringly.isNumber(StringTools.trim(this1),false);
};
tink_Stringly.parseInt = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink_Stringly.isNumber(v,false)) {
		return tink_core_Outcome.Success(Std.parseInt(v));
	} else {
		var v = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "tink/Stringly.hx", lineNumber : 79, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
	}
};
tink_Stringly.toInt = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseInt(this1));
};
tink_Stringly.parseDate = function(this1) {
	var _g = tink_Stringly.parseFloat(this1);
	switch(_g._hx_index) {
	case 0:
		var f = _g.data;
		return tink_core_Outcome.Success(new Date(f));
	case 1:
		var _g1 = _g.failure;
		if(!tink_Stringly.SUPPORTED_DATE_REGEX.match(this1)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 100, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		}
		var date = new Date(this1);
		var f = date.getTime();
		if(isNaN(f)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 103, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		} else {
			return tink_core_Outcome.Success(date);
		}
		break;
	}
};
tink_Stringly.toDate = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseDate(this1));
};
tink_Stringly.parse = function(this1,f) {
	var _g = f;
	var a1 = this1;
	return tink_core_TypedError.catchExceptions(function() {
		return _g(a1);
	},null,{ fileName : "tink/Stringly.hx", lineNumber : 163, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
};
tink_Stringly.ofBool = function(b) {
	if(b) {
		return "true";
	} else {
		return "false";
	}
};
tink_Stringly.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
tink_Stringly.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
tink_Stringly.ofDate = function(d) {
	var f = d.getTime();
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
var tink_Url = {};
tink_Url.get_host = function(this1) {
	return this1.hosts[0];
};
tink_Url.get_hosts = function(this1) {
	return this1.hosts;
};
tink_Url.get_pathWithQuery = function(this1) {
	if(this1.query == null) {
		return this1.path;
	} else {
		return (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query);
	}
};
tink_Url._new = function(parts) {
	var this1 = parts;
	return this1;
};
tink_Url.resolve = function(this1,that) {
	if(that.scheme != null) {
		return that;
	} else if(that.hosts[0] != null) {
		if(that.scheme != null) {
			return that;
		} else {
			var copy = Reflect.copy(that);
			copy.scheme = this1.scheme;
			return copy;
		}
	} else {
		var parts = { path : tink_url_Path.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, hosts : this1.hosts, hash : that.hash};
		tink_Url.makePayload(parts);
		var this1 = parts;
		return this1;
	}
};
tink_Url.makePayload = function(parts) {
	var payload = "";
	var _g = parts.scheme;
	var _g = parts.query;
	var _g = parts.payload;
	var _g = parts.path;
	var _g = parts.hosts;
	var _g1 = parts.hash;
	var _g1 = parts.auth;
	if(_g1 == null) {
		if(_g.length != 0) {
			var v = _g;
			payload += "//" + v.join(",");
		}
	} else if(_g.length == 0) {
		var auth = _g1;
		payload += "//" + (auth == null ? "null" : auth == null ? "" : "" + auth + "@");
	} else {
		var auth = _g1;
		var v = _g;
		payload += "//" + (auth == null ? "null" : auth == null ? "" : "" + auth + "@") + v.join(",");
	}
	payload += parts.path == null ? "null" : parts.path;
	var _g = parts.query;
	if(_g != null) {
		var v = _g;
		payload += "?" + (v == null ? "null" : v);
	}
	var _g = parts.hash;
	if(_g != null) {
		var v = _g;
		payload += "#" + v;
	}
	parts.payload = payload.toString();
};
tink_Url.toString = function(this1) {
	if(this1.scheme == null) {
		return this1.payload;
	} else {
		return "" + this1.scheme + ":" + this1.payload;
	}
};
tink_Url.fromString = function(s) {
	return tink_Url.parse(s);
};
tink_Url.noop = function(_) {
};
tink_Url.parse = function(s,onError) {
	if(s == null) {
		return tink_Url.parse("");
	}
	if(onError == null) {
		onError = tink_Url.noop;
	}
	s = StringTools.trim(s);
	if(StringTools.startsWith(s,"data:")) {
		var this1 = { scheme : "data", payload : HxOverrides.substr(s,5,null), hosts : []};
		return this1;
	}
	var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
	var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
	FORMAT.match(s);
	var hosts;
	var _g = FORMAT.matched(7);
	if(_g == null) {
		hosts = [];
	} else {
		var v = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = v.split(",");
		while(_g1 < _g2.length) {
			var host = _g2[_g1];
			++_g1;
			HOST.match(host);
			var host1;
			var _g3 = HOST.matched(2);
			var _g4 = HOST.matched(3);
			if(_g3 == null) {
				var ipv4 = _g4;
				host1 = ipv4;
			} else if(_g4 == null) {
				var ipv6 = _g3;
				host1 = "[" + ipv6 + "]";
			} else {
				onError("invalid host " + host);
				host1 = null;
			}
			var port;
			var _g5 = HOST.matched(5);
			if(_g5 == null) {
				port = null;
			} else {
				var v = _g5;
				var _g6 = Std.parseInt(v);
				if(_g6 == null) {
					onError("invalid port " + v);
					port = null;
				} else {
					var p = _g6;
					port = p;
				}
			}
			_g.push(tink_url_Host._new(host1,port));
		}
		hosts = _g;
	}
	var path = FORMAT.matched(8);
	if(hosts.length > 0 && path.charAt(0) != "/") {
		path = "/" + path;
	}
	var this1 = { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), hosts : hosts, auth : FORMAT.matched(6), path : tink_url_Path.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	return this1;
};
tink_Url.make = function(parts) {
	var parts1 = { payload : "", path : parts.path, query : parts.query, hosts : parts.hosts, auth : parts.auth, scheme : parts.scheme, hash : parts.hash};
	tink_Url.makePayload(parts1);
	var this1 = parts1;
	return this1;
};
tink_Url.fromRepresentation = function(v) {
	return tink_Url.parse(tink_json_Representation.get(v));
};
tink_Url.toRepresentation = function(this1) {
	var this2 = tink_Url.toString(this1);
	return this2;
};
var tink_SingleHostUrl = {};
tink_SingleHostUrl._new = function(v) {
	var this1 = v;
	return this1;
};
tink_SingleHostUrl.ofUrl = function(u) {
	var v;
	var _g = u.hosts;
	switch(_g.length) {
	case 0:
		v = u;
		break;
	case 1:
		var _g1 = _g[0];
		v = u;
		break;
	default:
		var v1 = _g;
		v = tink_Url.make({ path : u.path, query : u.query, hosts : [u.hosts[0]], auth : u.auth, scheme : u.scheme, hash : u.hash});
	}
	var this1 = v;
	return this1;
};
tink_SingleHostUrl.ofString = function(s) {
	return tink_SingleHostUrl.ofUrl(tink_Url.fromString(s));
};
var tink_chunk_ByteChunk = function(data,from,to) {
	this.data = data;
	this.from = from;
	this.to = to;
};
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.of = function(b) {
	if(b.length == 0) {
		return tink_Chunk.EMPTY;
	}
	var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
	ret.wrapped = b;
	return ret;
};
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_ByteChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	data: null
	,from: null
	,to: null
	,wrapped: null
	,get_wrapped: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped;
	}
	,getByte: function(index) {
		return this.data.bytes[this.from + index];
	}
	,flatten: function(into) {
		into.push(this);
	}
	,getLength: function() {
		return this.to - this.from;
	}
	,getSlice: function(from,to) {
		if(to > this.to - this.from) {
			to = this.to - this.from;
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return null;
		} else if(to == this.to - this.from && from == 0) {
			return this;
		} else {
			return new tink_chunk_ByteChunk(this.data,this.from + from,to + this.from);
		}
	}
	,slice: function(from,to) {
		var _g = this.getSlice(from,to);
		if(_g == null) {
			return tink_Chunk.EMPTY;
		} else {
			var v = _g;
			return v;
		}
	}
	,blitTo: function(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	,toBytes: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	,toString: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	,__class__: tink_chunk_ByteChunk
});
var tink_chunk_ChunkCursor = function() {
	this.currentByte = -1;
	this.currentPos = 0;
	this.length = 0;
	this.curLength = 0;
	this.curOffset = 0;
	this.curPartIndex = 0;
};
tink_chunk_ChunkCursor.__name__ = true;
tink_chunk_ChunkCursor.create = function(parts) {
	var ret = new tink_chunk_ChunkCursor();
	ret.parts = parts;
	ret.reset();
	return ret;
};
tink_chunk_ChunkCursor.prototype = {
	parts: null
	,curPart: null
	,curPartIndex: null
	,curOffset: null
	,curLength: null
	,length: null
	,currentPos: null
	,currentByte: null
	,clone: function() {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = this.parts.slice();
		ret.curPart = this.curPart;
		ret.curPartIndex = this.curPartIndex;
		ret.curOffset = this.curOffset;
		ret.curLength = this.curLength;
		ret.length = this.length;
		ret.currentPos = this.currentPos;
		ret.currentByte = this.currentByte;
		return ret;
	}
	,reset: function() {
		this.length = 0;
		this.currentPos = 0;
		this.currentByte = -1;
		this.curOffset = 0;
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.length += p.to - p.from;
		}
		this.curPart = this.parts[this.curPartIndex = 0];
		if(this.curPart != null) {
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this = this.curPart;
			this.currentByte = _this.data.bytes[_this.from];
		}
	}
	,flush: function() {
		var ret = this.left();
		this.shift();
		return ret;
	}
	,prune: function() {
		this.shift();
	}
	,add: function(chunk) {
		chunk.flatten(this.parts);
		this.reset();
	}
	,shift: function(chunk) {
		this.parts.splice(0,this.curPartIndex);
		var _g = this.parts[0];
		if(_g != null) {
			var chunk1 = _g;
			var _g = chunk1.getSlice(this.curOffset,this.curLength);
			if(_g == null) {
				this.parts.shift();
			} else {
				var rest = _g;
				this.parts[0] = rest;
			}
		}
		if(chunk != null) {
			this.add(chunk);
		} else {
			this.reset();
		}
	}
	,clear: function() {
		this.parts = [];
		this.reset();
	}
	,left: function() {
		if(this.curPart == null) {
			return tink_Chunk.EMPTY;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.curPartIndex;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var left = _g;
		left.push(this.curPart.slice(0,this.curOffset));
		return tink_Chunk.join(left);
	}
	,right: function() {
		if(this.curPart == null) {
			return tink_Chunk.EMPTY;
		}
		var _g = [];
		var _g1 = this.curPartIndex;
		var _g2 = this.parts.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var right = _g;
		if(right.length > 0) {
			right[0] = this.curPart.slice(this.curOffset,this.curLength);
		}
		return tink_Chunk.join(right);
	}
	,seek: function(seekable,options) {
		var _gthis = this;
		if(this.curPart == null || seekable == null || seekable.length == 0) {
			return haxe_ds_Option.None;
		}
		var max = seekable.length - 1;
		var first = seekable[0];
		var candidates = [];
		var count = 0;
		var copy = this.clone();
		copy.shift();
		var part = function(b,offset) {
			var data = b.data;
			var _g = b.from + offset;
			var _g1 = b.to;
			while(_g < _g1) {
				var i = _g++;
				var byte = data.bytes[i];
				if(candidates.length > 0) {
					var c = 0;
					while(c < count) {
						var pos = candidates[c];
						if(seekable[pos] == byte) {
							if(pos == max) {
								copy.moveTo(copy.currentPos + (i - (b.from + offset) - seekable.length + 1));
								var before = copy.left();
								var delta = before.getLength() + seekable.length;
								_gthis.moveTo(_gthis.currentPos + delta);
								if(options == null) {
									_gthis.shift();
								} else {
									var _g2 = options.withoutPruning;
									if(_g2 == null) {
										_gthis.shift();
									} else if(_g2 == false) {
										_gthis.shift();
									}
								}
								return haxe_ds_Option.Some(before);
							} else {
								candidates[c++] = pos + 1;
							}
						} else {
							count -= 1;
							var last = candidates.pop();
							if(count > c) {
								candidates[c] = last;
							}
						}
					}
				}
				if(byte == first) {
					count = candidates.push(1);
				}
			}
			copy.moveTo(copy.currentPos + (b.to - (b.from + offset)));
			return haxe_ds_Option.None;
		};
		var _g = part(this.curPart,this.curOffset);
		if(_g._hx_index == 1) {
			var _g1 = this.curPartIndex + 1;
			var _g2 = this.parts.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var _g3 = part(this.parts[i],0);
				switch(_g3._hx_index) {
				case 0:
					var v = _g3.v;
					return haxe_ds_Option.Some(v);
				case 1:
					break;
				}
			}
			return haxe_ds_Option.None;
		} else {
			var v = _g;
			return v;
		}
	}
	,sweep: function(len) {
		var data = this.right().slice(0,len);
		this.moveTo(this.currentPos + len);
		return data;
	}
	,sweepTo: function(pos) {
		return this.sweep(pos - this.currentPos);
	}
	,moveBy: function(delta) {
		return this.moveTo(this.currentPos + delta);
	}
	,moveTo: function(position) {
		if(this.length == 0) {
			return 0;
		}
		if(position > this.length) {
			position = this.length - 1;
		}
		if(position < 0) {
			position = 0;
		}
		this.currentPos = position;
		if(position == this.length) {
			this.ffwd();
		} else {
			var _g = 0;
			var _g1 = this.parts.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.parts[i];
				var _g2 = c.to - c.from;
				var enough = _g2;
				if(enough > position) {
					this.curPart = c;
					this.curPartIndex = i;
					this.curOffset = position;
					this.curLength = c.to - c.from;
					this.currentByte = c.data.bytes[c.from + position];
					break;
				} else {
					var v = _g2;
					position -= v;
				}
			}
		}
		return this.currentPos;
	}
	,ffwd: function() {
		this.currentByte = -1;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPart = null;
		this.curPartIndex = this.parts.length;
	}
	,next: function() {
		if(this.currentPos == this.length) {
			return false;
		}
		this.currentPos++;
		if(this.currentPos == this.length) {
			this.ffwd();
			return false;
		}
		if(this.curOffset == this.curLength - 1) {
			this.curOffset = 0;
			this.curPart = this.parts[++this.curPartIndex];
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this = this.curPart;
			this.currentByte = _this.data.bytes[_this.from];
		} else {
			var _this = this.curPart;
			this.currentByte = _this.data.bytes[_this.from + ++this.curOffset];
		}
		return true;
	}
	,__class__: tink_chunk_ChunkCursor
};
var tink_chunk_ChunkIterator = function(target) {
	this.target = target;
	this._hasNext = target.length > target.currentPos;
};
tink_chunk_ChunkIterator.__name__ = true;
tink_chunk_ChunkIterator.prototype = {
	target: null
	,_hasNext: null
	,hasNext: function() {
		return this._hasNext;
	}
	,next: function() {
		var ret = this.target.currentByte;
		this._hasNext = this.target.next();
		return ret;
	}
	,__class__: tink_chunk_ChunkIterator
};
var tink_chunk_CompoundChunk = function() {
};
tink_chunk_CompoundChunk.__name__ = true;
tink_chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_CompoundChunk.asCompound = function(c) {
	if(((c) instanceof tink_chunk_CompoundChunk)) {
		return c;
	} else {
		return null;
	}
};
tink_chunk_CompoundChunk.cons = function(a,b) {
	var _g = b.getLength();
	var _g1 = a.getLength();
	if(_g1 == 0) {
		if(_g == 0) {
			return tink_Chunk.EMPTY;
		} else {
			return b;
		}
	} else if(_g == 0) {
		return a;
	} else {
		var la = _g1;
		var lb = _g;
		var _g = tink_chunk_CompoundChunk.asCompound(b);
		var _g1 = tink_chunk_CompoundChunk.asCompound(a);
		if(_g1 == null) {
			if(_g == null) {
				return tink_chunk_CompoundChunk.create([a,b],2);
			} else {
				var v = _g;
				if(v.depth < 100) {
					return tink_chunk_CompoundChunk.create([a,b],v.depth + 1);
				} else {
					var flat = [];
					v.flatten(flat);
					b.flatten(flat);
					return tink_chunk_CompoundChunk.create(flat,2);
				}
			}
		} else if(_g == null) {
			var v = _g1;
			if(v.depth < 100) {
				return tink_chunk_CompoundChunk.create([a,b],v.depth + 1);
			} else {
				var flat = [];
				v.flatten(flat);
				b.flatten(flat);
				return tink_chunk_CompoundChunk.create(flat,2);
			}
		} else {
			var a = _g1;
			var b = _g;
			var depth = a.depth > b.depth ? a.depth : b.depth;
			return tink_chunk_CompoundChunk.create(a.chunks.concat(b.chunks),depth);
		}
	}
};
tink_chunk_CompoundChunk.create = function(chunks,depth) {
	var ret = new tink_chunk_CompoundChunk();
	var offsets = [0];
	var length = 0;
	var _g = 0;
	while(_g < chunks.length) {
		var c = chunks[_g];
		++_g;
		offsets.push(length += c.getLength());
	}
	ret.chunks = chunks;
	ret.offsets = offsets;
	ret.length = length;
	ret.depth = depth;
	return ret;
};
tink_chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_CompoundChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	chunks: null
	,offsets: null
	,length: null
	,depth: null
	,getByte: function(i) {
		var index = this.findChunk(i);
		return this.chunks[index].getByte(i - this.offsets[index]);
	}
	,getLength: function() {
		return this.length;
	}
	,findChunk: function(target) {
		var min = 0;
		var max = this.offsets.length - 1;
		while(min + 1 < max) {
			var guess = min + max >> 1;
			if(this.offsets[guess] > target) {
				max = guess;
			} else {
				min = guess;
			}
		}
		return min;
	}
	,flatten: function(into) {
		var _g = 0;
		var _g1 = this.chunks;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.flatten(into);
		}
	}
	,slice: function(from,to) {
		var idxFrom = this.findChunk(from);
		var idxTo = this.findChunk(to);
		if(idxFrom == idxTo) {
			var offset = this.offsets[idxFrom];
			return this.chunks[idxFrom].slice(from - offset,to - offset);
		}
		var ret = this.chunks.slice(idxFrom,idxTo + 1);
		var c = ret[0];
		ret[0] = c.slice(from - this.offsets[idxFrom],this.offsets[idxFrom + 1]);
		var c = ret[ret.length - 1];
		ret[ret.length - 1] = c.slice(0,to - this.offsets[idxTo]);
		return tink_chunk_CompoundChunk.create(ret,this.depth);
	}
	,blitTo: function(target,offset) {
		var _g = 0;
		var _g1 = this.chunks.length;
		while(_g < _g1) {
			var i = _g++;
			this.chunks[i].blitTo(target,offset + this.offsets[i]);
		}
	}
	,toString: function() {
		return this.toBytes().toString();
	}
	,toBytes: function() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
	,__class__: tink_chunk_CompoundChunk
});
var tink_chunk_Seekable = {};
tink_chunk_Seekable._new = function(a) {
	var this1 = a;
	return this1;
};
tink_chunk_Seekable.get_length = function(this1) {
	return this1.length;
};
tink_chunk_Seekable.get = function(this1,index) {
	return this1[index];
};
tink_chunk_Seekable.ofChunk = function(c) {
	return tink_chunk_Seekable.ofBytes(c.toBytes());
};
tink_chunk_Seekable.ofBytes = function(b) {
	var _g = [];
	var _g1 = 0;
	var _g2 = b.length;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(b.b[i]);
	}
	var this1 = _g;
	return this1;
};
tink_chunk_Seekable.ofString = function(s) {
	return tink_chunk_Seekable.ofBytes(haxe_io_Bytes.ofString(s));
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = true;
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			tink_core_Callback.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,map: null
	,flatMap: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	value: null
	,map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f(_gthis.value.get()).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(f);
	return this1;
};
tink_core_Future.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this1 = l1;
		ret1.handle(function(_) {
			this1.cancel();
		});
	}
	if(l2 != null) {
		var this2 = l2;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	return ret1;
};
tink_core_Future.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core_Future.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(t) {
		var gather = false;
		if(gather == null) {
			gather = true;
		}
		var ret = other.map(function(a) {
			return merger(t,a);
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var gather1 = false;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret1 = ret.flatMap((function(f) {
			return function(results) {
				var gather = false;
				if(gather == null) {
					gather = true;
				}
				var ret = f[0].map((function() {
					return function(result) {
						return results.concat([result]);
					};
				})());
				if(gather) {
					return ret.gather();
				} else {
					return ret;
				}
			};
		})(f));
		ret = gather1 ? ret1.gather() : ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.fromMany = function(futures) {
	return tink_core_Future.ofMany(futures);
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
};
tink_core_Future.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = a.map(haxe_ds_Either.Left);
	var tmp = gather ? ret.gather() : ret;
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = b.map(haxe_ds_Either.Right);
	return tink_core_Future.first(tmp,gather ? ret.gather() : ret);
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var ret = map(d).map(tink_core_Outcome.Success);
			return ret.gather();
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
	return ret.gather();
};
tink_core_Future._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core_Future._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core_Future._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	return tink_core_Future.async(function(cb) {
		haxe_Timer.delay(function() {
			cb(value.get());
		},ms);
	});
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = true;
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	callbacks: null
	,result: null
	,suspended: null
	,link: null
	,wakeup: null
	,trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	,handle: function(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				$yield(f(res));
			});
		});
	}
	,flatMap: function(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.get = function(this1) {
	return this1.get();
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return this1.map(f);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,result: null
	,get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get());
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get()).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = true;
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = true;
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		var value = option.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_Progress = {};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	var value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	var signal = tink_core_Signal.trigger();
	var future = tink_core_Future.async(function(cb) {
		var progress = function(v,total) {
			switch(value._hx_index) {
			case 0:
				var current = value.v;
				if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
					var this1 = new tink_core_MPair(v,total);
					var pv = this1;
					value = tink_core_ProgressType.InProgress(pv);
					signal.handlers.invoke(pv);
				}
				break;
			case 1:
				var _g = value.v;
				break;
			}
		};
		var finish = function(v) {
			if(value._hx_index == 1) {
				var _g = value.v;
			} else {
				value = tink_core_ProgressType.Finished(v);
				cb(v);
			}
		};
		f(progress,finish);
	});
	return new tink_core_CompositeProgress(future,signal);
};
tink_core_Progress.asFuture = function(this1) {
	return this1;
};
tink_core_Progress.asPromise = function(p) {
	return p;
};
tink_core_Progress.promise = function(v) {
	return new tink_core_PromiseProgress(v);
};
tink_core_Progress.future = function(v) {
	return new tink_core_FutureProgress(v);
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.next(this1,f);
};
var tink_core_ProgressObject = function() { };
tink_core_ProgressObject.__name__ = true;
tink_core_ProgressObject.__isInterface__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
var tink_core_CompositeProgress = function(future,signal) {
	this.future = future;
	this.signal = signal;
};
tink_core_CompositeProgress.__name__ = true;
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
tink_core_CompositeProgress.prototype = {
	future: null
	,signal: null
	,map: function(f) {
		var ret = this.future.map(f);
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.future.flatMap(f);
		return ret.gather();
	}
	,handle: function(callback) {
		return this.future.handle(callback);
	}
	,listen: function(callback) {
		return this.signal.listen(callback);
	}
	,gather: function() {
		return this.future.gather();
	}
	,eager: function() {
		return this.future.eager();
	}
	,__class__: tink_core_CompositeProgress
};
var tink_core_ProgressTrigger = function() {
	this.value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	tink_core_CompositeProgress.call(this,this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core_Signal.trigger());
};
tink_core_ProgressTrigger.__name__ = true;
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
tink_core_ProgressTrigger.prototype = $extend(tink_core_CompositeProgress.prototype,{
	futureTrigger: null
	,signalTrigger: null
	,value: null
	,progress: function(v,total) {
		var _g = this.value;
		switch(_g._hx_index) {
		case 0:
			var current = _g.v;
			if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
				var this1 = new tink_core_MPair(v,total);
				var pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			var _g1 = _g.v;
			break;
		}
	}
	,finish: function(v) {
		var _g = this.value;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
		} else {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	,asProgress: function() {
		return this;
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_FutureProgress = function(future) {
	var ret = future.flatMap(function(progress) {
		return progress;
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		future.handle(function(progress) {
			progress.listen(cb);
		});
	}));
};
tink_core_FutureProgress.__name__ = true;
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
tink_core_FutureProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_FutureProgress
});
var tink_core_PromiseProgress = function(promise) {
	var ret = promise.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var progress = o.data;
			return progress.map(tink_core_Outcome.Success);
		case 1:
			var e = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		promise.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var progress = o.data;
				progress.listen(cb);
				break;
			case 1:
				var e = o.failure;
				break;
			}
		});
	}));
};
tink_core_PromiseProgress.__name__ = true;
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
tink_core_PromiseProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_PromiseProgress
});
var tink_core_ProgressValue = {};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : true, __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = true;
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t1 = a.v;
			var t2 = b.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var this1 = tink_core_Future.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
	return this1;
};
tink_core_Promise.eager = function(this1) {
	return this1.eager();
};
tink_core_Promise.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core_Promise.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core_Promise.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core_Promise.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core_Promise.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Future._tryMap(this1,function(_) {
		return v;
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core_Promise.next(this1,function(t) {
		return tink_core_Promise.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback,lazy) {
	return tink_core_Future.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						cb(tink_core_Outcome.Failure(e));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return HxOverrides.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		var ret = gen().flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(new tink_core__$Promise_TinkError(e));
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	return tink_core_Future.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core_Promise.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core_Future.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = a;
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter_current < iter_array.length && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index = i - 1;
				iter_current += 1;
				linkArray.push(iter_array[iter_current - 1].handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						set(index,v);
						break;
					case 1:
						var e = o.failure;
						fail(e);
						break;
					}
				}));
			};
			while(true) {
				var tmp;
				if(iter_current < iter_array.length && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core_CallbackLink.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core_Promise.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core_Promise.next(a[index],function(head) {
				return tink_core_Promise.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
		return ret1.gather();
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core__$Promise_TinkError = function(e) {
	Error.call(this,e.message);
	this.data = e;
};
tink_core__$Promise_TinkError.__name__ = true;
tink_core__$Promise_TinkError.__super__ = Error;
tink_core__$Promise_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Promise_TinkError
});
var tink_core_Ref = {};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	trigger: null
	,activate: null
	,suspend: null
	,check: null
	,killed: null
	,kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,listen: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_domspec_ClassName = {};
tink_domspec_ClassName._new = function(s) {
	var this1 = s;
	return this1;
};
tink_domspec_ClassName.add = function(this1,that) {
	var this2;
	var _g = that;
	if(this1 == null) {
		var v = _g;
		this2 = v;
	} else if(_g == null) {
		var v = this1;
		this2 = v;
	} else {
		var a = this1;
		var b = _g;
		this2 = "" + a + " " + b;
	}
	return this2;
};
tink_domspec_ClassName.when = function(this1,cond) {
	var this2 = cond ? this1 : "";
	return this2;
};
tink_domspec_ClassName.ofMap = function(parts) {
	var _g = [];
	var c = haxe_ds_StringMap.keysIterator(parts.h);
	while(c.hasNext()) {
		var c1 = c.next();
		if(parts.h[c1]) {
			_g.push(tink_domspec_ClassName.ofString(c1));
		}
	}
	var this1 = tink_domspec_ClassName.ofArray(_g);
	return this1;
};
tink_domspec_ClassName.ofArray = function(parts) {
	var f = tink_domspec_ClassName.ofString;
	var result = new Array(parts.length);
	var _g = 0;
	var _g1 = parts.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(parts[i]);
	}
	var this1 = result.join(" ");
	return this1;
};
tink_domspec_ClassName.ofString = function(s) {
	if(s == null) {
		return null;
	} else {
		var this1 = StringTools.trim(s);
		return this1;
	}
};
tink_domspec_ClassName.ofDynamicAccess = function(parts) {
	var _g = [];
	var _g1 = 0;
	var _g2 = Reflect.fields(parts);
	while(_g1 < _g2.length) {
		var c = _g2[_g1];
		++_g1;
		if(parts[c]) {
			_g.push(tink_domspec_ClassName.ofString(c));
		}
	}
	var this1 = tink_domspec_ClassName.ofArray(_g);
	return this1;
};
var tink_domspec_EventFrom = {};
tink_domspec_EventFrom.get_currentTarget = function(this1) {
	return this1.currentTarget;
};
tink_domspec_EventFrom.get_target = function(this1) {
	return this1.target;
};
tink_domspec_EventFrom.get_src = function(this1) {
	return this1.currentTarget;
};
var tink_domspec_Macro = function() { };
tink_domspec_Macro.__name__ = true;
var tink_domspec_CSSParser = function() { };
tink_domspec_CSSParser.__name__ = true;
tink_domspec_CSSParser.parseString = function(s) {
	if(tink_domspec_CSSParser.style == null) {
		tink_domspec_CSSParser.style = window.document.createElement("div").style;
	}
	tink_domspec_CSSParser.style.cssText = s;
	var ret = { };
	var ret1 = ret;
	var _g = 0;
	var _g1 = tink_domspec_CSSParser.style;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		ret1[name] = tink_domspec_CSSParser.style.getPropertyValue(name);
	}
	return ret;
};
var tink_http_Chunked = function() { };
tink_http_Chunked.__name__ = true;
tink_http_Chunked.encoder = function() {
	if(tink_http_Chunked._encoder == null) {
		tink_http_Chunked._encoder = new tink_http_ChunkedEncoder();
	}
	return tink_http_Chunked._encoder;
};
tink_http_Chunked.decoder = function() {
	if(tink_http_Chunked._decoder == null) {
		tink_http_Chunked._decoder = new tink_http_ChunkedDecoder();
	}
	return tink_http_Chunked._decoder;
};
tink_http_Chunked.encode = function(source) {
	return tink_http_Chunked.encoder().transform(source);
};
tink_http_Chunked.decode = function(source) {
	return tink_http_Chunked.decoder().transform(source);
};
var tink_io_Transformer = function() { };
tink_io_Transformer.__name__ = true;
tink_io_Transformer.__isInterface__ = true;
tink_io_Transformer.prototype = {
	transform: null
	,__class__: tink_io_Transformer
};
var tink_http_ChunkedEncoder = function() {
};
tink_http_ChunkedEncoder.__name__ = true;
tink_http_ChunkedEncoder.__interfaces__ = [tink_io_Transformer];
tink_http_ChunkedEncoder.prototype = {
	transform: function(source) {
		return tink_io_Source.chunked(source).map(tink_streams_Mapping.ofPlain(function(chunk) {
			return tink_Chunk.concat(tink_Chunk.concat(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("" + StringTools.hex(chunk.getLength()) + "\r\n")),chunk),tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("\r\n")));
		})).append(tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("0\r\n"))])));
	}
	,__class__: tink_http_ChunkedEncoder
};
var tink_http_ChunkedDecoder = function() {
};
tink_http_ChunkedDecoder.__name__ = true;
tink_http_ChunkedDecoder.__interfaces__ = [tink_io_Transformer];
tink_http_ChunkedDecoder.prototype = {
	transform: function(source) {
		return tink_io_RealSourceTools.parseStream(source,new tink_http_ChunkedParser()).map(tink_streams_Mapping.ofPlain(function(v) {
			if(v == null) {
				return tink_Chunk.EMPTY;
			} else {
				return v;
			}
		}));
	}
	,__class__: tink_http_ChunkedDecoder
};
var tink_io_StreamParserObject = function() { };
tink_io_StreamParserObject.__name__ = true;
tink_io_StreamParserObject.__isInterface__ = true;
tink_io_StreamParserObject.prototype = {
	progress: null
	,eof: null
	,__class__: tink_io_StreamParserObject
};
var tink_http_ChunkedParser = function() {
	this.reset();
};
tink_http_ChunkedParser.__name__ = true;
tink_http_ChunkedParser.__interfaces__ = [tink_io_StreamParserObject];
tink_http_ChunkedParser.prototype = {
	chunkSize: null
	,reset: function() {
		this.chunkSize = -1;
	}
	,progress: function(cursor) {
		if(this.chunkSize < 0) {
			var _g = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				this.chunkSize = Std.parseInt("0x" + (v == null ? "null" : v.toString()));
				break;
			case 1:
				break;
			}
			return tink_io_ParseStep.Progressed;
		} else if(this.chunkSize == 0) {
			return tink_io_ParseStep.Progressed;
		} else if(cursor.length >= this.chunkSize + 2) {
			var _g = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				this.reset();
				return tink_io_ParseStep.Done(v);
			case 1:
				return tink_io_ParseStep.Failed(new tink_core_TypedError(null,"Invalid encoding",{ fileName : "tink/http/Chunked.hx", lineNumber : 82, className : "tink.http.ChunkedParser", methodName : "progress"}));
			}
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	,eof: function(rest) {
		if(this.chunkSize == 0) {
			return tink_core_Outcome.Success(tink_Chunk.EMPTY);
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Unexpected end of input",{ fileName : "tink/http/Chunked.hx", lineNumber : 89, className : "tink.http.ChunkedParser", methodName : "eof"}));
		}
	}
	,__class__: tink_http_ChunkedParser
};
var tink_http_Client = {};
tink_http_Client.fetch = function(url,options) {
	return tink_http_Fetch.fetch(url,options);
};
tink_http_Client.augment = function(this1,pipeline) {
	return tink_http__$Client_CustomClient.create(this1,pipeline.before,pipeline.after);
};
var tink_http_ClientObject = function() { };
tink_http_ClientObject.__name__ = true;
tink_http_ClientObject.__isInterface__ = true;
tink_http_ClientObject.prototype = {
	request: null
	,__class__: tink_http_ClientObject
};
var tink_http__$Client_CustomClient = function(preprocessors,postprocessors,real) {
	this.preprocessors = preprocessors;
	this.postprocessors = postprocessors;
	this.real = real;
};
tink_http__$Client_CustomClient.__name__ = true;
tink_http__$Client_CustomClient.__interfaces__ = [tink_http_ClientObject];
tink_http__$Client_CustomClient.concat = function(a,b) {
	if(a == null) {
		var v = b;
		return v;
	} else if(b == null) {
		var v = a;
		return v;
	} else {
		return a.concat(b);
	}
};
tink_http__$Client_CustomClient.create = function(c,preprocessors,postprocessors) {
	var _g = ((c) instanceof tink_http__$Client_CustomClient) ? c : null;
	if(_g == null) {
		return new tink_http__$Client_CustomClient(preprocessors,postprocessors,c);
	} else {
		var v = _g;
		return new tink_http__$Client_CustomClient(tink_http__$Client_CustomClient.concat(preprocessors,v.preprocessors),tink_http__$Client_CustomClient.concat(v.postprocessors,postprocessors),v.real);
	}
};
tink_http__$Client_CustomClient.prototype = {
	preprocessors: null
	,postprocessors: null
	,real: null
	,pipe: function(value,transforms,index) {
		if(index == null) {
			index = 0;
		}
		if(transforms != null && index < transforms.length) {
			var _g = $bind(this,this.pipe);
			var transforms1 = transforms;
			var index1 = index + 1;
			var tmp = function(value) {
				return _g(value,transforms1,index1);
			};
			return tink_core_Promise.next(transforms[index](value),tmp);
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(value)));
		}
	}
	,request: function(req) {
		var _gthis = this;
		return tink_core_Promise.next(this.pipe(req,this.preprocessors),function(req) {
			var tmp = _gthis.real.request(req);
			var _g = $bind(_gthis,_gthis.pipe);
			var transforms;
			if(_gthis.postprocessors == null) {
				transforms = null;
			} else {
				var _g1 = [];
				var _g2 = 0;
				var _g3 = _gthis.postprocessors;
				while(_g2 < _g3.length) {
					var p = _g3[_g2];
					++_g2;
					_g1.push(p(req));
				}
				transforms = _g1;
			}
			return tink_core_Promise.next(tmp,function(value) {
				return _g(value,transforms);
			});
		});
	}
	,__class__: tink_http__$Client_CustomClient
};
var tink_http_Container = function() { };
tink_http_Container.__name__ = true;
tink_http_Container.__isInterface__ = true;
tink_http_Container.prototype = {
	run: null
	,__class__: tink_http_Container
};
var tink_http_ContainerResult = $hxEnums["tink.http.ContainerResult"] = { __ename__ : true, __constructs__ : ["Running","Failed","Shutdown"]
	,Running: ($_=function(running) { return {_hx_index:0,running:running,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["running"],$_)
	,Failed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Shutdown: {_hx_index:2,__enum__:"tink.http.ContainerResult",toString:$estr}
};
var tink_http_Fetch = function() { };
tink_http_Fetch.__name__ = true;
tink_http_Fetch.fetch = function(url,options) {
	return tink_core_Future.async(function(cb) {
		var uri = url.path;
		if(url.query != null) {
			uri += "?" + (url.query == null ? "null" : url.query);
		}
		var method = "GET";
		var headers = null;
		var body = tink_io_Source.EMPTY;
		var type = tink_http_ClientType.Default;
		var followRedirect = true;
		if(options != null) {
			if(options.method != null) {
				method = options.method;
			}
			if(options.headers != null) {
				headers = options.headers;
			}
			if(options.body != null) {
				body = options.body;
			}
			if(options.client != null) {
				type = options.client;
			}
			if(options.followRedirect == false) {
				followRedirect = false;
			}
		}
		var client = tink_http_Fetch.getClient(type,url.scheme == "https");
		if(options != null && options.augment != null) {
			var pipeline = options.augment;
			client = tink_http__$Client_CustomClient.create(client,pipeline.before,pipeline.after);
		}
		client.request(new tink_http_OutgoingRequest(new tink_http_OutgoingRequestHeader(method,url,null,headers),body)).handle(function(res) {
			switch(res._hx_index) {
			case 0:
				var res1 = res.data;
				var _g = res1.header.statusCode;
				switch(_g) {
				case 301:case 302:case 303:case 307:case 308:
					var code = _g;
					if(followRedirect) {
						var this1 = "location".toLowerCase();
						tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(res1.header.byName(this1))),function(location) {
							var this1 = tink_Url.resolve(url,tink_Url.fromString(location));
							var this2;
							if(code == 303) {
								var __o0 = options;
								var __tink_tmp39 = { method : "GET"};
								var _g = __o0.headers;
								if(_g != null) {
									var v = _g;
									__tink_tmp39.headers = v;
								}
								var _g = __o0.followRedirect;
								if(_g != null) {
									var v = _g;
									__tink_tmp39.followRedirect = v;
								}
								var _g = __o0.client;
								if(_g != null) {
									var v = _g;
									__tink_tmp39.client = v;
								}
								var _g = __o0.body;
								if(_g != null) {
									var v = _g;
									__tink_tmp39.body = v;
								}
								var _g = __o0.augment;
								if(_g != null) {
									var v = _g;
									__tink_tmp39.augment = v;
								}
								this2 = __tink_tmp39;
							} else {
								this2 = options;
							}
							return tink_http_Fetch.fetch(this1,this2);
						}).handle(cb);
					} else {
						cb(tink_core_Outcome.Success(res1));
					}
					break;
				default:
					cb(tink_core_Outcome.Success(res1));
				}
				break;
			case 1:
				var e = res.failure;
				cb(tink_core_Outcome.Failure(e));
				break;
			}
		});
	});
};
tink_http_Fetch.getClient = function(type,secure) {
	var cache = secure ? tink_http_Fetch.sclient : tink_http_Fetch.client;
	if(!cache.exists(type)) {
		var c;
		switch(type._hx_index) {
		case 0:
			c = secure ? new tink_http_clients_SecureJsClient() : new tink_http_clients_JsClient();
			break;
		case 1:
			var c1 = type.container;
			c = new tink_http_clients_LocalContainerClient(c1);
			break;
		case 2:
			c = secure ? new tink_http_clients_StdClient() : new tink_http_clients_StdClient();
			break;
		case 3:
			var c1 = type.v;
			c = c1;
			break;
		}
		cache.set(type,c);
	}
	return cache.get(type);
};
var tink_http_ClientType = $hxEnums["tink.http.ClientType"] = { __ename__ : true, __constructs__ : ["Default","Local","StdLib","Custom"]
	,Default: {_hx_index:0,__enum__:"tink.http.ClientType",toString:$estr}
	,Local: ($_=function(container) { return {_hx_index:1,container:container,__enum__:"tink.http.ClientType",toString:$estr}; },$_.__params__ = ["container"],$_)
	,StdLib: {_hx_index:2,__enum__:"tink.http.ClientType",toString:$estr}
	,Custom: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"tink.http.ClientType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var tink_http_FetchResponse = {};
tink_http_FetchResponse.all = function(this1) {
	return tink_core_Promise.next(this1,function(r) {
		return tink_core_Promise.next(tink_io_RealSourceTools.all(r.body),function(chunk) {
			if(r.header.statusCode >= 400) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(r.header.statusCode,r.header.reason,chunk.toString(),{ fileName : "tink/http/Fetch.hx", lineNumber : 138, className : "tink.http._Fetch.FetchResponse_Impl_", methodName : "all"}))));
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_Message(r.header,chunk))));
			}
		});
	});
};
tink_http_FetchResponse.progress = function(this1) {
	return tink_core_Promise.next(this1,function(r) {
		if(r.header.statusCode >= 400) {
			return tink_core_Promise.next(tink_io_RealSourceTools.all(r.body),function(chunk) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(r.header.statusCode,r.header.reason,chunk.toString(),{ fileName : "tink/http/Fetch.hx", lineNumber : 150, className : "tink.http._Fetch.FetchResponse_Impl_", methodName : "progress"}))));
			});
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_Message(r.header,tink_state_Progress.make(function(progress,finish) {
				var total;
				var _g = r.header.getContentLength();
				switch(_g._hx_index) {
				case 0:
					var len = _g.data;
					total = haxe_ds_Option.Some(len);
					break;
				case 1:
					var _g1 = _g.failure;
					total = haxe_ds_Option.None;
					break;
				}
				var chunk = tink_Chunk.EMPTY;
				progress(chunk.getLength(),total);
				tink_io_Source.chunked(r.body).forEach(tink_streams_Handler.ofSafe(function(part) {
					chunk = tink_Chunk.concat(chunk,part);
					progress(chunk.getLength(),total);
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
				})).handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var _g = o.rest;
						finish(tink_core_Outcome.Failure(new tink_core_TypedError(null,"unreachable",{ fileName : "tink/http/Fetch.hx", lineNumber : 170, className : "tink.http._Fetch.FetchResponse_Impl_", methodName : "progress"})));
						break;
					case 2:
						var e = o.error;
						finish(tink_core_Outcome.Failure(e));
						break;
					case 3:
						finish(tink_core_Outcome.Success(chunk));
						break;
					}
				});
			})))));
		}
	});
};
var tink_http_Handler = {};
tink_http_Handler.ofFunc = function(f) {
	return new tink_http_SimpleHandler(f);
};
var tink_http_HandlerObject = function() { };
tink_http_HandlerObject.__name__ = true;
tink_http_HandlerObject.__isInterface__ = true;
tink_http_HandlerObject.prototype = {
	process: null
	,__class__: tink_http_HandlerObject
};
var tink_http_SimpleHandler = function(f) {
	this.f = f;
};
tink_http_SimpleHandler.__name__ = true;
tink_http_SimpleHandler.__interfaces__ = [tink_http_HandlerObject];
tink_http_SimpleHandler.prototype = {
	f: null
	,process: function(req) {
		return this.f(req);
	}
	,__class__: tink_http_SimpleHandler
};
var tink_http_ReadonlyMap = {};
tink_http_ReadonlyMap.get = function(this1,key) {
	return this1.get(key);
};
tink_http_ReadonlyMap.exists = function(this1,key) {
	return this1.exists(key);
};
tink_http_ReadonlyMap.iterator = function(this1) {
	return this1.iterator();
};
tink_http_ReadonlyMap.keys = function(this1) {
	return this1.keys();
};
var tink_http_ContentType = function() {
	this.subtype = "*";
	this.type = "*";
	this.extensions = new haxe_ds_StringMap();
};
tink_http_ContentType.__name__ = true;
tink_http_ContentType.ofString = function(s) {
	var ret = new tink_http_ContentType();
	ret.raw = s;
	var parsed = tink_http_HeaderValue.parse(s);
	var value = parsed[0].value;
	var _g = value.indexOf("/");
	if(_g == -1) {
		ret.type = value;
	} else {
		var pos = _g;
		ret.type = value.substring(0,pos);
		ret.subtype = value.substring(pos + 1);
	}
	ret.extensions = parsed[0].extensions;
	return ret;
};
tink_http_ContentType.prototype = {
	get_fullType: function() {
		return "" + this.type + "/" + this.subtype;
	}
	,type: null
	,subtype: null
	,extensions: null
	,raw: null
	,toString: function() {
		return this.raw;
	}
	,__class__: tink_http_ContentType
};
var tink_http_Header = function(fields) {
	var tmp;
	if(fields == null) {
		tmp = [];
	} else {
		var v = fields;
		tmp = v;
	}
	this.fields = tmp;
};
tink_http_Header.__name__ = true;
tink_http_Header.prototype = {
	fields: null
	,get: function(name) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(f.name == name) {
				_g.push(f.value);
			}
		}
		return _g;
	}
	,byName: function(name) {
		var _g = this.get(name);
		switch(_g.length) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"No " + name + " header found",{ fileName : "tink/http/Header.hx", lineNumber : 91, className : "tink.http.Header", methodName : "byName"}));
		case 1:
			var v = _g[0];
			return tink_core_Outcome.Success(v);
		default:
			var v = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Multiple entries for " + name + " header",{ fileName : "tink/http/Header.hx", lineNumber : 95, className : "tink.http.Header", methodName : "byName"}));
		}
	}
	,contentType: function() {
		return tink_core_OutcomeTools.map(this.byName("content-type"),tink_http_ContentType.ofString);
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.fields);
	}
	,concat: function(fields) {
		return new tink_http_Header(this.fields.concat(fields));
	}
	,getContentLength: function() {
		var _g = this.byName("content-length");
		switch(_g._hx_index) {
		case 0:
			var _hx_tmp = Std.parseInt(_g.data);
			if(_hx_tmp == null) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Content-Length Header",{ fileName : "tink/http/Header.hx", lineNumber : 120, className : "tink.http.Header", methodName : "getContentLength"}));
			} else {
				var v = _hx_tmp;
				return tink_core_Outcome.Success(v);
			}
			break;
		case 1:
			var e = _g.failure;
			return tink_core_Outcome.Failure(e);
		}
	}
	,accepts: function(type) {
		var prefix = type.split("/")[0];
		return tink_core_OutcomeTools.map(this.byName("accept"),function(v) {
			var _g = 0;
			var _g1 = tink_http_HeaderValue.parse(v);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				if(entry.value == "*/*" || entry.value == type) {
					return true;
				}
				var _g2 = entry.value.split("/");
				if(_g2.length == 2) {
					if(_g2[1] == "*") {
						var p = _g2[0];
						if(prefix == p) {
							return true;
						}
					}
				}
			}
			return false;
		});
	}
	,get_LINEBREAK: function() {
		return "\r\n";
	}
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(f.toString());
		}
		return _g.join("\r\n") + "\r\n" + "\r\n";
	}
	,headerNotFound: function(name) {
		return "No " + name + " header found";
	}
	,__class__: tink_http_Header
};
var tink_http_HeaderValue = {};
tink_http_HeaderValue.getExtension = function(this1) {
	return tink_http_HeaderValue.parse(this1)[0].extensions;
};
tink_http_HeaderValue.parse = function(this1) {
	return tink_http_HeaderValue.parseWith(this1,function(_,params) {
		var _g = new haxe_ds_StringMap();
		var p = params;
		while(p.hasNext()) {
			var p1 = p.next();
			var key = p1.name;
			var value;
			var _g1 = tink_url_Portion.toString(p1.value);
			var quoted = _g1;
			if(HxOverrides.cca(quoted,0) == 34) {
				value = HxOverrides.substr(quoted,1,quoted.length - 2);
			} else {
				var v = _g1;
				value = v;
			}
			_g.h[key] = value;
		}
		return _g;
	});
};
tink_http_HeaderValue.parseWith = function(this1,parseExtension) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split(",");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		v = StringTools.trim(v);
		var i;
		var _g3 = v.indexOf(";");
		if(_g3 == -1) {
			i = v.length;
		} else {
			var i1 = _g3;
			i = i1;
		}
		var value = HxOverrides.substr(v,0,i);
		var sep = ";";
		var pos = i + 1;
		if(pos == null) {
			pos = 0;
		}
		if(sep == null) {
			sep = "&";
		}
		_g.push({ value : value, extensions : parseExtension(value,new tink_url__$Query_QueryStringParser(v,sep,"=",pos))});
	}
	return _g;
};
tink_http_HeaderValue.basicAuth = function(username,password) {
	return "Basic " + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString("" + username + ":" + password)).toString();
};
tink_http_HeaderValue.ofDate = function(d) {
	return DateTools.format(d,tink_http_HeaderValue.DAYS[d.getDay()] + ", %d " + tink_http_HeaderValue.MONTHS[d.getMonth()] + " %Y %H:%M:%S GMT");
};
tink_http_HeaderValue.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
var tink_http_HeaderName = {};
tink_http_HeaderName._new = function(s) {
	var this1 = s;
	return this1;
};
tink_http_HeaderName.ofString = function(s) {
	var this1 = s.toLowerCase();
	return this1;
};
var tink_http_HeaderField = function(name,value) {
	tink_core_NamedWith.call(this,name,value);
};
tink_http_HeaderField.__name__ = true;
tink_http_HeaderField.ofString = function(s) {
	var _g = s.indexOf(":");
	if(_g == -1) {
		var this1 = s.toLowerCase();
		return new tink_http_HeaderField(this1,null);
	} else {
		var v = _g;
		var name = HxOverrides.substr(s,0,v);
		var this1 = name.toLowerCase();
		return new tink_http_HeaderField(this1,StringTools.trim(HxOverrides.substr(s,v + 1,null)));
	}
};
tink_http_HeaderField.setCookie = function(key,value,options) {
	if(options == null) {
		options = { };
	}
	var buf_b = "";
	buf_b += Std.string(encodeURIComponent(key) + "=" + encodeURIComponent(value));
	if(options.expires != null) {
		var value = tink_http_HeaderValue.ofDate(options.expires);
		if(value != null) {
			buf_b += "; ";
			buf_b += "expires=";
			buf_b += Std.string(value);
		}
	}
	var value = options.domain;
	if(value != null) {
		buf_b += "; ";
		buf_b += "domain=";
		buf_b += Std.string(value);
	}
	var value = options.path;
	if(value != null) {
		buf_b += "; ";
		buf_b += "path=";
		buf_b += Std.string(value);
	}
	if(options.secure) {
		buf_b += "; ";
		buf_b += "secure";
		buf_b += "";
	}
	if(options.scriptable != true) {
		buf_b += "; ";
		buf_b += "HttpOnly";
		buf_b += "";
	}
	return new tink_http_HeaderField("set-cookie",buf_b);
};
tink_http_HeaderField.__super__ = tink_core_NamedWith;
tink_http_HeaderField.prototype = $extend(tink_core_NamedWith.prototype,{
	toString: function() {
		if(this.value == null) {
			return this.name;
		} else {
			return "" + this.name + ": " + this.value;
		}
	}
	,__class__: tink_http_HeaderField
});
var tink_io_BytewiseParser = function() { };
tink_io_BytewiseParser.__name__ = true;
tink_io_BytewiseParser.__interfaces__ = [tink_io_StreamParserObject];
tink_io_BytewiseParser.prototype = {
	read: function(char) {
		throw haxe_Exception.thrown("abstract");
	}
	,progress: function(cursor) {
		while(true) {
			var _g = this.read(cursor.currentByte);
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				var r = _g.r;
				cursor.next();
				return tink_io_ParseStep.Done(r);
			case 2:
				var e = _g.e;
				return tink_io_ParseStep.Failed(e);
			}
			if(!cursor.next()) {
				break;
			}
		}
		return tink_io_ParseStep.Progressed;
	}
	,eof: function(rest) {
		var _g = this.read(-1);
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Unexpected end of input",{ fileName : "tink/io/StreamParser.hx", lineNumber : 180, className : "tink.io.BytewiseParser", methodName : "eof"}));
		case 1:
			var r = _g.r;
			return tink_core_Outcome.Success(r);
		case 2:
			var e = _g.e;
			return tink_core_Outcome.Failure(e);
		}
	}
	,__class__: tink_io_BytewiseParser
};
var tink_io_ParseStep = $hxEnums["tink.io.ParseStep"] = { __ename__ : true, __constructs__ : ["Progressed","Done","Failed"]
	,Progressed: {_hx_index:0,__enum__:"tink.io.ParseStep",toString:$estr}
	,Done: ($_=function(r) { return {_hx_index:1,r:r,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["r"],$_)
	,Failed: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_http_HeaderParser = function(makeHeader) {
	this.last = -1;
	this.buf = new StringBuf();
	this.makeHeader = makeHeader;
};
tink_http_HeaderParser.__name__ = true;
tink_http_HeaderParser.__super__ = tink_io_BytewiseParser;
tink_http_HeaderParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	header: null
	,fields: null
	,buf: null
	,last: null
	,makeHeader: null
	,read: function(c) {
		var _g = this.last;
		switch(c) {
		case -1:
			return this.nextLine();
		case 10:
			if(_g == 13) {
				return this.nextLine();
			} else {
				var other = c;
				this.last = other;
				this.buf.b += String.fromCodePoint(other);
				return tink_io_ParseStep.Progressed;
			}
			break;
		case 13:
			if(_g == 13) {
				var c1 = this.last;
				this.buf.b += String.fromCodePoint(c1);
				return tink_io_ParseStep.Progressed;
			} else {
				this.last = 13;
				return tink_io_ParseStep.Progressed;
			}
			break;
		default:
			if(_g == 13) {
				var other = c;
				var c1 = this.last;
				this.buf.b += String.fromCodePoint(c1);
				this.buf.b += String.fromCodePoint(other);
				this.last = -1;
				return tink_io_ParseStep.Progressed;
			} else {
				var other = c;
				this.last = other;
				this.buf.b += String.fromCodePoint(other);
				return tink_io_ParseStep.Progressed;
			}
		}
	}
	,nextLine: function() {
		var line = this.buf.b;
		this.buf = new StringBuf();
		this.last = -1;
		if(line == "") {
			if(this.header == null) {
				return tink_io_ParseStep.Progressed;
			} else {
				return tink_io_ParseStep.Done(this.header);
			}
		} else if(this.header == null) {
			var _g = this.makeHeader(line,this.fields = []);
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.data;
				if(_g1 == null) {
					return tink_io_ParseStep.Done(this.header = null);
				} else {
					var v = _g1;
					this.header = v;
					return tink_io_ParseStep.Progressed;
				}
				break;
			case 1:
				var e = _g.failure;
				return tink_io_ParseStep.Failed(e);
			}
		} else {
			this.fields.push(tink_http_HeaderField.ofString(line));
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_http_HeaderParser
});
var tink_http_Message = function(header,body) {
	this.header = header;
	this.body = body;
};
tink_http_Message.__name__ = true;
tink_http_Message.prototype = {
	header: null
	,body: null
	,__class__: tink_http_Message
};
var tink_http_Method = {};
tink_http_Method.ofString = function(s,fallback) {
	var _g = s.toUpperCase();
	switch(_g) {
	case "DELETE":
		return "DELETE";
	case "GET":
		return "GET";
	case "HEAD":
		return "HEAD";
	case "OPTIONS":
		return "OPTIONS";
	case "PATCH":
		return "PATCH";
	case "POST":
		return "POST";
	case "PUT":
		return "PUT";
	default:
		var v = _g;
		return fallback(v);
	}
};
var tink_http_RequestHeader = function(method,url,protocol,fields) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.method = method;
	this.url = url;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_RequestHeader.__name__ = true;
tink_http_RequestHeader.__super__ = tink_http_Header;
tink_http_RequestHeader.prototype = $extend(tink_http_Header.prototype,{
	method: null
	,url: null
	,protocol: null
	,concat: function(fields) {
		return new tink_http_RequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,toString: function() {
		var this1 = this.url;
		return "" + this.method + " " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)) + " " + this.protocol + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_RequestHeader
});
var tink_http_IncomingRequestHeader = function(method,url,protocol,fields) {
	tink_http_RequestHeader.call(this,method,url,protocol,fields);
};
tink_http_IncomingRequestHeader.__name__ = true;
tink_http_IncomingRequestHeader.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var _g = line.split(" ");
		if(_g.length == 3) {
			var protocol = _g[2];
			var url = _g[1];
			var method = _g[0];
			return tink_core_Outcome.Success(new tink_http_IncomingRequestHeader(method,tink_Url.fromString(url),protocol,headers));
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Request.hx", lineNumber : 95, className : "tink.http.IncomingRequestHeader", methodName : "parser"}));
		}
	});
};
tink_http_IncomingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_IncomingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	cookies: null
	,getCookies: function() {
		if(this.cookies == null) {
			var _g = new haxe_ds_StringMap();
			var _g1 = 0;
			var this1 = "cookie".toLowerCase();
			var _g2 = this.get(this1);
			while(_g1 < _g2.length) {
				var header = _g2[_g1];
				++_g1;
				var sep = ";";
				if(sep == null) {
					sep = "&";
				}
				var entry = new tink_url__$Query_QueryStringParser(header,sep,"=",0);
				while(entry.hasNext()) {
					var entry1 = entry.next();
					var key = entry1.name;
					var value = tink_url_Portion.toString(entry1.value);
					_g.h[key] = value;
				}
			}
			this.cookies = _g;
		}
		return this.cookies;
	}
	,concat: function(fields) {
		return new tink_http_IncomingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,cookieNames: function() {
		return haxe_ds_StringMap.keysIterator(this.cookies.h);
	}
	,getCookie: function(name) {
		return this.getCookies().h[name];
	}
	,getAuth: function() {
		return this.getAuthWith(function(s,p) {
			switch(s) {
			case "Basic":
				var decoded;
				try {
					decoded = haxe_crypto_Base64.decode(p).toString();
				} catch( _g ) {
					var e = haxe_Exception.caught(_g).unwrap();
					return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error in decoding basic auth",e,{ fileName : "tink/http/Request.hx", lineNumber : 67, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				}
				var _g = decoded.indexOf(":");
				if(_g == -1) {
					return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Cannot parse username and password because \":\" is missing",{ fileName : "tink/http/Request.hx", lineNumber : 69, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				} else {
					var i = _g;
					return tink_core_Outcome.Success(tink_http_Authorization.Basic(HxOverrides.substr(decoded,0,i),HxOverrides.substr(decoded,i + 1,null)));
				}
				break;
			case "Bearer":
				return tink_core_Outcome.Success(tink_http_Authorization.Bearer(p));
			default:
				var s1 = s;
				return tink_core_Outcome.Success(tink_http_Authorization.Others(s1,p));
			}
		});
	}
	,getAuthWith: function(parser) {
		return tink_core_OutcomeTools.flatMap(this.byName("authorization"),tink_core__$Outcome_OutcomeMapper.withSameError(function(v) {
			var _g = v.indexOf(" ");
			if(_g == -1) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Authorization Header",{ fileName : "tink/http/Request.hx", lineNumber : 81, className : "tink.http.IncomingRequestHeader", methodName : "getAuthWith"}));
			} else {
				var i = _g;
				return parser(HxOverrides.substr(v,0,i),HxOverrides.substr(v,i + 1,null));
			}
		}));
	}
	,__class__: tink_http_IncomingRequestHeader
});
var tink_http_OutgoingRequestHeader = function(method,url,protocol,fields) {
	tink_http_RequestHeader.call(this,method,url,protocol,fields);
};
tink_http_OutgoingRequestHeader.__name__ = true;
tink_http_OutgoingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_OutgoingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	concat: function(fields) {
		return new tink_http_OutgoingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,__class__: tink_http_OutgoingRequestHeader
});
var tink_http_OutgoingRequest = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_OutgoingRequest.__name__ = true;
tink_http_OutgoingRequest.__super__ = tink_http_Message;
tink_http_OutgoingRequest.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_OutgoingRequest
});
var tink_http_IncomingRequest = function(clientIp,header,body) {
	this.clientIp = clientIp;
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingRequest.__name__ = true;
tink_http_IncomingRequest.parse = function(clientIp,source) {
	return tink_core_Promise.next(tink_io_RealSourceTools.parse(source,tink_http_IncomingRequestHeader.parser()),function(parts) {
		var clientIp1 = clientIp;
		var parts1 = parts.a;
		var _g = parts.a.getContentLength();
		var d;
		switch(_g._hx_index) {
		case 0:
			var len = _g.data;
			d = tink_io_Source.limit(parts.b,len);
			break;
		case 1:
			var _g1 = _g.failure;
			var _g = parts.a.byName("transfer-encoding");
			switch(parts.a.method) {
			case "GET":case "OPTIONS":
				d = tink_io_Source.EMPTY;
				break;
			default:
				if(_g._hx_index == 0) {
					var _this = _g.data.split(",");
					var f = StringTools.trim;
					var result = new Array(_this.length);
					var _g = 0;
					var _g1 = _this.length;
					while(_g < _g1) {
						var i = _g++;
						result[i] = f(_this[i]);
					}
					var encodings = result;
					if(encodings.indexOf("chunked") != -1) {
						var source = parts.b;
						d = tink_http_Chunked.decoder().transform(source);
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 142, className : "tink.http.IncomingRequest", methodName : "parse"}))));
					}
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 142, className : "tink.http.IncomingRequest", methodName : "parse"}))));
				}
			}
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_IncomingRequest(clientIp1,parts1,tink_http_IncomingRequestBody.Plain(d)))));
	});
};
tink_http_IncomingRequest.__super__ = tink_http_Message;
tink_http_IncomingRequest.prototype = $extend(tink_http_Message.prototype,{
	clientIp: null
	,__class__: tink_http_IncomingRequest
});
var tink_http_IncomingRequestBody = $hxEnums["tink.http.IncomingRequestBody"] = { __ename__ : true, __constructs__ : ["Plain","Parsed"]
	,Plain: ($_=function(source) { return {_hx_index:0,source:source,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["source"],$_)
	,Parsed: ($_=function(parts) { return {_hx_index:1,parts:parts,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["parts"],$_)
};
var tink_http_Authorization = $hxEnums["tink.http.Authorization"] = { __ename__ : true, __constructs__ : ["Basic","Bearer","Others"]
	,Basic: ($_=function(user,pass) { return {_hx_index:0,user:user,pass:pass,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["user","pass"],$_)
	,Bearer: ($_=function(token) { return {_hx_index:1,token:token,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["token"],$_)
	,Others: ($_=function(scheme,param) { return {_hx_index:2,scheme:scheme,param:param,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["scheme","param"],$_)
};
var tink_http_ResponseHeader = {};
tink_http_ResponseHeader._new = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	var this1 = new tink_http_ResponseHeaderBase(statusCode,reason,fields,protocol);
	return this1;
};
tink_http_ResponseHeader.fromStatusCode = function(code) {
	var this1 = new tink_http_ResponseHeaderBase(code,null,null,"HTTP/1.1");
	return this1;
};
tink_http_ResponseHeader.fromHeaderFields = function(fields) {
	var this1 = new tink_http_ResponseHeaderBase(200,null,fields,"HTTP/1.1");
	return this1;
};
tink_http_ResponseHeader.parser = function() {
	return tink_http_ResponseHeaderBase.parser();
};
var tink_http_ResponseHeaderBase = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.statusCode = statusCode;
	var tmp;
	if(reason == null) {
		var this1 = httpstatus_HttpStatusMessage.fromCode(statusCode);
		tmp = this1;
	} else {
		tmp = reason;
	}
	this.reason = tmp;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_ResponseHeaderBase.__name__ = true;
tink_http_ResponseHeaderBase.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var v = line.split(" ");
		if(v.length >= 3) {
			var statusCode = Std.parseInt(v[1]);
			var reason = v.slice(2).join(" ");
			var protocol = v[0];
			if(protocol == null) {
				protocol = "HTTP/1.1";
			}
			var this1 = new tink_http_ResponseHeaderBase(statusCode,reason,headers,protocol);
			return tink_core_Outcome.Success(this1);
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP response header",{ fileName : "tink/http/Response.hx", lineNumber : 56, className : "tink.http.ResponseHeaderBase", methodName : "parser"}));
		}
	});
};
tink_http_ResponseHeaderBase.__super__ = tink_http_Header;
tink_http_ResponseHeaderBase.prototype = $extend(tink_http_Header.prototype,{
	statusCode: null
	,reason: null
	,protocol: null
	,concat: function(fields) {
		var statusCode = this.statusCode;
		var reason = this.reason;
		var fields1 = this.fields.concat(fields);
		var protocol = this.protocol;
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		var this1 = new tink_http_ResponseHeaderBase(statusCode,reason,fields1,protocol);
		return this1;
	}
	,toString: function() {
		return "" + this.protocol + " " + this.statusCode + " " + this.reason + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_ResponseHeaderBase
});
var tink_http__$Response_OutgoingResponseData = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http__$Response_OutgoingResponseData.__name__ = true;
tink_http__$Response_OutgoingResponseData.__super__ = tink_http_Message;
tink_http__$Response_OutgoingResponseData.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http__$Response_OutgoingResponseData
});
var tink_http_OutgoingResponse = {};
tink_http_OutgoingResponse._new = function(header,body) {
	var this1 = new tink_http__$Response_OutgoingResponseData(header,body);
	return this1;
};
tink_http_OutgoingResponse.blob = function(code,chunk,contentType,headers) {
	if(code == null) {
		code = 200;
	}
	var this1 = httpstatus_HttpStatusMessage.fromCode(code);
	var this2 = "Content-Type".toLowerCase();
	var fields = new tink_http_HeaderField(this2,contentType);
	var this2 = "Content-Length".toLowerCase();
	var fields1 = Std.string(chunk.getLength());
	var fields2;
	if(headers == null) {
		fields2 = [];
	} else {
		var v = headers;
		fields2 = v;
	}
	var this3 = new tink_http_ResponseHeaderBase(code,this1,[fields,new tink_http_HeaderField(this2,fields1)].concat(fields2),"HTTP/1.1");
	var this1 = new tink_http__$Response_OutgoingResponseData(this3,new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk)));
	return this1;
};
tink_http_OutgoingResponse.chunked = function(contentType,headers,source) {
};
tink_http_OutgoingResponse.ofString = function(s) {
	return tink_http_OutgoingResponse.blob(null,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s)),"text/plain");
};
tink_http_OutgoingResponse.ofChunk = function(c) {
	return tink_http_OutgoingResponse.blob(null,c,"application/octet-stream");
};
tink_http_OutgoingResponse.reportError = function(e) {
	var code = e.code;
	if(code < 100 || code > 999) {
		code = 500;
	}
	var reason = httpstatus_HttpStatusMessage.fromCode(code);
	var this1 = "Content-Type".toLowerCase();
	var this2 = new tink_http_ResponseHeaderBase(code,reason,[new tink_http_HeaderField(this1,"application/json")],"HTTP/1.1");
	var this1 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
	return this1;
};
var tink_http_IncomingResponse = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingResponse.__name__ = true;
tink_http_IncomingResponse.readAll = function(res) {
	return tink_core_Promise.next(tink_io_RealSourceTools.all(res.body),function(b) {
		if(res.header.statusCode >= 400) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(res.header.statusCode,res.header.reason,b.toString(),{ fileName : "tink/http/Response.hx", lineNumber : 115, className : "tink.http.IncomingResponse", methodName : "readAll"}))));
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(b)));
		}
	});
};
tink_http_IncomingResponse.reportError = function(e) {
	var statusCode = e.code;
	var reason = httpstatus_HttpStatusMessage.fromCode(e.code);
	var this1 = "Content-Type".toLowerCase();
	var this2 = new tink_http_ResponseHeaderBase(statusCode,reason,[new tink_http_HeaderField(this1,"application/json")],"HTTP/1.1");
	return new tink_http_IncomingResponse(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
};
tink_http_IncomingResponse.__super__ = tink_http_Message;
tink_http_IncomingResponse.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_IncomingResponse
});
var tink_http_BodyPart = $hxEnums["tink.http.BodyPart"] = { __ename__ : true, __constructs__ : ["Value","File"]
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["v"],$_)
	,File: ($_=function(handle) { return {_hx_index:1,handle:handle,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["handle"],$_)
};
var tink_http_UploadedFile = {};
tink_http_UploadedFile.ofBlob = function(name,type,data) {
	return { fileName : name, mimeType : type, size : data.length, read : function() {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(data)));
	}, saveTo : function(path) {
		var name = "File sink " + path;
		throw haxe_Exception.thrown("not implemented");
	}};
};
var tink_http_clients_JsClient = function(credentials) {
	this.credentials = false;
	this.secure = false;
	if(credentials) {
		this.credentials = true;
	}
};
tink_http_clients_JsClient.__name__ = true;
tink_http_clients_JsClient.__interfaces__ = [tink_http_ClientObject];
tink_http_clients_JsClient.prototype = {
	secure: null
	,credentials: null
	,request: function(req) {
		return this.jsRequest(req);
	}
	,jsRequest: function(req) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			var http = new XMLHttpRequest();
			var url = tink_Url.toString(req.header.url);
			if(req.header.url.scheme == null) {
				url = (_gthis.secure ? "https:" : "http:") + url;
			}
			http.open(req.header.method,url);
			http.withCredentials = _gthis.credentials;
			http.responseType = "arraybuffer";
			var _g_current = 0;
			var _g_array = req.header.fields;
			while(_g_current < _g_array.length) {
				var header = _g_array[_g_current++];
				switch(header.name) {
				case "content-length":case "host":
					break;
				default:
					http.setRequestHeader(header.name,header.value);
				}
			}
			http.onreadystatechange = function() {
				if(http.readyState == 4) {
					if(http.status != 0) {
						var headers;
						var _g = http.getAllResponseHeaders();
						if(_g == null) {
							headers = [];
						} else {
							var v = _g;
							var _g = [];
							var _g1 = 0;
							var _g2 = v.split("\r\n");
							while(_g1 < _g2.length) {
								var line = _g2[_g1];
								++_g1;
								if(line != "") {
									_g.push(tink_http_HeaderField.ofString(line));
								}
							}
							headers = _g;
						}
						var this1 = new tink_http_ResponseHeaderBase(http.status,http.statusText,headers,"HTTP/1.1");
						var header = this1;
						var cb1 = cb;
						var this1 = new tink_http_ResponseHeaderBase(http.status,http.statusText,headers,"HTTP/1.1");
						var _g = http.response;
						var tmp;
						if(_g == null) {
							tmp = tink_io_Source.EMPTY;
						} else {
							var v = _g;
							tmp = new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(v))));
						}
						cb1(tink_core_Outcome.Success(new tink_http_IncomingResponse(this1,tmp)));
					} else {
						var _g = cb;
						var a1 = tink_core_Outcome.Failure(tink_core_TypedError.withData(502,"XMLHttpRequest Error",{ request : req, error : "Status code is zero"},{ fileName : "tink/http/clients/JsClient.hx", lineNumber : 61, className : "tink.http.clients.JsClient", methodName : "jsRequest"}));
						haxe_Timer.delay(function() {
							_g(a1);
						},1);
					}
				}
			};
			http.onerror = function(e) {
				cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(502,"XMLHttpRequest Error",{ request : req, error : e},{ fileName : "tink/http/clients/JsClient.hx", lineNumber : 67, className : "tink.http.clients.JsClient", methodName : "jsRequest"})));
			};
			if(req.header.method == "GET") {
				http.send();
			} else {
				tink_io_IdealSourceTools.all(req.body).handle(function(chunk) {
					http.send(new Int8Array(chunk.toBytes().b.bufferValue));
				});
			}
		});
	}
	,getHttp: function() {
		return new XMLHttpRequest();
	}
	,__class__: tink_http_clients_JsClient
};
var tink_http_clients_LocalContainerClient = function(container) {
	this.container = container;
};
tink_http_clients_LocalContainerClient.__name__ = true;
tink_http_clients_LocalContainerClient.__interfaces__ = [tink_http_ClientObject];
tink_http_clients_LocalContainerClient.prototype = {
	container: null
	,request: function(req) {
		var this1 = req.header.url;
		return tink_core_Future.next(this.container.serve(new tink_http_IncomingRequest("127.0.0.1",new tink_http_IncomingRequestHeader(req.header.method,tink_Url.fromString(this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),"HTTP/1.1",req.header.fields),tink_http_IncomingRequestBody.Plain(req.body))),function(res) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_IncomingResponse(res.header,res.body))));
		});
	}
	,__class__: tink_http_clients_LocalContainerClient
};
var tink_http_clients_SecureJsClient = function(credentials) {
	tink_http_clients_JsClient.call(this,credentials);
	this.secure = true;
};
tink_http_clients_SecureJsClient.__name__ = true;
tink_http_clients_SecureJsClient.__super__ = tink_http_clients_JsClient;
tink_http_clients_SecureJsClient.prototype = $extend(tink_http_clients_JsClient.prototype,{
	request: function(req) {
		return this.jsRequest(req);
	}
	,__class__: tink_http_clients_SecureJsClient
});
var tink_http_clients_StdClient = function(worker) {
	this.worker = tink_io_Worker.ensure(worker);
};
tink_http_clients_StdClient.__name__ = true;
tink_http_clients_StdClient.__interfaces__ = [tink_http_ClientObject];
tink_http_clients_StdClient.prototype = {
	worker: null
	,request: function(req) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			var r = new haxe_http_HttpJs(tink_Url.toString(req.header.url));
			var send = function(post) {
				var code = 200;
				r.onStatus = function(c) {
					code = c;
				};
				var headers = function() {
					return [];
				};
				r.onError = function(msg) {
					if(code == 200) {
						code = 500;
					}
					tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyConst(true)).handle(tink_core_Callback.fromNiladic(function() {
						cb(tink_core_Outcome.Failure(new tink_core_TypedError(code,msg,{ fileName : "tink/http/clients/StdClient.hx", lineNumber : 44, className : "tink.http.clients.StdClient", methodName : "request"})));
					}));
				};
				r.onData = function(data) {
					tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyConst(true)).handle(tink_core_Callback.fromNiladic(function() {
						var cb1 = cb;
						var fields = headers();
						var this1 = new tink_http_ResponseHeaderBase(code,"OK",fields,"HTTP/1.1");
						cb1(tink_core_Outcome.Success(new tink_http_IncomingResponse(this1,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(data)))))));
					}));
				};
				tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
					r.request(post);
				}));
			};
			var _g_current = 0;
			var _g_array = req.header.fields;
			while(_g_current < _g_array.length) {
				var h = _g_array[_g_current++];
				r.setHeader(h.name,h.value);
			}
			switch(req.header.method) {
			case "GET":case "HEAD":case "OPTIONS":
				send(false);
				break;
			default:
				tink_io_IdealSourceTools.all(req.body).handle(function(bytes) {
					r.setPostData(bytes.toString());
					send(true);
				});
			}
		});
	}
	,__class__: tink_http_clients_StdClient
};
var tink_http_containers_LocalContainer = function() {
};
tink_http_containers_LocalContainer.__name__ = true;
tink_http_containers_LocalContainer.__interfaces__ = [tink_http_Container];
tink_http_containers_LocalContainer.prototype = {
	handler: null
	,running: null
	,run: function(handler) {
		var _gthis = this;
		this.handler = handler;
		this.running = true;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_http_ContainerResult.Running({ failures : new tink_core_SignalTrigger(), shutdown : function(hard) {
			_gthis.running = false;
			var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(true)).map(tink_core_Outcome.Success);
			return ret.gather();
		}})));
	}
	,serve: function(req) {
		if(!this.running) {
			var this1 = new tink_http_ResponseHeaderBase(503,"Server stopped",[],"HTTP/1.1");
			var this2 = new tink_http__$Response_OutgoingResponseData(this1,tink_io_Source.EMPTY);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(this2));
		}
		return this.handler.process(req);
	}
	,__class__: tink_http_containers_LocalContainer
};
var tink_io_PipeOptions = {};
tink_io_PipeOptions.get_end = function(this1) {
	if(this1 != null) {
		return this1.end;
	} else {
		return false;
	}
};
tink_io_PipeOptions.get_destructive = function(this1) {
	if(this1 != null) {
		return this1.destructive;
	} else {
		return false;
	}
};
var tink_io_PipeResult = $hxEnums["tink.io.PipeResult"] = { __ename__ : true, __constructs__ : ["AllWritten","SinkEnded","SinkFailed","SourceFailed"]
	,AllWritten: {_hx_index:0,__enum__:"tink.io.PipeResult",toString:$estr}
	,SinkEnded: ($_=function(result,rest) { return {_hx_index:1,result:result,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["result","rest"],$_)
	,SinkFailed: ($_=function(e,rest) { return {_hx_index:2,e:e,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,SourceFailed: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_io_PipeResultTools = function() { };
tink_io_PipeResultTools.__name__ = true;
tink_io_PipeResultTools.toOutcome = function(result) {
	switch(result._hx_index) {
	case 0:
		return tink_core_Outcome.Success(haxe_ds_Option.None);
	case 1:
		var _g = result.rest;
		var result1 = result.result;
		return tink_core_Outcome.Success(haxe_ds_Option.Some(result1));
	case 2:
		var _g = result.rest;
		var e = result.e;
		return tink_core_Outcome.Failure(e);
	case 3:
		var e = result.e;
		return tink_core_Outcome.Failure(e);
	}
};
tink_io_PipeResultTools.toResult = function(c,result,buffered) {
	var mk = function(s) {
		if(buffered == null) {
			return s;
		} else {
			var v = buffered;
			return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(v)));
		}
	};
	switch(c._hx_index) {
	case 0:
		var rest = c.rest;
		return tink_io_PipeResult.SinkEnded(result,mk(rest));
	case 1:
		var rest = c.at;
		var e = c.error;
		return tink_io_PipeResult.SinkFailed(e,mk(rest));
	case 2:
		var e = c.error;
		return tink_io_PipeResult.SourceFailed(e);
	case 3:
		return tink_io_PipeResult.AllWritten;
	}
};
var tink_io_SinkObject = function() { };
tink_io_SinkObject.__name__ = true;
tink_io_SinkObject.__isInterface__ = true;
tink_io_SinkObject.prototype = {
	get_sealed: null
	,consume: null
	,__class__: tink_io_SinkObject
};
var tink_io_SinkBase = function() { };
tink_io_SinkBase.__name__ = true;
tink_io_SinkBase.__interfaces__ = [tink_io_SinkObject];
tink_io_SinkBase.prototype = {
	get_sealed: function() {
		return true;
	}
	,consume: function(source,options) {
		throw haxe_Exception.thrown("not implemented");
	}
	,__class__: tink_io_SinkBase
};
var tink_io__$Sink_Blackhole = function() {
};
tink_io__$Sink_Blackhole.__name__ = true;
tink_io__$Sink_Blackhole.__super__ = tink_io_SinkBase;
tink_io__$Sink_Blackhole.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var ret = source.forEach(tink_streams_Handler.ofSafe(function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var _g = o.rest;
				throw haxe_Exception.thrown("unreachable");
			case 2:
				var e = o.error;
				return tink_io_PipeResult.SourceFailed(e);
			case 3:
				return tink_io_PipeResult.AllWritten;
			}
		});
		return ret.gather();
	}
	,__class__: tink_io__$Sink_Blackhole
});
var tink_io_SinkYielding = {};
tink_io_SinkYielding.end = function(this1) {
	if(this1.get_sealed()) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
	} else {
		var ret = this1.consume(tink_io_Source.EMPTY,{ end : true}).map(function(r) {
			switch(r._hx_index) {
			case 0:
				return tink_core_Outcome.Success(true);
			case 1:
				var _g = r.rest;
				var _g = r.result;
				return tink_core_Outcome.Success(true);
			case 2:
				var _g = r.rest;
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}
};
tink_io_SinkYielding.dirty = function(this1) {
	return this1;
};
tink_io_SinkYielding.ofError = function(e) {
	return new tink_io__$Sink_ErrorSink(e);
};
tink_io_SinkYielding.ofPromised = function(p) {
	var ret = p.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var v = o.data;
			return v;
		case 1:
			var e = o.failure;
			return tink_io_SinkYielding.ofError(e);
		}
	});
	return new tink_io__$Sink_FutureSink(ret.gather());
};
tink_io_SinkYielding.ofOutput = function(name,target,options) {
	var tmp;
	if(options == null) {
		tmp = tink_io_Worker.get();
	} else {
		var _g = options.worker;
		if(_g == null) {
			tmp = tink_io_Worker.get();
		} else {
			var w = _g;
			tmp = w;
		}
	}
	return new tink_io_std_OutputSink(name,target,tmp);
};
var tink_io__$Sink_FutureSink = function(f) {
	this.f = f;
};
tink_io__$Sink_FutureSink.__name__ = true;
tink_io__$Sink_FutureSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_FutureSink.prototype = $extend(tink_io_SinkBase.prototype,{
	f: null
	,consume: function(source,options) {
		var ret = this.f.flatMap(function(sink) {
			return sink.consume(source,options);
		});
		return ret.gather();
	}
	,__class__: tink_io__$Sink_FutureSink
});
var tink_io__$Sink_ErrorSink = function(error) {
	this.error = error;
};
tink_io__$Sink_ErrorSink.__name__ = true;
tink_io__$Sink_ErrorSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_ErrorSink.prototype = $extend(tink_io_SinkBase.prototype,{
	error: null
	,get_sealed: function() {
		return false;
	}
	,consume: function(source,options) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_PipeResult.SinkFailed(this.error,source)));
	}
	,__class__: tink_io__$Sink_ErrorSink
});
var tink_streams_StreamObject = function() { };
tink_streams_StreamObject.__name__ = true;
tink_streams_StreamObject.__isInterface__ = true;
tink_streams_StreamObject.prototype = {
	get_depleted: null
	,next: null
	,regroup: null
	,map: null
	,filter: null
	,retain: null
	,idealize: null
	,append: null
	,prepend: null
	,blend: null
	,decompose: null
	,forEach: null
	,reduce: null
	,__class__: tink_streams_StreamObject
};
var tink_streams_StreamBase = function() {
	this.retainCount = 0;
};
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
tink_streams_StreamBase.prototype = {
	get_depleted: function() {
		return false;
	}
	,retainCount: null
	,retain: function() {
		var _gthis = this;
		this.retainCount++;
		var retained = true;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	,next: function() {
		throw haxe_Exception.thrown("not implemented");
	}
	,regroup: function(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	,map: function(f) {
		return this.regroup(f);
	}
	,filter: function(f) {
		return this.regroup(f);
	}
	,destroy: function() {
	}
	,append: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	,prepend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	,blend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return new tink_streams_BlendStream(this,other);
		}
	}
	,decompose: function(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	,idealize: function(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	,reduce: function(initial,reducer) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.forEach(tink_streams_Handler.ofUnknown(function(item) {
				var ret = reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.result;
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o.e;
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					var _g = c.rest;
					throw haxe_Exception.thrown("assert");
				case 1:
					var rest = c.at;
					var e = c.error;
					cb(tink_streams_Reduction.Crashed(e,rest));
					break;
				case 2:
					var e = c.error;
					cb(tink_streams_Reduction.Failed(e));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	,forEach: function(handler) {
		throw haxe_Exception.thrown("not implemented");
	}
	,__class__: tink_streams_StreamBase
};
var tink_streams_Empty = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_Empty.__name__ = true;
tink_streams_Empty.make = function() {
	return tink_streams_Empty.inst;
};
tink_streams_Empty.__super__ = tink_streams_StreamBase;
tink_streams_Empty.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		return true;
	}
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	,__class__: tink_streams_Empty
});
var tink_io_Source = {};
tink_io_Source.dirty = function(this1) {
	return this1;
};
tink_io_Source.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_io_Source.ofJsFile = function(name,file,options) {
	var chunkSize = options == null || options.chunkSize == null ? 16777216 : options.chunkSize;
	return new tink_io_js_BlobSource(name,file,0,chunkSize);
};
tink_io_Source.ofJsBlob = function(name,blob,options) {
	var chunkSize = options == null || options.chunkSize == null ? 16777216 : options.chunkSize;
	return new tink_io_js_BlobSource(name,blob,0,chunkSize);
};
tink_io_Source.ofInput = function(name,input,options) {
	if(options == null) {
		options = { };
	}
	var tmp = tink_io_Worker.ensure(options.worker);
	var length;
	var _g = options.chunkSize;
	if(_g == null) {
		length = 65536;
	} else {
		var v = _g;
		length = v;
	}
	return new tink_io_std_InputSource(name,input,tmp,new haxe_io_Bytes(new ArrayBuffer(length)),0);
};
tink_io_Source.chunked = function(this1) {
	return this1;
};
tink_io_Source.concatAll = function(s) {
	return s.reduce(tink_Chunk.EMPTY,tink_streams_Reducer.ofSafe(function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink_Chunk.concat(res,cur))));
	}));
};
tink_io_Source.pipeTo = function(this1,target,options) {
	return target.consume(this1,options);
};
tink_io_Source.append = function(this1,that) {
	return this1.append(that);
};
tink_io_Source.prepend = function(this1,that) {
	return this1.prepend(that);
};
tink_io_Source.transform = function(this1,transformer) {
	return transformer.transform(this1);
};
tink_io_Source.skip = function(this1,len) {
	return this1.regroup(tink_streams_Regrouper.ofIgnoranceSync(function(chunks) {
		var chunk = chunks[0];
		if(len <= 0) {
			return tink_streams_RegroupResult.Converted(tink_streams_Stream.single(chunk));
		}
		var length = chunk.getLength();
		var out = tink_streams_RegroupResult.Converted(len < length ? tink_streams_Stream.single(chunk.slice(len,length)) : tink_streams_Empty.inst);
		len -= length;
		return out;
	}));
};
tink_io_Source.limit = function(this1,len) {
	if(len == 0) {
		return tink_io_Source.EMPTY;
	}
	return this1.regroup(tink_streams_Regrouper.ofIgnoranceSync(function(chunks) {
		if(len <= 0) {
			return tink_streams_RegroupResult.Terminated(haxe_ds_Option.None);
		}
		var chunk = chunks[0];
		var length = chunk.getLength();
		var out = len == length ? tink_streams_RegroupResult.Terminated(haxe_ds_Option.Some(tink_streams_Stream.single(chunk))) : tink_streams_RegroupResult.Converted(tink_streams_Stream.single(len < length ? chunk.slice(0,len) : chunk));
		len -= length;
		return out;
	}));
};
tink_io_Source.ofError = function(e) {
	return tink_streams_Stream.ofError(e);
};
tink_io_Source.ofFuture = function(f) {
	return tink_streams_Stream.flatten(f);
};
tink_io_Source.ofPromised = function(p) {
	var ret = p.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var s = o.data;
			return s;
		case 1:
			var e = o.failure;
			return tink_io_Source.ofError(e);
		}
	});
	return tink_streams_Stream.flatten(ret.gather());
};
tink_io_Source.ofChunk = function(chunk) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
};
tink_io_Source.ofString = function(s) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s))));
};
tink_io_Source.ofBytes = function(b) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(b)));
};
tink_io_Source.ofFutureChunk = function(chunk) {
	var ret = chunk.map(tink_io_Source.ofChunk);
	return tink_io_Source.ofFuture(ret.gather());
};
tink_io_Source.ofFutureString = function(s) {
	var ret = s.map(tink_io_Source.ofString);
	return tink_io_Source.ofFuture(ret.gather());
};
tink_io_Source.ofFutureBytes = function(b) {
	var ret = b.map(tink_io_Source.ofBytes);
	return tink_io_Source.ofFuture(ret.gather());
};
tink_io_Source.ofPromiseChunk = function(chunk) {
	return tink_io_Source.ofPromised(tink_core_Promise.next(chunk,tink_core_Next.ofSafeSync(tink_io_Source.ofChunk)));
};
tink_io_Source.ofPromiseString = function(s) {
	return tink_io_Source.ofPromised(tink_core_Promise.next(s,tink_core_Next.ofSafeSync(tink_io_Source.ofString)));
};
tink_io_Source.ofPromiseBytes = function(b) {
	return tink_io_Source.ofPromised(tink_core_Promise.next(b,tink_core_Next.ofSafeSync(tink_io_Source.ofBytes)));
};
var tink_io_RealSourceTools = function() { };
tink_io_RealSourceTools.__name__ = true;
tink_io_RealSourceTools.all = function(s) {
	var ret = tink_io_Source.concatAll(s).map(function(o) {
		switch(o._hx_index) {
		case 1:
			var e = o.error;
			return tink_core_Outcome.Failure(e);
		case 2:
			var c = o.result;
			return tink_core_Outcome.Success(c);
		}
	});
	return ret.gather();
};
tink_io_RealSourceTools.parse = function(s,p) {
	var ret = tink_io_StreamParser.parse(s,p).map(function(r) {
		switch(r._hx_index) {
		case 0:
			var rest = r.rest;
			var data = r.data;
			var this1 = new tink_core_MPair(data,rest);
			return tink_core_Outcome.Success(this1);
		case 1:
			var _g = r.rest;
			var e = r.e;
			return tink_core_Outcome.Failure(e);
		case 2:
			var e = r.e;
			return tink_core_Outcome.Failure(e);
		}
	});
	return ret.gather();
};
tink_io_RealSourceTools.split = function(src,delim) {
	var s = tink_io_RealSourceTools.parse(src,new tink_io_Splitter(delim));
	return { before : tink_streams_Stream.promise(tink_core_Promise.ofSpecific(tink_core_Promise.next(s,tink_core_Next.ofSafeSync(function(p) {
		var _g = p.a;
		switch(_g._hx_index) {
		case 0:
			var chunk = _g.v;
			return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
		case 1:
			return src;
		}
	})))), delimiter : tink_core_Promise.next(s,function(p) {
		var _g = p.a;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(delim)));
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Delimiter not found",{ fileName : "tink/io/Source.hx", lineNumber : 213, className : "tink.io.RealSourceTools", methodName : "split"}))));
		}
	}), after : tink_streams_Stream.promise(tink_core_Promise.ofSpecific(tink_core_Promise.next(s,tink_core_Next.ofSafeSync(function(p) {
		return p.b;
	}))))};
};
tink_io_RealSourceTools.parseStream = function(s,p) {
	return tink_io_StreamParser.parseStream(s,p);
};
tink_io_RealSourceTools.idealize = function(s,rescue) {
	return tink_io_Source.chunked(s).idealize(rescue);
};
var tink_io_IdealSourceTools = function() { };
tink_io_IdealSourceTools.__name__ = true;
tink_io_IdealSourceTools.all = function(s) {
	var ret = tink_io_Source.concatAll(s).map(function(o) {
		var c = o.result;
		return c;
	});
	return ret.gather();
};
tink_io_IdealSourceTools.parse = function(s,p) {
	var ret = tink_io_StreamParser.parse(s,p).map(function(r) {
		switch(r._hx_index) {
		case 0:
			var rest = r.rest;
			var data = r.data;
			var this1 = new tink_core_MPair(data,rest);
			return tink_core_Outcome.Success(this1);
		case 1:
			var _g = r.rest;
			var e = r.e;
			return tink_core_Outcome.Failure(e);
		}
	});
	return ret.gather();
};
tink_io_IdealSourceTools.parseStream = function(s,p) {
	return tink_io_StreamParser.parseStream(s,p);
};
tink_io_IdealSourceTools.split = function(s,delim) {
	var s1 = tink_io_RealSourceTools.split(s,delim);
	return { before : tink_io_RealSourceTools.idealize(s1.before,function(e) {
		return tink_io_Source.EMPTY;
	}), delimiter : s1.delimiter, after : tink_io_RealSourceTools.idealize(s1.after,function(e) {
		return tink_io_Source.EMPTY;
	})};
};
var tink_io_ParseResult = $hxEnums["tink.io.ParseResult"] = { __ename__ : true, __constructs__ : ["Parsed","Invalid","Broke"]
	,Parsed: ($_=function(data,rest) { return {_hx_index:0,data:data,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["data","rest"],$_)
	,Invalid: ($_=function(e,rest) { return {_hx_index:1,e:e,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,Broke: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_io_StreamParser = {};
tink_io_StreamParser.doParse = function(source,p,consume,finish) {
	var cursor = tink_Chunk.EMPTY.getCursor();
	var resume = true;
	var mk = function(source) {
		if(cursor.currentPos < cursor.length) {
			return source.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.right())));
		} else {
			return source;
		}
	};
	var flush = function() {
		var _g = cursor.flush();
		var c = _g;
		if(c.getLength() == 0) {
			return tink_io_Source.EMPTY;
		} else {
			var c = _g;
			return new tink_streams_Single(new tink_core__$Lazy_LazyConst(c));
		}
	};
	var ret = source.forEach(tink_streams_Handler.ofUnknown(function(chunk) {
		if(chunk.getLength() == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		}
		cursor.shift(chunk);
		return tink_core_Future.async(function(cb) {
			var next = null;
			next = function() {
				cursor.shift();
				var lastPos = cursor.currentPos;
				var _g = p.progress(cursor);
				switch(_g._hx_index) {
				case 0:
					if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
						next();
					} else {
						cb(tink_streams_Handled.Resume);
					}
					break;
				case 1:
					var v = _g.r;
					consume(v).handle(function(o) {
						resume = o.resume;
						if(resume) {
							if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
								next();
							} else {
								cb(tink_streams_Handled.Resume);
							}
						} else {
							cb(tink_streams_Handled.Finish);
						}
					});
					break;
				case 2:
					var e = _g.e;
					cb(tink_streams_Handled.Clog(e));
					break;
				}
			};
			next();
		});
	})).flatMap(function(c) {
		switch(c._hx_index) {
		case 0:
			var rest = c.rest;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(rest))));
		case 1:
			var rest = c.at;
			var e = c.error;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e,mk(rest))));
		case 2:
			var e = c.error;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Broke(e)));
		case 3:
			if(cursor.currentPos < cursor.length) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_Chunk.EMPTY))))));
			} else if(!resume) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),flush())));
			} else {
				var _g = p.eof(cursor);
				switch(_g._hx_index) {
				case 0:
					var result = _g.data;
					var ret = consume(result).map(function(_) {
						return tink_io_ParseResult.Parsed(finish(),flush());
					});
					return ret.gather();
				case 1:
					var e = _g.failure;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e,flush())));
				}
			}
			break;
		}
	});
	return ret.gather();
};
tink_io_StreamParser.parse = function(s,p) {
	var res = null;
	var onResult = function(r) {
		res = r;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst({ resume : false}));
	};
	return tink_io_StreamParser.doParse(s,p,onResult,function() {
		return res;
	});
};
tink_io_StreamParser.parseStream = function(s,p) {
	var next = null;
	next = function(step) {
		if(s.get_depleted()) {
			step(tink_streams_Step.End);
		} else {
			tink_io_StreamParser.parse(s,p).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					var result = o.data;
					s = rest;
					step(tink_streams_Step.Link(result,tink_streams_Generator.stream(next)));
					break;
				case 1:
					var _g = o.rest;
					var e = o.e;
					step(tink_streams_Step.Fail(e));
					break;
				case 2:
					var e = o.e;
					step(tink_streams_Step.Fail(e));
					break;
				}
			});
		}
	};
	return tink_streams_Generator.stream(next);
};
var tink_io_Splitter = function(delim) {
	this.buf = tink_Chunk.EMPTY;
	this.delim = delim;
};
tink_io_Splitter.__name__ = true;
tink_io_Splitter.__super__ = tink_io_BytewiseParser;
tink_io_Splitter.prototype = $extend(tink_io_BytewiseParser.prototype,{
	delim: null
	,buf: null
	,read: function(char) {
		if(char == -1) {
			return tink_io_ParseStep.Done(haxe_ds_Option.None);
		}
		this.buf = tink_Chunk.concat(this.buf,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(String.fromCodePoint(char))));
		if(this.buf.getLength() >= this.delim.getLength()) {
			var bcursor = this.buf.getCursor();
			var delta = this.buf.getLength() - this.delim.getLength();
			bcursor.moveTo(bcursor.currentPos + delta);
			var dcursor = this.delim.getCursor();
			var _g = 0;
			var _g1 = this.delim.getLength();
			while(_g < _g1) {
				var i = _g++;
				if(bcursor.currentByte != dcursor.currentByte) {
					return tink_io_ParseStep.Progressed;
				} else {
					bcursor.next();
					dcursor.next();
				}
			}
			var out = tink_io_ParseStep.Done(haxe_ds_Option.Some(this.buf.slice(0,bcursor.currentPos - this.delim.getLength())));
			this.buf = tink_Chunk.EMPTY;
			return out;
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_io_Splitter
});
var tink_io_SimpleBytewiseParser = function(f) {
	this._read = f;
};
tink_io_SimpleBytewiseParser.__name__ = true;
tink_io_SimpleBytewiseParser.__super__ = tink_io_BytewiseParser;
tink_io_SimpleBytewiseParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	_read: null
	,read: function(char) {
		return this._read(char);
	}
	,__class__: tink_io_SimpleBytewiseParser
});
var tink_io_WorkerObject = function() { };
tink_io_WorkerObject.__name__ = true;
tink_io_WorkerObject.__isInterface__ = true;
tink_io_WorkerObject.prototype = {
	work: null
	,__class__: tink_io_WorkerObject
};
var tink_io__$Worker_EagerWorker = function() {
};
tink_io__$Worker_EagerWorker.__name__ = true;
tink_io__$Worker_EagerWorker.__interfaces__ = [tink_io_WorkerObject];
tink_io__$Worker_EagerWorker.prototype = {
	work: function(task) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(task.get()));
	}
	,__class__: tink_io__$Worker_EagerWorker
};
var tink_io_Worker = {};
tink_io_Worker.ensure = function(this1) {
	if(this1 == null) {
		return tink_io_Worker.get();
	} else {
		return this1;
	}
};
tink_io_Worker.get = function() {
	return tink_io_Worker.pool[Std.random(tink_io_Worker.pool.length)];
};
tink_io_Worker.work = function(this1,task) {
	return this1.work(task);
};
var tink_streams_Generator = function(upcoming) {
	tink_streams_StreamBase.call(this);
	this.upcoming = upcoming;
};
tink_streams_Generator.__name__ = true;
tink_streams_Generator.stream = function(step) {
	return new tink_streams_Generator(tink_core_Future.async(step,true));
};
tink_streams_Generator.__super__ = tink_streams_StreamBase;
tink_streams_Generator.prototype = $extend(tink_streams_StreamBase.prototype,{
	upcoming: null
	,next: function() {
		return this.upcoming;
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					var v = e.value;
					handler(v).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e = s.e;
							cb(tink_streams_Conclusion.Clogged(e,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e1 = e.e;
					cb(tink_streams_Conclusion.Failed(e1));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	,__class__: tink_streams_Generator
});
var tink_io_js_BlobSource = function(name,blob,pos,chunkSize) {
	this.name = name;
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		if(pos >= blob.size) {
			cb(tink_streams_Step.End);
		} else {
			var end = pos + chunkSize;
			if(end > blob.size) {
				end = blob.size;
			}
			var reader = new FileReader();
			reader.onload = function() {
				var chunk = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(reader.result));
				cb(tink_streams_Step.Link(chunk,new tink_io_js_BlobSource(name,blob,end,chunkSize)));
			};
			reader.onerror = function(e) {
				cb(tink_streams_Step.Fail(tink_core_TypedError.withData(500,e.message,e,{ fileName : "tink/io/js/BlobSource.hx", lineNumber : 29, className : "tink.io.js.BlobSource", methodName : "new"})));
			};
			reader.readAsArrayBuffer(blob.slice(pos,end));
		}
	},true));
};
tink_io_js_BlobSource.__name__ = true;
tink_io_js_BlobSource.wrap = function(name,blob,chunkSize) {
	return new tink_io_js_BlobSource(name,blob,0,chunkSize);
};
tink_io_js_BlobSource.__super__ = tink_streams_Generator;
tink_io_js_BlobSource.prototype = $extend(tink_streams_Generator.prototype,{
	name: null
	,__class__: tink_io_js_BlobSource
});
var tink_io_std_InputSource = function(name,target,worker,buf,offset) {
	var next = function(buf,offset) {
		return new tink_io_std_InputSource(name,target,worker,buf,offset);
	};
	var free = buf.length - offset;
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		tink_io_Worker.work(worker,new tink_core__$Lazy_LazyFunc(function() {
			try {
				var read = target.readBytes(buf,offset,free);
				if(read == 0) {
					return tink_streams_Step.Link(tink_Chunk.EMPTY,next(buf,offset));
				} else {
					var nextOffset = free - read < 1024 ? 0 : offset + read;
					var nextBuf = nextOffset == 0 ? new haxe_io_Bytes(new ArrayBuffer(buf.length)) : buf;
					return tink_streams_Step.Link(tink_chunk_ByteChunk.of(buf).slice(offset,offset + read),next(nextBuf,nextOffset));
				}
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof haxe_io_Eof)) {
					return tink_streams_Step.End;
				} else if(js_Boot.__instanceof(_g1,haxe_io_Error)) {
					var e = _g1;
					if(e._hx_index == 0) {
						return tink_streams_Step.Link(tink_Chunk.EMPTY,next(buf,offset));
					} else {
						return tink_streams_Step.Fail(tink_core_TypedError.withData(null,"Failed to read from " + name,e,{ fileName : "tink/io/std/InputSource.hx", lineNumber : 50, className : "tink.io.std.InputSource", methodName : "new"}));
					}
				} else {
					throw _g;
				}
			}
		})).handle(function(step) {
			switch(step._hx_index) {
			case 1:
				var _g = step.e;
				try {
					target.close();
				} catch( _g ) {
				}
				break;
			case 2:
				try {
					target.close();
				} catch( _g ) {
				}
				break;
			default:
			}
			cb(step);
		});
	},true));
};
tink_io_std_InputSource.__name__ = true;
tink_io_std_InputSource.__super__ = tink_streams_Generator;
tink_io_std_InputSource.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_io_std_InputSource
});
var tink_io_std_OutputSink = function(name,target,worker) {
	this.name = name;
	this.target = target;
	this.worker = worker;
};
tink_io_std_OutputSink.__name__ = true;
tink_io_std_OutputSink.__super__ = tink_io_SinkBase;
tink_io_std_OutputSink.prototype = $extend(tink_io_SinkBase.prototype,{
	name: null
	,target: null
	,worker: null
	,consume: function(source,options) {
		var _gthis = this;
		var rest = tink_Chunk.EMPTY;
		var ret = source.forEach(tink_streams_Handler.ofUnknown(function(c) {
			return tink_core_Future.async(function(cb) {
				var pos = 0;
				var bytes = c.toBytes();
				var write = null;
				write = function() {
					if(pos == bytes.length) {
						cb(tink_streams_Handled.Resume);
					} else {
						tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
							try {
								return tink_core_Outcome.Success(_gthis.target.writeBytes(bytes,pos,bytes.length - pos));
							} catch( _g ) {
								var _g1 = haxe_Exception.caught(_g).unwrap();
								if(((_g1) instanceof haxe_io_Eof)) {
									return tink_core_Outcome.Success(-1);
								} else if(js_Boot.__instanceof(_g1,haxe_io_Error)) {
									var e = _g1;
									if(e._hx_index == 0) {
										return tink_core_Outcome.Success(0);
									} else {
										return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 40, className : "tink.io.std.OutputSink", methodName : "consume"}));
									}
								} else if(((_g1) instanceof tink_core_TypedError)) {
									var e = _g1;
									return tink_core_Outcome.Failure(e);
								} else {
									var e = _g1;
									return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 46, className : "tink.io.std.OutputSink", methodName : "consume"}));
								}
							}
						})).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								if(_g == -1) {
									rest = tink_chunk_ByteChunk.of(bytes).slice(pos,bytes.length);
									cb(tink_streams_Handled.Finish);
								} else {
									var v = _g;
									pos += v;
									if(pos == bytes.length) {
										cb(tink_streams_Handled.Resume);
									} else {
										write();
									}
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_streams_Handled.Clog(e));
								break;
							}
						});
					}
				};
				write();
			});
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				try {
					_gthis.target.close();
				} catch( _g ) {
				}
			});
		}
		var ret1 = ret.map(function(c) {
			return tink_io_PipeResultTools.toResult(c,tink_core_Noise.Noise,rest);
		});
		return ret1.gather();
	}
	,__class__: tink_io_std_OutputSink
});
var tink_json_Char = {};
tink_json_Char.toString = function(this1) {
	return String.fromCodePoint(this1);
};
var tink_json_Parser = function() { };
tink_json_Parser.__name__ = true;
var tink_json__$Parser_RawData = {};
tink_json__$Parser_RawData._new = function(s,setLength) {
	var this1 = s;
	setLength(s.length);
	return this1;
};
tink_json__$Parser_RawData.hasBackslash = function(this1,min,max) {
	var _g = this1.indexOf("\\",min);
	if(_g == -1) {
		return false;
	} else {
		var outside = _g;
		if(outside > max) {
			return false;
		} else {
			var v = _g;
			return true;
		}
	}
};
tink_json__$Parser_RawData.getChar = function(this1,i) {
	return this1.charCodeAt(i);
};
tink_json__$Parser_RawData.charPos = function(this1,char,start,end) {
	return this1.indexOf(char,start);
};
tink_json__$Parser_RawData.hasId = function(this1,s,min,max) {
	return this1.substring(min,max) == s;
};
var tink_json__$Parser_Char = {};
tink_json__$Parser_Char._new = function(code) {
	var this1 = String.fromCodePoint(code);
	return this1;
};
var tink_json__$Parser_SliceData = function(source,min,max) {
	this.source = source;
	this.min = min;
	this.max = max;
};
tink_json__$Parser_SliceData.__name__ = true;
tink_json__$Parser_SliceData.prototype = {
	source: null
	,min: null
	,max: null
	,__class__: tink_json__$Parser_SliceData
};
var tink_json__$Parser_JsonString = {};
tink_json__$Parser_JsonString.toString = function(this1) {
	if(tink_json__$Parser_RawData.hasBackslash(this1.source,this1.min,this1.max)) {
		return JSON.parse(this1.source.substring(this1.min - 1,this1.max + 1));
	} else {
		return this1.source.substring(this1.min,this1.max);
	}
};
tink_json__$Parser_JsonString.get = function(this1) {
	return this1.source.substring(this1.min,this1.max);
};
tink_json__$Parser_JsonString.toInt = function(this1) {
	return Std.parseInt(this1.source.substring(this1.min,this1.max));
};
tink_json__$Parser_JsonString.toUInt = function(this1) {
	var ret = 0;
	var v = this1.source.substring(this1.min,this1.max);
	var _g = 0;
	var _g1 = v.length;
	while(_g < _g1) {
		var i = _g++;
		ret = ret + Std.parseInt(v.charAt(i)) * (Math.pow(10,v.length - i - 1) | 0);
	}
	return ret;
};
tink_json__$Parser_JsonString.toFloat = function(this1) {
	return parseFloat(this1.source.substring(this1.min,this1.max));
};
tink_json__$Parser_JsonString.equalsString = function(a,b) {
	if(b.length == a.max - a.min) {
		return a.source.substring(a.min,a.max) == b;
	} else {
		return false;
	}
};
var tink_json_BasicParser = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicParser.__name__ = true;
tink_json_BasicParser.isDigit = function(char) {
	if(char < 58) {
		return char > 47;
	} else {
		return false;
	}
};
tink_json_BasicParser.startsNumber = function(char) {
	if(!(char == 46 || char == 45)) {
		if(char < 58) {
			return char > 47;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
tink_json_BasicParser.prototype = {
	plugins: null
	,source: null
	,pos: null
	,max: null
	,init: function(source) {
		this.pos = 0;
		var this1 = source;
		this.max = source.length;
		this.source = this1;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,skipIgnored: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,parseDynamic: function() {
		var start = this.pos;
		this.skipValue();
		return JSON.parse(this.source.substring(start,this.pos));
	}
	,parseString: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var e;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			e = true;
		} else {
			e = false;
		}
		var e1 = !e ? this.die("Expected string") : null;
		return this.parseRestOfString();
	}
	,parseRestOfString: function() {
		return this.slice(this.skipString(),this.pos - 1);
	}
	,skipString: function() {
		var start = this.pos;
		while(true) {
			var end = this.max;
			var _g = this.source.indexOf(tink_json_BasicParser.DBQT,this.pos);
			if(_g == -1) {
				this.die("unterminated string",start);
			} else {
				var v = _g;
				this.pos = v + 1;
				var p = this.pos - 2;
				while(this.source.charCodeAt(p) == 92) --p;
				if((p - this.pos & 1) == 0) {
					break;
				}
			}
		}
		return start;
	}
	,parseNumber: function() {
		var char = this.source.charCodeAt(this.pos);
		if(char == 46 || char == 45 || char < 58 && char > 47) {
			return this.doParseNumber();
		} else {
			return this.die("number expected");
		}
	}
	,doParseNumber: function() {
		return this.slice(this.skipNumber(this.source.charCodeAt(this.pos++)),this.pos);
	}
	,invalidNumber: function(start) {
		return this.die("Invalid number " + this.source.substring(start,this.pos),start);
	}
	,skipNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(this.pos < this.max) {
			c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		return start;
	}
	,slice: function(from,to) {
		return new tink_json__$Parser_SliceData(this.source,from,to);
	}
	,nextChar: function() {
		return this.source.charCodeAt(this.pos++);
	}
	,parseSerialized: function() {
		var start = this.pos;
		this.skipValue();
		return this.source.substring(start,this.pos);
	}
	,parseValue: function() {
		var _gthis = this;
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			return tink_json_Value.VString(tink_json__$Parser_JsonString.toString(this.parseRestOfString()));
		case 91:
			var ret = [];
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				while(true) {
					ret.push(this.parseValue());
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var tmp;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						tmp = true;
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
					this.pos += 1;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					this.die("Expected ]");
				}
			}
			return tink_json_Value.VArray(ret);
		case 102:
			var e;
			if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				e = true;
			} else {
				e = false;
			}
			var e1 = !e ? this.die("Expected alse") : null;
			return tink_json_Value.VBool(false);
		case 110:
			var e;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				e = true;
			} else {
				e = false;
			}
			var e1 = !e ? this.die("Expected ull") : null;
			return tink_json_Value.VNull;
		case 116:
			var e;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				e = true;
			} else {
				e = false;
			}
			var e1 = !e ? this.die("Expected rue") : null;
			return tink_json_Value.VBool(true);
		case 123:
			var fields = [];
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				while(true) {
					if(_gthis.source.charCodeAt(_gthis.pos++) != 34) {
						_gthis.die("expected string",_gthis.pos - 1);
					}
					var tmp = tink_json__$Parser_JsonString.toString(_gthis.parseRestOfString());
					while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
					var e;
					if(_gthis.max > _gthis.pos && _gthis.source.charCodeAt(_gthis.pos) == 58) {
						_gthis.pos += 1;
						while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
						e = true;
					} else {
						e = false;
					}
					var e1 = !e ? _gthis.die("Expected :") : null;
					fields.push(new tink_core_NamedWith(tmp,_gthis.parseValue()));
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var tmp1;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					if(!tmp1) {
						break;
					}
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
					this.pos += 1;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					this.die("Expected }");
				}
			}
			return tink_json_Value.VObject(fields);
		default:
			var char = _g;
			if(char == 46 || char == 45 || char < 58 && char > 47) {
				this.pos--;
				var this1 = this.doParseNumber();
				return tink_json_Value.VNumber(parseFloat(this1.source.substring(this1.min,this1.max)));
			} else {
				return this.invalidChar(char);
			}
		}
	}
	,skipArray: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return;
		}
		while(true) {
			this.skipValue();
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected ]");
		}
	}
	,skipValue: function() {
		var _gthis = this;
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			this.skipString();
			break;
		case 91:
			this.skipArray();
			break;
		case 102:
			var tmp;
			if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected alse");
			}
			break;
		case 110:
			var tmp;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected ull");
			}
			break;
		case 116:
			var tmp;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected rue");
			}
			break;
		case 123:
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return;
			}
			while(true) {
				if(_gthis.source.charCodeAt(_gthis.pos++) != 34) {
					_gthis.die("expected string",_gthis.pos - 1);
				}
				_gthis.skipString();
				while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
				var tmp;
				if(_gthis.max > _gthis.pos && _gthis.source.charCodeAt(_gthis.pos) == 58) {
					_gthis.pos += 1;
					while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					_gthis.die("Expected :");
				}
				_gthis.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected }");
			}
			break;
		default:
			var char = _g;
			if(char == 46 || char == 45 || char < 58 && char > 47) {
				this.skipNumber(char);
			} else {
				this.invalidChar(char);
			}
		}
	}
	,invalidChar: function(c) {
		return this.die("invalid char " + StringTools.hex(c,2),this.pos - 1);
	}
	,die: function(s,pos,end) {
		if(end == null) {
			end = -1;
		}
		if(pos == null) {
			pos = -1;
		}
		if(pos == -1) {
			pos = this.pos;
			end = pos;
		} else if(end == -1) {
			end = this.pos;
		}
		if(end <= pos) {
			end = pos + 1;
		}
		var range = end > pos + 1 ? "characters " + pos + " - " + end : "character " + pos;
		var clip = function(s,maxLength,left) {
			if(s.length > maxLength) {
				if(left) {
					return "... " + HxOverrides.substr(s,s.length - maxLength,null);
				} else {
					return HxOverrides.substr(s,0,maxLength) + " ...";
				}
			} else {
				return s;
			}
		};
		var center = pos + end >> 1;
		var context = clip(this.source.substring(0,pos),20,true) + "  ---->  " + clip(this.source.substring(pos,center),20,false) + clip(this.source.substring(center,end),20,true) + "  <----  " + clip(this.source.substring(end,this.max),20,false);
		return tink_core_TypedError.withData(422,s + (" at " + range + " in " + context),{ source : this.source, start : pos, end : end},{ fileName : "tink/json/Parser.hx", lineNumber : 410, className : "tink.json.BasicParser", methodName : "die"}).throwSelf();
	}
	,parseBool: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 116 && this.source.charCodeAt(this.pos + 1) == 114 && this.source.charCodeAt(this.pos + 2) == 117 && this.source.charCodeAt(this.pos + 3) == 101) {
			this.pos += 4;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return true;
		} else {
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos + 4 && this.source.charCodeAt(this.pos) == 102 && this.source.charCodeAt(this.pos + 1) == 97 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 115 && this.source.charCodeAt(this.pos + 4) == 101) {
				this.pos += 5;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			} else {
				return this.die("expected boolean value");
			}
		}
	}
	,__class__: tink_json_BasicParser
};
var tink_json_Parser0 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser0.__name__ = true;
tink_json_Parser0.__super__ = tink_json_BasicParser;
tink_json_Parser0.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_date = null;
		var hasv_date = false;
		var v_haxeVersion = null;
		var hasv_haxeVersion = false;
		var v_targets = null;
		var hasv_targets = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					this.die("Expected :");
				}
				if("targets".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "targets") {
					var __start__1 = this.pos;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_targets1;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_targets1 = true;
					} else {
						v_targets1 = false;
					}
					if(!v_targets1) {
						this.die("Expected [");
					}
					var __ret = [];
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_targets2;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_targets2 = true;
					} else {
						v_targets2 = false;
					}
					if(!v_targets2) {
						while(true) {
							__ret.push(this.parse1());
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_targets3;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_targets3 = true;
							} else {
								v_targets3 = false;
							}
							if(!v_targets3) {
								break;
							}
						}
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_targets4;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_targets4 = true;
						} else {
							v_targets4 = false;
						}
						if(!v_targets4) {
							this.die("Expected ]");
						}
					}
					var rep = __ret;
					try {
						var this1 = rep;
						v_targets = tink_pure_List.ofRepresentation(this1);
					} catch( _g ) {
						var e = haxe_Exception.caught(_g).unwrap();
						v_targets = this.die(Std.string(e),__start__1);
					}
					hasv_targets = true;
				} else if("haxeVersion".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "haxeVersion") {
					v_haxeVersion = tink_json__$Parser_JsonString.toString(this.parseString());
					hasv_haxeVersion = true;
				} else if("date".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "date") {
					var __start__2 = this.pos;
					var rep1 = tink_json__$Parser_JsonString.toString(this.parseString());
					try {
						var this2 = rep1;
						var this3 = HxOverrides.strDate(tink_json_Representation.get(this2));
						v_date = this3;
					} catch( _g1 ) {
						var e1 = haxe_Exception.caught(_g1).unwrap();
						v_date = this.die(Std.string(e1),__start__2);
					}
					hasv_date = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { date : hasv_date ? v_date : __missing__("date"), haxeVersion : hasv_haxeVersion ? v_haxeVersion : __missing__("haxeVersion"), targets : hasv_targets ? v_targets : __missing__("targets")};
	}
	,parse1: function() {
		var _gthis = this;
		var v_compileTime = .0;
		var hasv_compileTime = false;
		var v_name = null;
		var hasv_name = false;
		var v_status = null;
		var v_time = .0;
		var hasv_time = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					this.die("Expected :");
				}
				if("time".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "time") {
					var this1 = this.parseNumber();
					v_time = parseFloat(this1.source.substring(this1.min,this1.max));
					hasv_time = true;
				} else if("status".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "status") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_status1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_status1 = true;
					} else {
						v_status1 = false;
					}
					if(v_status1) {
						v_status = null;
					} else {
						var this2 = this.parseNumber();
						v_status = Std.parseInt(this2.source.substring(this2.min,this2.max));
					}
				} else if("name".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "name") {
					var v = tink_json__$Parser_JsonString.toString(this.parseString());
					switch(v) {
					case "C#":case "C++":case "C++ (GC Gen)":case "Cppia":case "Eval":case "HashLink":case "HashLink Immix":case "HashLink/C":case "HashLink/C Immix":case "JVM":case "Java":case "Lua":case "Luajit":case "Neko":case "NodeJS":case "NodeJS (ES6)":case "PHP":case "Python":
						v_name = v;
						break;
					default:
						var list = ["C++","C++ (GC Gen)","Cppia","NodeJS","NodeJS (ES6)","Java","JVM","HashLink","HashLink/C","HashLink Immix","HashLink/C Immix","C#","PHP","Python","Eval","Lua","Luajit","Neko"];
						throw haxe_Exception.thrown(new tink_core_TypedError(422,"Unrecognized enum value: " + v + ". Accepted values are: " + new tink_json_Writer0().write(list),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 393, className : "tink.json.Parser0", methodName : "parse1"}));
					}
					hasv_name = true;
				} else if("compileTime".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "compileTime") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_compileTime1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_compileTime1 = true;
					} else {
						v_compileTime1 = false;
					}
					if(v_compileTime1) {
						v_compileTime = null;
					} else {
						var this3 = this.parseNumber();
						v_compileTime = parseFloat(this3.source.substring(this3.min,this3.max));
					}
					hasv_compileTime = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { compileTime : hasv_compileTime ? v_compileTime : __missing__("compileTime"), name : hasv_name ? v_name : __missing__("name"), status : v_status, time : hasv_time ? v_time : __missing__("time")};
	}
	,parse: function(source) {
		this.init(source);
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected [");
		}
		var __ret = [];
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			while(true) {
				__ret.push(this.parse0());
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected ]");
			}
		}
		var rep = __ret;
		try {
			var this1 = rep;
			return tink_pure_List.ofRepresentation(this1);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			return this.die(Std.string(e),__start__);
		}
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			var ret = _gthis.parse(source);
			while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
			if(_gthis.pos < _gthis.max) {
				_gthis.die("Invalid data after JSON document");
			}
			return ret;
		},null,{ fileName : "tink/json/macros/Macro.hx", lineNumber : 99, className : "tink.json.Parser0", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser0
});
var tink_json_Representation = {};
tink_json_Representation.get = function(this1) {
	return this1;
};
tink_json_Representation._new = function(v) {
	var this1 = v;
	return this1;
};
tink_json_Representation.of = function(v) {
	return v;
};
var tink_json_Value = $hxEnums["tink.json.Value"] = { __ename__ : true, __constructs__ : ["VNumber","VString","VNull","VBool","VArray","VObject"]
	,VNumber: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["f"],$_)
	,VString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VNull: {_hx_index:2,__enum__:"tink.json.Value",toString:$estr}
	,VBool: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["b"],$_)
	,VArray: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
	,VObject: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
};
var tink_json_Writer = function() { };
tink_json_Writer.__name__ = true;
var tink_json_BasicWriter = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicWriter.__name__ = true;
tink_json_BasicWriter.prototype = {
	plugins: null
	,buf: null
	,init: function() {
		var this1 = "";
		this.buf = this1;
	}
	,output: function(s) {
		this.buf += s;
	}
	,char: function(c) {
		this.buf += String.fromCodePoint(c);
	}
	,writeInt: function(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	,writeFloat: function(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	,writeBool: function(b) {
		this.buf += b ? "true" : "false";
	}
	,writeString: function(s) {
		var s1 = JSON.stringify(s);
		this.buf += s1;
	}
	,writeDynamic: function(value) {
		var s = JSON.stringify(value);
		this.buf += s;
	}
	,writeValue: function(value) {
		var _gthis = this;
		switch(value._hx_index) {
		case 0:
			var f = value.f;
			this.buf += f == null ? "null" : "" + f;
			break;
		case 1:
			var s = value.s;
			var s1 = JSON.stringify(s);
			this.buf += s1;
			break;
		case 2:
			this.buf += "null";
			break;
		case 3:
			var b = value.b;
			this.buf += b ? "true" : "false";
			break;
		case 4:
			var _g = value.a;
			if(_g.length == 0) {
				this.buf += "[]";
			} else {
				var a = _g;
				this.buf += String.fromCodePoint(91);
				this.writeValue(a[0]);
				var _g = 1;
				var _g1 = a.length;
				while(_g < _g1) {
					var i = _g++;
					this.buf += String.fromCodePoint(44);
					this.writeValue(a[i]);
				}
				this.buf += String.fromCodePoint(93);
			}
			break;
		case 5:
			var _g = value.a;
			if(_g.length == 0) {
				this.buf += "{}";
			} else {
				var a = _g;
				this.buf += String.fromCodePoint(123);
				var p = a[0];
				var s = JSON.stringify(p.name);
				_gthis.buf += s;
				_gthis.buf += String.fromCodePoint(58);
				_gthis.writeValue(p.value);
				var _g = 1;
				var _g1 = a.length;
				while(_g < _g1) {
					var i = _g++;
					this.buf += String.fromCodePoint(44);
					var p = a[i];
					var s = JSON.stringify(p.name);
					_gthis.buf += s;
					_gthis.buf += String.fromCodePoint(58);
					_gthis.writeValue(p.value);
				}
				this.buf += String.fromCodePoint(125);
			}
			break;
		}
	}
	,expandScientificNotation: function(v) {
		var _g = v.toLowerCase().split("e");
		switch(_g.length) {
		case 1:
			var d = _g[0];
			return d;
		case 2:
			var e = _g[1];
			var d = _g[0];
			var _g = d.split(".");
			switch(_g.length) {
			case 1:
				var v = _g[0];
				return v + StringTools.rpad("","0",Std.parseInt(e));
			case 2:
				var f = _g[1];
				var d = _g[0];
				return d + StringTools.rpad(f,"0",Std.parseInt(e));
			default:
				throw haxe_Exception.thrown("Invalid value");
			}
			break;
		default:
			throw haxe_Exception.thrown("Invalid value");
		}
	}
	,__class__: tink_json_BasicWriter
};
var tink_json__$Writer_StringBuf = {};
tink_json__$Writer_StringBuf._new = function() {
	var this1 = "";
	return this1;
};
tink_json__$Writer_StringBuf.addChar = function(this1,c) {
	this1 += String.fromCodePoint(c);
};
tink_json__$Writer_StringBuf.add = function(this1,s) {
	this1 += s;
};
var tink_json__$Writer_StdWriter = function() { };
tink_json__$Writer_StdWriter.__name__ = true;
tink_json__$Writer_StdWriter.stringify = function(v) {
	return haxe_format_JsonPrinter.print(v);
};
var tink_json_Writer0 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer0.__name__ = true;
tink_json_Writer0.__super__ = tink_json_BasicWriter;
tink_json_Writer0.prototype = $extend(tink_json_BasicWriter.prototype,{
	write: function(value) {
		this.init();
		this.buf += String.fromCodePoint(91);
		var first = true;
		var _g = 0;
		while(_g < value.length) {
			var value1 = value[_g];
			++_g;
			if(first) {
				first = false;
			} else {
				this.buf += String.fromCodePoint(44);
			}
			var value2 = value1;
			var s = JSON.stringify(value2);
			this.buf += s;
		}
		this.buf += String.fromCodePoint(93);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer0
});
var tink_macro_Bouncer = function() { };
tink_macro_Bouncer.__name__ = true;
tink_macro_Bouncer.makeOuter = function(a) {
	return null;
};
var tink_macro_DirectType = function() { };
tink_macro_DirectType.__name__ = true;
var tink_pure_FilterResult = {};
tink_pure_FilterResult.include = function(this1) {
	return this1 > 0;
};
tink_pure_FilterResult.stop = function(this1) {
	return (this1 & 3) == 3;
};
tink_pure_FilterResult.fromBool = function(b) {
	if(b) {
		return 1;
	} else {
		return 0;
	}
};
var tink_pure_List = {};
tink_pure_List.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
tink_pure_List.first = function(this1,predicate) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate == null || predicate(x)) {
			return haxe_ds_Option.Some(x);
		}
	}
	return haxe_ds_Option.None;
};
tink_pure_List.last = function(this1,predicate) {
	if(this1 == null) {
		return haxe_ds_Option.None;
	} else if(predicate == null) {
		var _last = null;
		_last = function(v) {
			var _g = v.tails;
			if(_g.length == 0) {
				return haxe_ds_Option.Some(v.value);
			} else {
				var tails = _g;
				return _last(tails[tails.length - 1]);
			}
		};
		return _last(this1);
	} else {
		var found = false;
		var ret = null;
		var _g = new tink_pure_NodeIterator(this1);
		while(_g.list.length > 0) {
			var x = _g.next();
			if(predicate(x)) {
				found = true;
				ret = x;
			}
		}
		if(found) {
			return haxe_ds_Option.Some(ret);
		} else {
			return haxe_ds_Option.None;
		}
	}
};
tink_pure_List.get = function(this1,index) {
	if(index < 0) {
		return haxe_ds_Option.None;
	}
	var iter = new tink_pure_NodeIterator(this1);
	var v = null;
	while(index-- >= 0) {
		if(iter.list.length <= 0) {
			return haxe_ds_Option.None;
		}
		v = iter.next();
	}
	return haxe_ds_Option.Some(v);
};
tink_pure_List._new = function() {
	var this1 = null;
	return this1;
};
tink_pure_List.node = function(this1) {
	return this1;
};
tink_pure_List.concat = function(this1,that) {
	if(this1 == null) {
		return that;
	} else if(that == null) {
		return this1;
	} else {
		return new tink_pure__$List_Node(this1.length + (that == null ? 0 : that.length),this1.value,this1.tails.concat([that]));
	}
};
tink_pure_List.sort = function(this1,compare) {
	var arr = tink_pure_List.toArray(this1);
	arr.sort(compare);
	return tink_pure_List.fromArray(arr);
};
tink_pure_List.append = function(this1,value) {
	if(this1 == null) {
		return new tink_pure__$List_Node(1,value);
	} else {
		return new tink_pure__$List_Node(this1.length + 1,this1.value,this1.tails.concat([new tink_pure__$List_Node(1,value)]));
	}
};
tink_pure_List.prepend = function(this1,value) {
	if(this1 == null) {
		return new tink_pure__$List_Node(1,value);
	} else {
		return new tink_pure__$List_Node(this1.length + 1,value,[this1]);
	}
};
tink_pure_List.replace = function(this1,select,generate) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var v = _g1.next();
		if(select(v)) {
			_g.push(generate(v));
		} else {
			_g.push(v);
		}
	}
	return tink_pure_List.fromArray(_g);
};
tink_pure_List.exists = function(this1,predicate) {
	var ret = false;
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate(x)) {
			ret = true;
			break;
		}
	}
	return ret;
};
tink_pure_List.count = function(this1,predicate) {
	var ret = 0;
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		if(predicate(x)) {
			++ret;
		}
	}
	return ret;
};
tink_pure_List.iterator = function(this1) {
	return new tink_pure_NodeIterator(this1);
};
tink_pure_List.toIterable = function(this1) {
	var _e = this1;
	return { iterator : function() {
		return new tink_pure_NodeIterator(_e);
	}};
};
tink_pure_List.filter = function(this1,f) {
	if(this1 == null) {
		return null;
	} else {
		return this1.filter(f);
	}
};
tink_pure_List.map = function(this1,f) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var i = _g1.next();
		_g.push(f(i));
	}
	return tink_pure_List.fromArray(_g);
};
tink_pure_List.select = function(this1,f) {
	var arr = [];
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var i = _g.next();
		var _g1 = f(i);
		switch(_g1._hx_index) {
		case 0:
			var v = _g1.v;
			arr.push(v);
			break;
		case 1:
			break;
		}
	}
	return tink_pure_List.fromArray(arr);
};
tink_pure_List.fold = function(this1,f,first) {
	var _g = new tink_pure_NodeIterator(this1);
	while(_g.list.length > 0) {
		var x = _g.next();
		first = f(x,first);
	}
	return first;
};
tink_pure_List.single = function(v) {
	return new tink_pure__$List_Node(1,v);
};
tink_pure_List.toArray = function(this1) {
	var _g = [];
	var _g1 = new tink_pure_NodeIterator(this1);
	while(_g1.list.length > 0) {
		var v = _g1.next();
		_g.push(v);
	}
	return _g;
};
tink_pure_List.fromArray = function(i) {
	var ret = null;
	var len = 0;
	var pos = i.length;
	while(pos-- > 0) ret = new tink_pure__$List_Node(++len,i[pos],ret == null ? tink_pure__$List_Node.EMPTY : [ret]);
	return ret;
};
tink_pure_List.toRepresentation = function(this1) {
	var this2 = tink_pure_List.toArray(this1);
	return this2;
};
tink_pure_List.ofRepresentation = function(rep) {
	return tink_pure_List.fromArray(tink_json_Representation.get(rep));
};
var tink_pure__$List_Node = function(length,value,tails) {
	this.value = value;
	this.length = length;
	this.tails = tails == null ? tink_pure__$List_Node.EMPTY : tails;
};
tink_pure__$List_Node.__name__ = true;
tink_pure__$List_Node.prototype = {
	length: null
	,value: null
	,tails: null
	,filter: function(f) {
		var iter = new tink_pure_NodeIterator(this);
		var ret = [];
		while(iter.list.length > 0) {
			var value = iter.next();
			var res = f(value);
			if(res > 0) {
				ret.push(value);
			}
			if((res & 3) == 3) {
				break;
			}
		}
		return tink_pure_List.fromArray(ret);
	}
	,__class__: tink_pure__$List_Node
};
var tink_pure_NodeIterator = function(node) {
	this.list = [];
	if(node != null) {
		this.list.push(node);
	}
};
tink_pure_NodeIterator.__name__ = true;
tink_pure_NodeIterator.prototype = {
	list: null
	,hasNext: function() {
		return this.list.length > 0;
	}
	,next: function() {
		var _g = this.list.pop();
		if(_g == null) {
			return null;
		} else {
			var next = _g;
			var _g = -next.tails.length;
			var _g1 = 0;
			while(_g < _g1) {
				var i = _g++;
				this.list.push(next.tails[-i - 1]);
			}
			return next.value;
		}
	}
	,__class__: tink_pure_NodeIterator
};
var tink_pure__$List_ReplaceSelector = {};
tink_pure__$List_ReplaceSelector.const = function(v) {
	return function(i) {
		return i == v;
	};
};
var tink_pure__$List_ReplaceGenerator = {};
tink_pure__$List_ReplaceGenerator.const = function(v) {
	return function(_) {
		return v;
	};
};
var tink_querystring_Pairs = {};
tink_querystring_Pairs.portions = function(s) {
	return new tink_url__$Query_QueryStringParser(s,"&","=",0);
};
tink_querystring_Pairs.portionsOfUrl = function(u) {
	return tink_querystring_Pairs.portions(u.query);
};
tink_querystring_Pairs.ofIterable = function(i) {
	return $getIterator(i);
};
var tink_state_Measurement = {};
tink_state_Measurement.get_value = function(this1) {
	return this1.a;
};
tink_state_Measurement.get_becameInvalid = function(this1) {
	return this1.b;
};
tink_state_Measurement._new = function(value,becameInvalid) {
	var this1 = new tink_core_MPair(value,becameInvalid);
	var this2 = this1;
	return this2;
};
var tink_state_Computation = {};
tink_state_Computation._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_state_Computation.perform = function(this1) {
	return this1.f();
};
tink_state_Computation.async = function(f) {
	var this1 = { f : f};
	var o = tink_state_Observable.map(tink_state_Observable.auto(this1),tink_state_Transform.plain(tink_state_Observable.ofPromise));
	var this1 = { f : function() {
		return tink_state_Observable.get_value(tink_state_Observable.get_value(o));
	}};
	return this1;
};
tink_state_Computation.asyncWithLast = function(f) {
	var last = haxe_ds_Option.None;
	var this1 = { f : function() {
		return f(last);
	}};
	var o = tink_state_Observable.map(tink_state_Observable.auto(this1),tink_state_Transform.plain(tink_state_Observable.ofPromise));
	var this1 = { f : function() {
		var ret = tink_state_Observable.get_value(tink_state_Observable.get_value(o));
		if(ret._hx_index == 1) {
			var v = ret.result;
			last = haxe_ds_Option.Some(v);
		}
		return ret;
	}};
	return this1;
};
tink_state_Computation.plain = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_state_Computation.withLast = function(f) {
	var last = haxe_ds_Option.None;
	var this1 = { f : function() {
		var ret = f(last);
		last = haxe_ds_Option.Some(ret);
		return ret;
	}};
	return this1;
};
var tink_state_ConstObservable = function(value) {
	var this1 = new tink_core_MPair(value,tink_state_ConstObservable.NEVER);
	var this2 = this1;
	this.m = this2;
};
tink_state_ConstObservable.__name__ = true;
tink_state_ConstObservable.__interfaces__ = [tink_state_ObservableObject];
tink_state_ConstObservable.prototype = {
	m: null
	,poll: function() {
		return this.m;
	}
	,isValid: function() {
		return true;
	}
	,getComparator: function() {
		return null;
	}
	,__class__: tink_state_ConstObservable
};
var tink_state__$Observable_Dependency = function() { };
tink_state__$Observable_Dependency.__name__ = true;
tink_state__$Observable_Dependency.__isInterface__ = true;
tink_state__$Observable_Dependency.prototype = {
	changed: null
	,unlink: null
	,resubscribe: null
	,__class__: tink_state__$Observable_Dependency
};
var tink_state__$Observable_DependencyOf = function(data,initial,trigger) {
	this.data = data;
	this.comparator = data.getComparator();
	this.last = initial.a;
	this.link = initial.b.handle($bind(trigger,trigger.trigger));
};
tink_state__$Observable_DependencyOf.__name__ = true;
tink_state__$Observable_DependencyOf.__interfaces__ = [tink_state__$Observable_Dependency];
tink_state__$Observable_DependencyOf.prototype = {
	data: null
	,link: null
	,comparator: null
	,last: null
	,changed: function() {
		var _g = this.comparator;
		if(_g == null) {
			return this.last != tink_state_Observable.get_value(this.data);
		} else {
			var f = _g;
			return !f(this.last,tink_state_Observable.get_value(this.data));
		}
	}
	,unlink: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,resubscribe: function(trigger) {
		var next = tink_state_Observable.measure(this.data).b.handle(function(_) {
			trigger.trigger(tink_core_Noise.Noise);
		});
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		this.link = next;
	}
	,__class__: tink_state__$Observable_DependencyOf
};
var tink_state__$ObservableMap_Update = function(key,from,to) {
	this.key = key;
	this.from = from;
	this.to = to;
};
tink_state__$ObservableMap_Update.__name__ = true;
tink_state__$ObservableMap_Update.prototype = {
	key: null
	,from: null
	,to: null
	,__class__: tink_state__$ObservableMap_Update
};
var tink_state_Progress = {};
tink_state_Progress.trigger = function() {
	return new tink_state_ProgressTrigger();
};
tink_state_Progress.make = function(f) {
	var ret = new tink_state_ProgressTrigger();
	f($bind(ret,ret.progress),$bind(ret,ret.finish));
	return ret;
};
tink_state_Progress.asFuture = function(this1) {
	return this1.result();
};
tink_state_Progress.asPromise = function(p) {
	return p.result();
};
tink_state_Progress.promise = function(v) {
	return new tink_state_PromiseProgress(v);
};
tink_state_Progress.flatten = function(v) {
	return new tink_state_FlattenProgress(v);
};
tink_state_Progress.future = function(v) {
	return new tink_state_FutureProgress(v);
};
tink_state_Progress.next = function(this1,f) {
	return tink_core_Future.next(this1.result(),f);
};
tink_state_Progress.observe = function(this1) {
	return this1.observe();
};
var tink_state_ProgressObject = function() { };
tink_state_ProgressObject.__name__ = true;
tink_state_ProgressObject.__isInterface__ = true;
tink_state_ProgressObject.prototype = {
	result: null
	,bind: null
	,observe: null
	,__class__: tink_state_ProgressObject
};
var tink_state_ProgressBase = function() { };
tink_state_ProgressBase.__name__ = true;
tink_state_ProgressBase.__interfaces__ = [tink_state_ProgressObject];
tink_state_ProgressBase.prototype = {
	result: function() {
		throw haxe_Exception.thrown("not implemented");
	}
	,bind: function(opt,f) {
		var binding = null;
		var opt1;
		if(opt == null) {
			opt1 = null;
		} else {
			var o = opt;
			var opt = o.comparator == null ? null : function(v1,v2) {
				if(v1._hx_index == 0) {
					if(v2._hx_index == 0) {
						var p1 = v1.v;
						var p2 = v2.v;
						return o.comparator(p1,p2);
					} else {
						return false;
					}
				} else {
					return false;
				}
			};
			opt1 = { direct : o.direct, comparator : opt};
		}
		binding = tink_state_Observable.bind(this.observe(),opt1,function(v) {
			switch(v._hx_index) {
			case 0:
				var p = v.v;
				tink_core_Callback.invoke(f,p);
				break;
			case 1:
				var _g = v.v;
				if(binding != null) {
					binding.cancel();
				}
				break;
			}
		});
		return binding;
	}
	,observe: function() {
		throw haxe_Exception.thrown("not implemented");
	}
	,__class__: tink_state_ProgressBase
};
var tink_state_ProgressTrigger = function() {
	var this1 = new tink_state__$State_SimpleState(tink_state_ProgressType.InProgress(tink_state_Progress.INIT),null,null);
	this.state = this1;
};
tink_state_ProgressTrigger.__name__ = true;
tink_state_ProgressTrigger.__super__ = tink_state_ProgressBase;
tink_state_ProgressTrigger.prototype = $extend(tink_state_ProgressBase.prototype,{
	state: null
	,_result: null
	,progress: function(v,total) {
		var _g = tink_state_State.get_value(this.state);
		switch(_g._hx_index) {
		case 0:
			var current = _g.v;
			var tmp;
			if(current.a == v) {
				var _g1 = current.b;
				switch(_g1._hx_index) {
				case 0:
					if(total._hx_index == 0) {
						var t1 = _g1.v;
						var t2 = total.v;
						tmp = t1 != t2;
					} else {
						tmp = true;
					}
					break;
				case 1:
					tmp = total._hx_index == 1 ? false : true;
					break;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var tmp = this.state;
				var this1 = new tink_core_MPair(v,total);
				tmp.set(tink_state_ProgressType.InProgress(this1));
			}
			break;
		case 1:
			var _g1 = _g.v;
			break;
		}
	}
	,finish: function(v) {
		var _g = tink_state_State.get_value(this.state);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			this.state.set(tink_state_ProgressType.Finished(v));
			break;
		case 1:
			var _g1 = _g.v;
			break;
		}
	}
	,result: function() {
		if(this._result == null) {
			this._result = tink_state_Observable.getNext(this.observe(),null,function(v) {
				switch(v._hx_index) {
				case 0:
					var _g = v.v;
					return haxe_ds_Option.None;
				case 1:
					var v1 = v.v;
					return haxe_ds_Option.Some(v1);
				}
			});
		}
		return this._result;
	}
	,observe: function() {
		return this.state;
	}
	,asProgress: function() {
		return this;
	}
	,__class__: tink_state_ProgressTrigger
});
var tink_state_FutureProgress = function(future) {
	this.future = future;
};
tink_state_FutureProgress.__name__ = true;
tink_state_FutureProgress.__super__ = tink_state_ProgressBase;
tink_state_FutureProgress.prototype = $extend(tink_state_ProgressBase.prototype,{
	future: null
	,state: null
	,result: function() {
		var ret = this.future.flatMap(function(p) {
			return p.result();
		});
		return ret.gather();
	}
	,observe: function() {
		var _gthis = this;
		if(this.state == null) {
			var this1 = new tink_state__$State_SimpleState(tink_state_ProgressType.InProgress(tink_state_Progress.INIT),null,null);
			this.state = this1;
			this.future.handle(function(p) {
				tink_state_Observable.bind(p.observe(),{ direct : true},($_=_gthis.state,$bind($_,$_.set)));
			});
		}
		return this.state;
	}
	,__class__: tink_state_FutureProgress
});
var tink_state_PromiseProgress = function(promise) {
	this.promise = promise;
};
tink_state_PromiseProgress.__name__ = true;
tink_state_PromiseProgress.__super__ = tink_state_ProgressBase;
tink_state_PromiseProgress.prototype = $extend(tink_state_ProgressBase.prototype,{
	promise: null
	,state: null
	,result: function() {
		return tink_core_Promise.next(this.promise,function(p) {
			var ret = p.result().map(tink_core_Outcome.Success);
			return ret.gather();
		});
	}
	,observe: function() {
		var _gthis = this;
		if(this.state == null) {
			var this1 = new tink_state__$State_SimpleState(tink_state_ProgressType.InProgress(tink_state_Progress.INIT),null,null);
			this.state = this1;
			this.promise.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var p = o.data;
					tink_state_Observable.bind(p.observe(),{ direct : true},function(v) {
						var tmp;
						switch(v._hx_index) {
						case 0:
							var v1 = v.v;
							tmp = tink_state_ProgressType.InProgress(v1);
							break;
						case 1:
							var v1 = v.v;
							tmp = tink_state_ProgressType.Finished(tink_core_Outcome.Success(v1));
							break;
						}
						_gthis.state.set(tmp);
					});
					break;
				case 1:
					var e = o.failure;
					_gthis.state.set(tink_state_ProgressType.Finished(tink_core_Outcome.Failure(e)));
					break;
				}
			});
		}
		return this.state;
	}
	,__class__: tink_state_PromiseProgress
});
var tink_state_FlattenProgress = function(promise) {
	this.promise = promise;
};
tink_state_FlattenProgress.__name__ = true;
tink_state_FlattenProgress.__super__ = tink_state_ProgressBase;
tink_state_FlattenProgress.prototype = $extend(tink_state_ProgressBase.prototype,{
	promise: null
	,state: null
	,result: function() {
		return tink_core_Promise.next(this.promise,function(p) {
			return p.result();
		});
	}
	,observe: function() {
		var _gthis = this;
		if(this.state == null) {
			var this1 = new tink_state__$State_SimpleState(tink_state_ProgressType.InProgress(tink_state_Progress.INIT),null,null);
			this.state = this1;
			this.promise.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var p = o.data;
					tink_state_Observable.bind(p.observe(),{ direct : true},($_=_gthis.state,$bind($_,$_.set)));
					break;
				case 1:
					var e = o.failure;
					_gthis.state.set(tink_state_ProgressType.Finished(tink_core_Outcome.Failure(e)));
					break;
				}
			});
		}
		return this.state;
	}
	,__class__: tink_state_FlattenProgress
});
var tink_state_Cancellable = function(progress,link) {
	this.progress = progress;
	this.link = link;
};
tink_state_Cancellable.__name__ = true;
tink_state_Cancellable.__interfaces__ = [tink_core_LinkObject,tink_state_ProgressObject];
tink_state_Cancellable.make = function(f) {
	var ret = new tink_state_ProgressTrigger();
	var binding = f($bind(ret,ret.progress),$bind(ret,ret.finish));
	return new tink_state_Cancellable(ret,binding);
};
tink_state_Cancellable.prototype = {
	progress: null
	,link: null
	,result: function() {
		return this.progress.result();
	}
	,bind: function(opt,f) {
		return this.progress.bind(opt,f);
	}
	,observe: function() {
		return this.progress.observe();
	}
	,cancel: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,asProgress: function() {
		return this.progress;
	}
	,__class__: tink_state_Cancellable
};
var tink_state_ProgressValue = {};
tink_state_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_state_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_state_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_state_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_state_UnitInterval = {};
tink_state_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_state_ProgressType = $hxEnums["tink.state.ProgressType"] = { __ename__ : true, __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.state.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.state.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var tink_state_Promised = $hxEnums["tink.state.Promised"] = { __ename__ : true, __constructs__ : ["Loading","Done","Failed"]
	,Loading: {_hx_index:0,__enum__:"tink.state.Promised",toString:$estr}
	,Done: ($_=function(result) { return {_hx_index:1,result:result,__enum__:"tink.state.Promised",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.state.Promised",toString:$estr}; },$_.__params__ = ["error"],$_)
};
var tink_state_PromisedTools = function() { };
tink_state_PromisedTools.__name__ = true;
tink_state_PromisedTools.next = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_core_Promise.ofSpecific(tink_core_Promise.NEVER);
	case 1:
		var a1 = a.result;
		return f(a1);
	case 2:
		var e = a.error;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_state_PromisedTools.map = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_state_Promised.Loading;
	case 1:
		var a1 = a.result;
		return tink_state_Promised.Done(f(a1));
	case 2:
		var e = a.error;
		return tink_state_Promised.Failed(e);
	}
};
tink_state_PromisedTools.flatMap = function(a,f) {
	switch(a._hx_index) {
	case 0:
		return tink_state_Promised.Loading;
	case 1:
		var a1 = a.result;
		return f(a1);
	case 2:
		var e = a.error;
		return tink_state_Promised.Failed(e);
	}
};
tink_state_PromisedTools.toOption = function(p) {
	if(p._hx_index == 1) {
		var data = p.result;
		return haxe_ds_Option.Some(data);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_state_PromisedTools.or = function(p,l) {
	if(p._hx_index == 1) {
		var v = p.result;
		return v;
	} else {
		return l.get();
	}
};
tink_state_PromisedTools.orNull = function(p) {
	if(p._hx_index == 1) {
		var v = p.result;
		return v;
	} else {
		return null;
	}
};
tink_state_PromisedTools.all = function(p) {
	var ret = [];
	var p1 = $getIterator(p);
	while(p1.hasNext()) {
		var p = p1.next();
		switch(p._hx_index) {
		case 0:
			return tink_state_Promised.Loading;
		case 1:
			var v = p.result;
			ret.push(v);
			break;
		case 2:
			var e = p.error;
			return tink_state_Promised.Failed(e);
		}
	}
	return tink_state_Promised.Done(ret);
};
var tink_state__$State_CompoundState = function(data,set,comparator) {
	this.data = data;
	this.update = set;
	this.comparator = comparator;
};
tink_state__$State_CompoundState.__name__ = true;
tink_state__$State_CompoundState.__interfaces__ = [tink_state__$State_StateObject];
tink_state__$State_CompoundState.prototype = {
	data: null
	,update: null
	,comparator: null
	,isValid: function() {
		return this.data.isValid();
	}
	,poll: function() {
		return tink_state_Observable.measure(this.data);
	}
	,set: function(value) {
		this.update(value);
	}
	,getComparator: function() {
		return this.comparator;
	}
	,__class__: tink_state__$State_CompoundState
};
var tink_streams_IdealStream = {};
tink_streams_IdealStream.promiseOfIdealStream = function(p) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(p));
};
tink_streams_IdealStream.promiseOfStreamNoise = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_IdealStream.collect = function(this1) {
	var buf = [];
	var ret = this1.forEach(tink_streams_Handler.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})).map(function(c) {
		return buf;
	});
	return ret.gather();
};
var tink_streams_IdealStreamBase = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_IdealStreamBase.__name__ = true;
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
tink_streams_IdealStreamBase.prototype = $extend(tink_streams_StreamBase.prototype,{
	idealize: function(rescue) {
		return this;
	}
	,__class__: tink_streams_IdealStreamBase
});
var tink_streams_RealStream = {};
tink_streams_RealStream.promiseOfIdealStream = function(p) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(p));
};
tink_streams_RealStream.promiseOfStreamNoise = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.promiseOfRealStream = function(p) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(p));
};
tink_streams_RealStream.promiseOfStreamError = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.collect = function(this1) {
	var buf = [];
	var ret = this1.forEach(tink_streams_Handler.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})).map(function(c) {
		switch(c._hx_index) {
		case 0:
			var _g = c.rest;
			throw haxe_Exception.thrown("unreachable");
		case 2:
			var e = c.error;
			return tink_core_Outcome.Failure(e);
		case 3:
			return tink_core_Outcome.Success(buf);
		}
	});
	return ret.gather();
};
var tink_streams_Stream = {};
tink_streams_Stream.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_streams_Stream.dirty = function(this1) {
	return this1;
};
tink_streams_Stream.single = function(i) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
};
tink_streams_Stream.ofIterator = function(i) {
	var next = null;
	next = function(step) {
		step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
	};
	return tink_streams_Generator.stream(next);
};
tink_streams_Stream.flatten = function(f) {
	return new tink_streams_FutureStream(f);
};
tink_streams_Stream.promiseIdeal = function(f) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(f));
};
tink_streams_Stream.promiseReal = function(f) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(f));
};
tink_streams_Stream.promise = function(f) {
	var ret = f.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var s = o.data;
			return tink_streams_Stream.dirty(s);
		case 1:
			var e = o.failure;
			return tink_streams_Stream.ofError(e);
		}
	});
	return tink_streams_Stream.flatten(ret.gather());
};
tink_streams_Stream.ofError = function(e) {
	return new tink_streams__$Stream_ErrorStream(e);
};
var tink_streams_RegroupStatus = $hxEnums["tink.streams.RegroupStatus"] = { __ename__ : true, __constructs__ : ["Flowing","Errored","Ended"]
	,Flowing: {_hx_index:0,__enum__:"tink.streams.RegroupStatus",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.RegroupStatus",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Ended: {_hx_index:2,__enum__:"tink.streams.RegroupStatus",toString:$estr}
};
var tink_streams_RegroupResult = $hxEnums["tink.streams.RegroupResult"] = { __ename__ : true, __constructs__ : ["Converted","Terminated","Untouched","Errored"]
	,Converted: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Terminated: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Untouched: {_hx_index:2,__enum__:"tink.streams.RegroupResult",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Regrouper = {};
tink_streams_Regrouper.ofIgnorance = function(f) {
	return { apply : function(i,_) {
		return f(i);
	}};
};
tink_streams_Regrouper.ofIgnoranceSync = function(f) {
	return { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	}};
};
tink_streams_Regrouper.ofFunc = function(f) {
	return { apply : f};
};
tink_streams_Regrouper.ofFuncSync = function(f) {
	return { apply : function(i,s) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
	}};
};
var tink_streams__$Stream_CompoundStream = function(parts) {
	tink_streams_StreamBase.call(this);
	this.parts = parts;
};
tink_streams__$Stream_CompoundStream.__name__ = true;
tink_streams__$Stream_CompoundStream.consumeParts = function(parts,handler,cb) {
	if(parts.length == 0) {
		cb(tink_streams_Conclusion.Depleted);
	} else {
		parts[0].forEach(handler).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var rest = o.rest;
				parts = parts.slice();
				parts[0] = rest;
				cb(tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts)));
				break;
			case 1:
				var at = o.at;
				var e = o.error;
				if(at.get_depleted()) {
					parts = parts.slice(1);
				} else {
					parts = parts.slice();
					parts[0] = at;
				}
				cb(tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts)));
				break;
			case 2:
				var e = o.error;
				cb(tink_streams_Conclusion.Failed(e));
				break;
			case 3:
				tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
				break;
			}
		});
	}
};
tink_streams__$Stream_CompoundStream.of = function(streams) {
	var ret = [];
	var _g = 0;
	while(_g < streams.length) {
		var s = streams[_g];
		++_g;
		s.decompose(ret);
	}
	if(ret.length == 0) {
		return tink_streams_Empty.inst;
	} else {
		return new tink_streams__$Stream_CompoundStream(ret);
	}
};
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CompoundStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	parts: null
	,get_depleted: function() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	,next: function() {
		var _gthis = this;
		if(this.parts.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
		} else {
			var ret = this.parts[0].next().flatMap(function(v) {
				switch(v._hx_index) {
				case 0:
					var rest = v.next;
					var v1 = v.value;
					var copy = _gthis.parts.slice();
					copy[0] = rest;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(v1,new tink_streams__$Stream_CompoundStream(copy))));
				case 2:
					if(_gthis.parts.length > 1) {
						return _gthis.parts[1].next();
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
					}
					break;
				default:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
				}
			});
			return ret.gather();
		}
	}
	,decompose: function(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	,forEach: function(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core_Future.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
	,__class__: tink_streams__$Stream_CompoundStream
});
var tink_streams__$Stream_RegroupStream = function(source,f,prev) {
	if(prev == null) {
		prev = tink_streams_Empty.inst;
	}
	var ret = null;
	var terminated = false;
	var buf = [];
	var ret1 = source.forEach(tink_streams_Handler.ofUnknown(function(item) {
		buf.push(item);
		var ret1 = f.apply(buf,tink_streams_RegroupStatus.Flowing).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				ret = v;
				return tink_streams_Handled.Finish;
			case 1:
				var v = o.data;
				var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
				if(v._hx_index == 0) {
					var v1 = v.v;
					ret = v1;
				} else {
					ret = l.get();
				}
				terminated = true;
				return tink_streams_Handled.Finish;
			case 2:
				return tink_streams_Handled.Resume;
			case 3:
				var e = o.e;
				return tink_streams_Handled.Clog(e);
			}
		});
		return ret1.gather();
	})).map(function(o) {
		switch(o._hx_index) {
		case 0:
			if(terminated) {
				return ret;
			} else {
				var rest = o.rest;
				return new tink_streams__$Stream_RegroupStream(rest,f,ret);
			}
			break;
		case 1:
			var rest = o.at;
			var e = o.error;
			return new tink_streams__$Stream_CloggedStream(tink_streams_Stream.ofError(e),rest);
		case 2:
			var e = o.error;
			return tink_streams_Stream.ofError(e);
		case 3:
			if(buf.length == 0) {
				return tink_streams_Empty.inst;
			} else {
				var ret1 = f.apply(buf,tink_streams_RegroupStatus.Ended).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						return v;
					case 1:
						var v = o.data;
						var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
						if(v._hx_index == 0) {
							var v1 = v.v;
							return v1;
						} else {
							return l.get();
						}
						break;
					case 2:
						return tink_streams_Empty.inst;
					case 3:
						var e = o.e;
						return tink_streams_Stream.ofError(e);
					}
				});
				return tink_streams_Stream.flatten(ret1.gather());
			}
			break;
		}
	});
	var next = tink_streams_Stream.flatten(ret1.gather());
	tink_streams__$Stream_CompoundStream.call(this,[prev,next]);
};
tink_streams__$Stream_RegroupStream.__name__ = true;
tink_streams__$Stream_RegroupStream.__super__ = tink_streams__$Stream_CompoundStream;
tink_streams__$Stream_RegroupStream.prototype = $extend(tink_streams__$Stream_CompoundStream.prototype,{
	__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : true, __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
var tink_streams__$Stream_CloggedStream = function(rest,error) {
	tink_streams_StreamBase.call(this);
	this.rest = rest;
	this.error = error;
};
tink_streams__$Stream_CloggedStream.__name__ = true;
tink_streams__$Stream_CloggedStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CloggedStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	rest: null
	,error: null
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(this.error,this.rest)));
	}
	,__class__: tink_streams__$Stream_CloggedStream
});
var tink_streams__$Stream_ErrorStream = function(error) {
	tink_streams_StreamBase.call(this);
	this.error = error;
};
tink_streams__$Stream_ErrorStream.__name__ = true;
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_ErrorStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	error: null
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
	,__class__: tink_streams__$Stream_ErrorStream
});
var tink_streams_Mapping = {};
tink_streams_Mapping._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams_Mapping.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this1 = tink_core_Promise.next(n(i[0]),function(o) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(tink_streams_Stream.single(o)))));
		});
		var f = tink_core_Recover.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Mapping.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(function(o) {
			return tink_streams_RegroupResult.Converted(tink_streams_Stream.single(o));
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Mapping.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			var v1 = _g.data;
			v = tink_streams_RegroupResult.Converted(tink_streams_Stream.single(v1));
			break;
		case 1:
			var e = _g.failure;
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams_Mapping.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(tink_streams_Stream.single(f(i[0])))));
	}};
	return this1;
};
var tink_streams_Filter = {};
tink_streams_Filter._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams_Filter.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this1 = tink_core_Promise.next(n(i[0]),function(matched) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(matched ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst))));
		});
		var f = tink_core_Recover.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Filter.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(function(matched) {
			return tink_streams_RegroupResult.Converted(matched ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst);
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Filter.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			var v1 = _g.data;
			v = tink_streams_RegroupResult.Converted(v1 ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst);
			break;
		case 1:
			var e = _g.failure;
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams_Filter.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]) ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst)));
	}};
	return this1;
};
var tink_streams_IdealizeStream = function(target,rescue) {
	tink_streams_IdealStreamBase.call(this);
	this.target = target;
	this.rescue = rescue;
};
tink_streams_IdealizeStream.__name__ = true;
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
tink_streams_IdealizeStream.prototype = $extend(tink_streams_IdealStreamBase.prototype,{
	target: null
	,rescue: null
	,get_depleted: function() {
		return this.target.get_depleted();
	}
	,next: function() {
		var _gthis = this;
		var ret = this.target.next().flatMap(function(v) {
			if(v._hx_index == 1) {
				var e = v.e;
				return _gthis.rescue(e).idealize(_gthis.rescue).next();
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}
		});
		return ret.gather();
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end._hx_index) {
				case 0:
					var rest = end.rest;
					cb(tink_streams_Conclusion.Halted(rest.idealize(_gthis.rescue)));
					break;
				case 1:
					var at = end.at;
					var e = end.error;
					cb(tink_streams_Conclusion.Clogged(e,at.idealize(_gthis.rescue)));
					break;
				case 2:
					var e = end.error;
					_gthis.rescue(e).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
	,__class__: tink_streams_IdealizeStream
});
var tink_streams_Single = function(value) {
	tink_streams_StreamBase.call(this);
	this.value = value;
};
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
tink_streams_Single.prototype = $extend(tink_streams_StreamBase.prototype,{
	value: null
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(this.value.get(),tink_streams_Empty.inst)));
	}
	,forEach: function(handle) {
		var _gthis = this;
		var ret = handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step.e;
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
	,__class__: tink_streams_Single
});
var tink_streams_Handler = {};
tink_streams_Handler._new = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Handler.apply = function(this1,item) {
	return this1(item);
};
tink_streams_Handler.ofSafeSync = function(f) {
	var this1 = function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
	return this1;
};
tink_streams_Handler.ofUnknownSync = function(f) {
	var this1 = function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
	return this1;
};
tink_streams_Handler.ofSafe = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Handler.ofUnknown = function(f) {
	var this1 = f;
	return this1;
};
var tink_streams_Reducer = {};
tink_streams_Reducer._new = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Reducer.apply = function(this1,res,item) {
	return this1(res,item);
};
tink_streams_Reducer.ofSafeSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
	return this1;
};
tink_streams_Reducer.ofUnknownSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
	return this1;
};
tink_streams_Reducer.ofSafe = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Reducer.ofPlainSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
	};
	return this1;
};
tink_streams_Reducer.ofUnknown = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Reducer.ofPromiseBased = function(f) {
	var this1 = function(res,cur) {
		var ret = f(res,cur).map(function(s) {
			switch(s._hx_index) {
			case 0:
				var r = s.data;
				return tink_streams_ReductionStep.Progress(r);
			case 1:
				var e = s.failure;
				return tink_streams_ReductionStep.Crash(e);
			}
		});
		return ret.gather();
	};
	return this1;
};
var tink_streams_FutureStream = function(f) {
	tink_streams_StreamBase.call(this);
	this.f = f;
};
tink_streams_FutureStream.__name__ = true;
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
tink_streams_FutureStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	f: null
	,next: function() {
		var ret = this.f.flatMap(function(s) {
			return s.next();
		});
		return ret.gather();
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
	,__class__: tink_streams_FutureStream
});
var tink_streams_BlendStream = function(a,b) {
	var first = null;
	var wait = function(s) {
		var ret = s.next().map(function(o) {
			if(first == null) {
				first = s;
			}
			return o;
		});
		return ret.gather();
	};
	var n1 = wait(a);
	var n2 = wait(b);
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		tink_core_Future.first(n1,n2).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var rest = o.next;
				var item = o.value;
				cb(tink_streams_Step.Link(item,new tink_streams_BlendStream(rest,first == a ? b : a)));
				break;
			case 1:
				var e = o.e;
				cb(tink_streams_Step.Fail(e));
				break;
			case 2:
				(first == a ? n2 : n1).handle(cb);
				break;
			}
		});
	}));
};
tink_streams_BlendStream.__name__ = true;
tink_streams_BlendStream.__super__ = tink_streams_Generator;
tink_streams_BlendStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_BlendStream
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : true, __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
var tink_streams_SignalStream = function(signal) {
	var ret = tink_core_Signal.nextTime(signal).map(function(o) {
		switch(o._hx_index) {
		case 0:
			var data = o.data;
			return tink_streams_Step.Link(data,new tink_streams_SignalStream(signal));
		case 1:
			var e = o.e;
			return tink_streams_Step.Fail(e);
		case 2:
			return tink_streams_Step.End;
		}
	});
	tink_streams_Generator.call(this,ret.gather());
};
tink_streams_SignalStream.__name__ = true;
tink_streams_SignalStream.__super__ = tink_streams_Generator;
tink_streams_SignalStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_SignalStream
});
var tink_streams_Yield = $hxEnums["tink.streams.Yield"] = { __ename__ : true, __constructs__ : ["Data","Fail","End"]
	,Data: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Yield",toString:$estr}
};
var tink_url_Auth = {};
tink_url_Auth._new = function(user,password) {
	var this1 = "" + user + ":" + password;
	return this1;
};
tink_url_Auth.get_user = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[0];
	}
};
tink_url_Auth.get_password = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[1];
	}
};
tink_url_Auth.toString = function(this1) {
	if(this1 == null) {
		return "";
	} else {
		return "" + this1 + "@";
	}
};
var tink_url_Host = {};
tink_url_Host._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw haxe_Exception.thrown("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
tink_url_Host.get_name = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			return v.split(":")[0];
		case 2:
			var _g1 = _g[1];
			var v = _g[0];
			return v + "]";
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.get_port = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			var _g1 = v.split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				var p = _g1;
				return Std.parseInt(p);
			}
			break;
		case 2:
			var _g1 = _g[0];
			var v = _g[1];
			var _g = v.split(":")[1];
			if(_g == null) {
				return null;
			} else {
				var p = _g;
				return Std.parseInt(p);
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.toString = function(this1) {
	return this1;
};
var tink_url_Path = {};
tink_url_Path.parts = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split("/");
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		if(p != "") {
			var this1 = p;
			_g.push(this1);
		}
	}
	return _g;
};
tink_url_Path.get_absolute = function(this1) {
	return this1.charAt(0) == "/";
};
tink_url_Path.get_isDir = function(this1) {
	return this1.charAt(this1.length - 1) == "/";
};
tink_url_Path._new = function(s) {
	var this1 = s;
	return this1;
};
tink_url_Path.join = function(this1,that) {
	if(that == "") {
		return this1;
	} else if(that.charAt(0) == "/") {
		return that;
	} else if(this1.charAt(this1.length - 1) == "/") {
		return tink_url_Path.ofString(this1 + that);
	} else {
		var _g = this1.lastIndexOf("/");
		if(_g == -1) {
			return that;
		} else {
			var v = _g;
			return tink_url_Path.ofString(HxOverrides.substr(this1,0,v + 1) + (that == null ? "null" : that));
		}
	}
};
tink_url_Path.ofString = function(s) {
	var this1 = tink_url_Path.normalize(s);
	return this1;
};
tink_url_Path.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var part = _g1[_g];
		++_g;
		var _g2 = StringTools.trim(part);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			var v = _g2;
			parts.push(v);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g = 0;
		var _g1 = up;
		while(_g < _g1) {
			var i = _g++;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
tink_url_Path.toString = function(this1) {
	return this1;
};
var tink_url_Portion = {};
tink_url_Portion.get_raw = function(this1) {
	return this1;
};
tink_url_Portion.isValid = function(this1) {
	if(this1 != null) {
		try {
			decodeURIComponent(this1.split("+").join(" "));
			return true;
		} catch( _g ) {
			return false;
		}
	} else {
		return true;
	}
};
tink_url_Portion._new = function(v) {
	var this1 = v;
	return this1;
};
tink_url_Portion.stringly = function(this1) {
	return tink_url_Portion.toString(this1);
};
tink_url_Portion.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		try {
			return decodeURIComponent(this1.split("+").join(" "));
		} catch( _g ) {
			return "";
		}
	}
};
tink_url_Portion.ofString = function(s) {
	var this1 = s == null ? "" : encodeURIComponent(s);
	return this1;
};
var tink_url_PortionArray = {};
tink_url_PortionArray.toStringArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var p = this1[_g1];
		++_g1;
		_g.push(tink_url_Portion.toString(p));
	}
	return _g;
};
var tink_url_Query = {};
tink_url_Query.parse = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.with = function(this1,values) {
	var this2 = [];
	var ret = this2;
	var _g = [];
	var key = values.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		_g.push(key1);
	}
	var insert = _g;
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		if(values.exists(tink_url_Portion.ofString(p1.name))) {
			ret.push(tink_url_Portion.ofString(p1.name) + "=" + values.get(tink_url_Portion.ofString(p1.name)));
			HxOverrides.remove(insert,tink_url_Portion.ofString(p1.name));
		} else {
			ret.push(tink_url_Portion.ofString(p1.name) + "=" + p1.value);
		}
	}
	var _g = 0;
	while(_g < insert.length) {
		var name = insert[_g];
		++_g;
		ret.push(name + "=" + values.get(name));
	}
	return ret.join("&");
};
tink_url_Query.iterator = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		_g.h[p1.name.toString()] = p1.value;
	}
	return _g;
};
tink_url_Query.ofObj = function(v) {
	var this1 = [];
	var ret = this1;
	var v1 = v;
	var _g = 0;
	var _g1 = Reflect.fields(v1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		ret.push(tink_url_Portion.ofString(k) + "=" + tink_url_Portion.ofString(v1[k]));
	}
	return ret.join("&");
};
tink_url_Query.toString = function(this1) {
	return this1;
};
tink_url_Query.build = function() {
	var this1 = [];
	return this1;
};
tink_url_Query.parseString = function(s,sep,set,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(set == null) {
		set = "=";
	}
	if(sep == null) {
		sep = "&";
	}
	return new tink_url__$Query_QueryStringParser(s,sep,set,pos);
};
var tink_url_QueryStringBuilder = {};
tink_url_QueryStringBuilder._new = function() {
	var this1 = [];
	return this1;
};
tink_url_QueryStringBuilder.add = function(this1,name,value) {
	this1.push(name + "=" + value);
	return this1;
};
tink_url_QueryStringBuilder.toString = function(this1,sep) {
	if(sep == null) {
		sep = "&";
	}
	return this1.join(sep);
};
tink_url_QueryStringBuilder.copy = function(this1) {
	return this1.slice();
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		var this1 = "";
		return this1;
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	var this1 = s.substring(start,end);
	return this1;
};
tink_url__$Query_QueryStringParser.prototype = {
	s: null
	,sep: null
	,set: null
	,pos: null
	,hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url_Portion.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url_Portion.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url_Portion.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	,__class__: tink_url__$Query_QueryStringParser
};
var tink_web_Response = {};
tink_web_Response._new = function(header,body) {
	var this1 = new tink_http_Message(header,body);
	return this1;
};
tink_web_Response.getData = function(this1) {
	return this1.body;
};
var tink_web_forms_FormField = {};
tink_web_forms_FormField.getValue = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		return v;
	case 1:
		var _g = this1.handle;
		throw haxe_Exception.thrown("expected plain value but received file");
	}
};
tink_web_forms_FormField.toFloat = function(this1) {
	return tink_Stringly.toFloat(tink_web_forms_FormField.getValue(this1));
};
tink_web_forms_FormField.toInt = function(this1) {
	return tink_Stringly.toInt(tink_web_forms_FormField.getValue(this1));
};
tink_web_forms_FormField.toString = function(this1) {
	return tink_web_forms_FormField.getValue(this1);
};
tink_web_forms_FormField.getFile = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var _g = this1.v;
		throw haxe_Exception.thrown("expected file but got plain value");
	case 1:
		var u = this1.handle;
		var this1 = u;
		return this1;
	}
};
var tink_web_forms_FormFile = {};
tink_web_forms_FormFile._new = function(v) {
	var this1 = v;
	return this1;
};
tink_web_forms_FormFile.toJson = function(this1) {
	var this2 = this1.fileName;
	var this3 = this1.mimeType;
	var src = this1.read();
	var chunk = null;
	var write = tink_io_RealSourceTools.all(src).handle(function(c) {
		chunk = tink_core_OutcomeTools.sure(c);
	});
	var v;
	if(chunk != null) {
		v = chunk.toBytes();
	} else {
		if(write != null) {
			write.cancel();
		}
		throw haxe_Exception.thrown(new tink_core_TypedError(501,"Can only upload files through JSON backed by with sync sources but got a " + Std.string(src),{ fileName : "tink/web/forms/FormFile.hx", lineNumber : 34, className : "tink.web.forms._FormFile.FormFile_Impl_", methodName : "toJson"}));
	}
	var this1 = { fileName : this2, mimeType : this3, content : v};
	return this1;
};
tink_web_forms_FormFile.ofJson = function(rep) {
	var data = tink_json_Representation.get(rep);
	var this1 = tink_http_UploadedFile.ofBlob(data.fileName,data.mimeType,data.content);
	return this1;
};
tink_web_forms_FormFile.ofBlob = function(name,type,data) {
	return tink_http_UploadedFile.ofBlob(name,type,data);
};
var tink_web_proxy_Remote = function() { };
tink_web_proxy_Remote.__name__ = true;
var tink_web_proxy_RemoteEndpoint = {};
tink_web_proxy_RemoteEndpoint.get_host = function(this1) {
	return this1.host;
};
tink_web_proxy_RemoteEndpoint.get_pathSuffix = function(this1) {
	return this1.pathSuffix;
};
tink_web_proxy_RemoteEndpoint.get_headers = function(this1) {
	var _g = this1.headers;
	if(_g == null) {
		return tink_web_proxy_RemoteEndpoint.NO_HEADERS;
	} else {
		var v = _g;
		return v;
	}
};
tink_web_proxy_RemoteEndpoint.get_path = function(this1) {
	var _g = this1.path;
	if(_g == null) {
		return tink_web_proxy_RemoteEndpoint.NO_PATH;
	} else {
		var v = _g;
		return v;
	}
};
tink_web_proxy_RemoteEndpoint.get_query = function(this1) {
	return this1.query;
};
tink_web_proxy_RemoteEndpoint._new = function(host,pathSuffix) {
	var this1;
	if(pathSuffix == null) {
		this1 = "";
	} else {
		var v = pathSuffix;
		this1 = v;
	}
	var this2 = { host : host, pathSuffix : this1};
	return this2;
};
tink_web_proxy_RemoteEndpoint.concat = function(a,b) {
	if(a == null) {
		var r = b;
		return r;
	} else if(b == null) {
		var r = a;
		return r;
	} else {
		return a.concat(b);
	}
};
tink_web_proxy_RemoteEndpoint.sub = function(this1,options) {
	return { host : this1.host, pathSuffix : this1.pathSuffix, headers : tink_web_proxy_RemoteEndpoint.concat(this1.headers,options.headers), query : tink_web_proxy_RemoteEndpoint.concat(this1.query,options.query), path : tink_web_proxy_RemoteEndpoint.concat(this1.path,options.path)};
};
tink_web_proxy_RemoteEndpoint.uri = function(this1) {
	var _g = this1.path;
	var tmp;
	if(_g == null) {
		tmp = "";
	} else {
		var v = _g;
		tmp = tink_url_Path.normalize(v.join("/"));
	}
	return "/" + tmp + this1.pathSuffix + (this1.query == null ? "null" : tink_web_proxy_QueryParams.toString(this1.query));
};
tink_web_proxy_RemoteEndpoint.request = function(this1,client,method,body,reader) {
	return tink_core_Promise.next(client.request(new tink_http_OutgoingRequest(new tink_http_OutgoingRequestHeader(method,tink_Url.fromString("//" + (this1.host == null ? "null" : this1.host) + tink_web_proxy_RemoteEndpoint.uri(this1)),null,this1.headers),body)),function(response) {
		return (tink_web_proxy_ResponseReader.withHeader(reader,response.header))(response.body);
	});
};
tink_web_proxy_RemoteEndpoint.fromHost = function(host) {
	return tink_web_proxy_RemoteEndpoint._new(host);
};
tink_web_proxy_RemoteEndpoint.ofUrl = function(u) {
	var tmp = tink_web_proxy_RemoteEndpoint._new(u.hosts[0],u.hash);
	var tmp1;
	var _g = u.auth;
	if(_g == null) {
		tmp1 = null;
	} else {
		var v = _g;
		tmp1 = [new tink_http_HeaderField("authorization",tink_http_HeaderValue.basicAuth(v == null ? null : v.split(":")[0],v == null ? null : v.split(":")[1]))];
	}
	var tmp2 = tink_url_Path.parts(u.path);
	var _g = [];
	var p = new tink_url__$Query_QueryStringParser(u.query,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		_g.push(new tink_core_NamedWith(tink_url_Portion.ofString(p1.name),p1.value));
	}
	return tink_web_proxy_RemoteEndpoint.sub(tmp,{ headers : tmp1, path : tmp2, query : _g});
};
var tink_web_proxy_ResponseReader = {};
tink_web_proxy_ResponseReader.withHeader = function(this1,header) {
	var _g = this1;
	var a1 = header;
	return function(a2) {
		return _g(a1,a2);
	};
};
tink_web_proxy_ResponseReader.ofStringReader = function(read) {
	return function(header,body) {
		return tink_core_Promise.next(tink_io_RealSourceTools.all(body),function(chunk) {
			if(header.statusCode >= 400) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(header.statusCode,header.reason,chunk.toString(),{ fileName : "tink/web/proxy/Remote.hx", lineNumber : 183, className : "tink.web.proxy._Remote.ResponseReader_Impl_", methodName : "ofStringReader"}))));
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(read(chunk.toString())));
			}
		});
	};
};
tink_web_proxy_ResponseReader.ofSafeStringReader = function(read) {
	return tink_web_proxy_ResponseReader.ofStringReader(function(s) {
		return tink_core_Outcome.Success(read(s));
	});
};
var tink_web_proxy_QueryParams = {};
tink_web_proxy_QueryParams._new = function() {
	var this1 = [];
	return this1;
};
tink_web_proxy_QueryParams.add = function(this1,name,value) {
	this1.push(new tink_core_NamedWith(tink_url_Portion.ofString(name),tink_url_Portion.ofString(value)));
	return this1;
};
tink_web_proxy_QueryParams.flush = function(this1) {
	return this1;
};
tink_web_proxy_QueryParams.toString = function(this1) {
	if(this1 == null) {
		return "";
	} else if(this1.length == 0) {
		return "";
	} else {
		var this2 = [];
		var ret = this2;
		var _g = 0;
		while(_g < this1.length) {
			var p = this1[_g];
			++_g;
			ret.push(p.name + "=" + p.value);
		}
		return "?" + (ret == null ? "null" : ret.join("&"));
	}
};
var tink_web_proxy_HeaderParams = {};
tink_web_proxy_HeaderParams._new = function() {
	var this1 = [];
	return this1;
};
tink_web_proxy_HeaderParams.add = function(this1,name,value) {
	this1.push(new tink_http_HeaderField(name,value));
	return this1;
};
tink_web_proxy_HeaderParams.flush = function(this1) {
	return this1;
};
tink_web_proxy_HeaderParams.toString = function(this1) {
	return new tink_http_Header(this1).toString();
};
var tink_web_proxy_RemoteBase = function(client,endpoint) {
	this.client = client;
	this.endpoint = endpoint;
};
tink_web_proxy_RemoteBase.__name__ = true;
tink_web_proxy_RemoteBase.prototype = {
	client: null
	,endpoint: null
	,__class__: tink_web_proxy_RemoteBase
};
var tink_web_proxy_Remote0 = function(client,endpoint) {
	tink_web_proxy_RemoteBase.call(this,client,endpoint);
};
tink_web_proxy_Remote0.__name__ = true;
tink_web_proxy_Remote0.__super__ = tink_web_proxy_RemoteBase;
tink_web_proxy_Remote0.prototype = $extend(tink_web_proxy_RemoteBase.prototype,{
	get: function(benchmarkName,haxeVersion) {
		var __body__ = "";
		var this1 = "data";
		return tink_web_proxy_RemoteEndpoint.request(tink_web_proxy_RemoteEndpoint.sub(this.endpoint,{ path : [tink_url_Portion.ofString(benchmarkName),this1,tink_url_Portion.ofString(haxeVersion)], query : [], headers : [new tink_http_HeaderField("content-length",tink_http_HeaderValue.ofInt(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(__body__)).getLength())),new tink_http_HeaderField("accept","application/json")].concat([])}),this.client,"GET",new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(__body__)))),tink_web_proxy_ResponseReader.ofStringReader(($_=new tink_json_Parser0(),$bind($_,$_.tryParse))));
	}
	,__class__: tink_web_proxy_Remote0
});
var tink_web_routing_Path = {};
tink_web_routing_Path.toString = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var p = this1[_g1];
		++_g1;
		_g.push(tink_url_Portion.stringly(p));
	}
	return "/" + _g.join("/");
};
var tink_web_routing_Context = function(parent,accepts,request,depth,parts,params) {
	this.parent = parent;
	this.accepts = accepts;
	this.request = request;
	this.depth = depth;
	this.parts = parts;
	this.params = params;
};
tink_web_routing_Context.__name__ = true;
tink_web_routing_Context.toCamelCase = function(header) {
	var header1 = header;
	var ret_b = "";
	var pos = 0;
	var max = header1.length;
	while(pos < max) {
		var _g = header1.charCodeAt(pos++);
		if(_g == 45) {
			if(pos < max) {
				ret_b += Std.string(header1.charAt(pos++).toLowerCase());
			}
		} else {
			var v = _g;
			ret_b += String.fromCodePoint(v);
		}
	}
	return ret_b;
};
tink_web_routing_Context.ofRequest = function(request) {
	return new tink_web_routing_Context(null,tink_web_routing_Context.parseAcceptHeader(request.header),request,0,tink_url_Path.parts(request.header.url.path),tink_url_Query.toMap(request.header.url.query));
};
tink_web_routing_Context.authed = function(request,getSession) {
	var tmp = tink_web_routing_Context.parseAcceptHeader(request.header);
	var tmp1 = tink_url_Path.parts(request.header.url.path);
	var tmp2 = tink_url_Query.toMap(request.header.url.query);
	var _g = getSession;
	var a1 = request.header;
	return new tink_web_routing_AuthedContext(null,tmp,request,0,tmp1,tmp2,new tink_core__$Lazy_LazyFunc(function() {
		return _g(a1);
	}));
};
tink_web_routing_Context.parseAcceptHeader = function(h) {
	var _g = h.get("accept");
	if(_g.length == 0) {
		return tink_web_routing_Context.acceptsAll;
	} else {
		var values = _g;
		var accepted_h = Object.create(null);
		var _g = 0;
		while(_g < values.length) {
			var v = values[_g];
			++_g;
			var _g1 = 0;
			var _g2 = tink_http_HeaderValue.parse(v);
			while(_g1 < _g2.length) {
				var part = _g2[_g1];
				++_g1;
				accepted_h[part.value] = true;
			}
		}
		if(accepted_h["*/*"]) {
			return tink_web_routing_Context.acceptsAll;
		} else {
			return function(t) {
				return Object.prototype.hasOwnProperty.call(accepted_h,t);
			};
		}
	}
};
tink_web_routing_Context.acceptsAll = function(s) {
	return true;
};
tink_web_routing_Context.prototype = {
	request: null
	,depth: null
	,parent: null
	,parts: null
	,params: null
	,get_header: function() {
		return this.request.header;
	}
	,accepts: null
	,allRaw: function() {
		var _g = this.request.body;
		var tmp;
		if(_g._hx_index == 0) {
			var s = _g.source;
			tmp = s;
		} else {
			tmp = tink_io_Source.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
		return tink_io_RealSourceTools.all(tmp);
	}
	,get_rawBody: function() {
		var _g = this.request.body;
		if(_g._hx_index == 0) {
			var s = _g.source;
			return s;
		} else {
			return tink_io_Source.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
	}
	,headers: function() {
		var _g = [];
		var _g1_current = 0;
		var _g1_array = this.request.header.fields;
		while(_g1_current < _g1_array.length) {
			var f = _g1_array[_g1_current++];
			_g.push(new tink_core_NamedWith(f.name,f.value));
		}
		return tink_querystring_Pairs.ofIterable(_g);
	}
	,parse: function() {
		var _g = this.request.body;
		switch(_g._hx_index) {
		case 0:
			var src = _g.source;
			var parseForm = function() {
				return tink_core_Promise.next(tink_io_RealSourceTools.all(src),tink_core_Next.ofSafeSync(function(chunk) {
					var _g = [];
					var part = new tink_url__$Query_QueryStringParser(chunk.toString(),"&","=",0);
					while(part.hasNext()) {
						var part1 = part.next();
						_g.push(new tink_core_NamedWith(part1.name,tink_http_BodyPart.Value(tink_url_Portion.stringly(part1.value))));
					}
					return _g;
				}));
			};
			return parseForm();
		case 1:
			var parts = _g.parts;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(parts)));
		}
	}
	,get_pathLength: function() {
		return this.parts.length - this.depth;
	}
	,getPrefix: function() {
		return this.parts.slice(0,this.depth);
	}
	,getPath: function() {
		return this.parts.slice(this.depth);
	}
	,hasParam: function(name) {
		return Object.prototype.hasOwnProperty.call(this.params.h,name);
	}
	,part: function(index) {
		if(this.depth + index >= this.parts.length) {
			return "";
		} else {
			return tink_url_Portion.stringly(this.parts[this.depth + index]);
		}
	}
	,param: function(name) {
		return tink_url_Portion.stringly(this.params.h[name]);
	}
	,sub: function(descend) {
		return new tink_web_routing_Context(this,this.accepts,this.request,this.depth + descend,this.parts,this.params);
	}
	,__class__: tink_web_routing_Context
};
var tink_web_routing_AuthedContext = function(parent,accepts,request,depth,parts,params,session,user) {
	this.session = session;
	var tmp;
	if(user == null) {
		tmp = session.map(function(s) {
			return s.getUser();
		});
	} else {
		var v = user;
		tmp = v;
	}
	this.user = tmp;
	tink_web_routing_Context.call(this,parent,accepts,request,depth,parts,params);
};
tink_web_routing_AuthedContext.__name__ = true;
tink_web_routing_AuthedContext.__super__ = tink_web_routing_Context;
tink_web_routing_AuthedContext.prototype = $extend(tink_web_routing_Context.prototype,{
	session: null
	,user: null
	,sub: function(descend) {
		return new tink_web_routing_AuthedContext(this,this.accepts,this.request,this.depth + descend,this.parts,this.params,this.session,this.user);
	}
	,__class__: tink_web_routing_AuthedContext
});
var tink_web_routing_RequestReader = {};
tink_web_routing_RequestReader.ofStringReader = function(read) {
	return function(ctx) {
		return tink_core_Promise.next(ctx.allRaw(),function(body) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(read(body.toString())));
		});
	};
};
tink_web_routing_RequestReader.ofSafeStringReader = function(read) {
	return tink_web_routing_RequestReader.ofStringReader(function(s) {
		return tink_core_Outcome.Success(read(s));
	});
};
var tink_web_routing_Response = {};
tink_web_routing_Response.ofChunk = function(c,contentType) {
	if(contentType == null) {
		contentType = "application/octet-stream";
	}
	return tink_web_routing_Response.binary(null,contentType,c.toBytes());
};
tink_web_routing_Response.ofString = function(s) {
	return tink_web_routing_Response.textual(null,"text/plain",s);
};
tink_web_routing_Response.ofBytes = function(b) {
	return tink_web_routing_Response.binary(null,"application/octet-stream",b);
};
tink_web_routing_Response.fromChunk = function(c) {
	return tink_web_routing_Response.ofChunk(c);
};
tink_web_routing_Response.ofRealSource = function(source,contentType) {
	if(contentType == null) {
		contentType = "application/octet-stream";
	}
	var this1 = httpstatus_HttpStatusMessage.fromCode(200);
	var this2 = new tink_http_ResponseHeaderBase(200,this1,[new tink_http_HeaderField("content-type",contentType)],"HTTP/1.1");
	var this1 = new tink_http__$Response_OutgoingResponseData(this2,tink_io_RealSourceTools.idealize(source,function(_) {
		return tink_io_Source.EMPTY;
	}));
	return this1;
};
tink_web_routing_Response.ofIdealSource = function(source,contentType) {
	if(contentType == null) {
		contentType = "application/octet-stream";
	}
	var this1 = httpstatus_HttpStatusMessage.fromCode(200);
	var this2 = new tink_http_ResponseHeaderBase(200,this1,[new tink_http_HeaderField("content-type",contentType)],"HTTP/1.1");
	var this1 = new tink_http__$Response_OutgoingResponseData(this2,source);
	return this1;
};
tink_web_routing_Response.fromRealSource = function(source) {
	return tink_web_routing_Response.ofRealSource(tink_io_RealSourceTools.idealize(source,function(_) {
		return tink_io_Source.EMPTY;
	}));
};
tink_web_routing_Response.fromIdealSource = function(source) {
	return tink_web_routing_Response.ofIdealSource(source);
};
tink_web_routing_Response.ofUrl = function(u) {
	var this1 = httpstatus_HttpStatusMessage.fromCode(302);
	var this2 = "location".toLowerCase();
	var this3 = new tink_http_ResponseHeaderBase(302,this1,[new tink_http_HeaderField(this2,tink_Url.toString(u))],"HTTP/1.1");
	var this1 = new tink_http__$Response_OutgoingResponseData(this3,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_Chunk.EMPTY)));
	return this1;
};
tink_web_routing_Response.binary = function(code,contentType,bytes,headers) {
	if(code == null) {
		code = 200;
	}
	return tink_http_OutgoingResponse.blob(code,tink_chunk_ByteChunk.of(bytes),contentType,headers);
};
tink_web_routing_Response.empty = function(code) {
	if(code == null) {
		code = 200;
	}
	var this1 = httpstatus_HttpStatusMessage.fromCode(code);
	var this2 = new tink_http_ResponseHeaderBase(code,this1,[new tink_http_HeaderField("content-length","0")],"HTTP/1.1");
	var this1 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_Chunk.EMPTY)));
	return this1;
};
tink_web_routing_Response.textual = function(code,contentType,string,headers) {
	if(code == null) {
		code = 200;
	}
	return tink_web_routing_Response.binary(code,contentType,haxe_io_Bytes.ofString(string),headers);
};
var ui_Chart = function(__coco_data_) {
	var _gthis = this;
	this.__coco_config = new coconut_ui_tools_Slot(this,null,null);
	this.__initAttributes(__coco_data_);
	var snapshot = null;
	coconut_vdom_View.call(this,$bind(this,this.render),null,null,null,function(firstTime) {
		if(firstTime) {
			_gthis.viewDidMount();
		}
	});
};
ui_Chart.__name__ = true;
ui_Chart.fromHxx = function(hxxMeta,attributes) {
	return coconut_diffing_VNodeData.VWidget(ui_Chart.__type,hxxMeta.ref,hxxMeta.key,attributes);
};
ui_Chart.__super__ = coconut_vdom_View;
ui_Chart.prototype = $extend(coconut_vdom_View.prototype,{
	element: null
	,render: function() {
		var hxxMeta = { };
		var hxxMeta1 = { ref : coconut_ui_Ref._new($bind(this,this._coco_set_element))};
		return coconut_diffing_VNodeData.VNative(coconut_vdom_Html.DIV,hxxMeta.ref,hxxMeta.key,{ className : ui_Chart.ROOT},[coconut_diffing_VNodeData.VNative(coconut_vdom_Html.CANVAS,hxxMeta1.ref,hxxMeta1.key,{ width : "0", height : "0", className : ui_Chart.CANVAS},null)]);
	}
	,viewDidMount: function() {
		var _gthis = this;
		var type = tink_state_Observable.get_value(this.__coco_config).type;
		var chart = new Chart(this.element.getContext("2d",null),tink_state_Observable.get_value(this.__coco_config));
		var this1 = { f : function() {
			return tink_state_Observable.get_value(_gthis.__coco_config);
		}};
		var c = tink_state_Observable.bind(tink_state_Observable.auto(this1),null,function(config) {
			if(config.type != type) {
				type = config.type;
				chart.destroy();
				chart = new Chart(_gthis.element.getContext("2d",null),config);
			} else {
				chart.data = config.data;
				chart.options = config.options;
				chart.update();
			}
		});
		this.__bu.push(c);
	}
	,__coco_config: null
	,get_config: function() {
		return tink_state_Observable.get_value(this.__coco_config);
	}
	,_coco_set_element: function(param) {
		this.element = param;
	}
	,__initAttributes: function(attributes) {
		this.__coco_config.setData(attributes.config);
	}
	,__class__: ui_Chart
});
var xdom_XDom = function() { };
xdom_XDom.__name__ = true;
xdom_XDom.alert = function(v) {
	window.alert(Std.string(v));
};
xdom_XDom.X = function(value) {
	return value;
};
var xdom_Selector = {};
xdom_Selector._new = function(s) {
	var this1 = s;
	return this1;
};
xdom_Selector.prefixed = function(scope,selector,forceId) {
	if(scope.nodeType != 1) {
		return selector;
	}
	var prefix;
	var _g = scope.id;
	if(_g == null) {
		if(forceId || !xdom_XDom.document.documentElement.contains(scope)) {
			prefix = "#" + (scope.id = "_xdom_" + xdom_Selector.ns + "_" + xdom_Selector.counter++);
		} else if(xdom_Selector.hasScope) {
			prefix = ":scope";
		} else {
			var cur = scope;
			var path = [];
			while(true) {
				var _g1 = cur.id;
				if(_g1 == null) {
					path.push(cur.tagName);
				} else if(_g1 == "") {
					path.push(cur.tagName);
				} else {
					var v = _g1;
					path.push("#" + v);
					break;
				}
				cur = cur.parentElement;
				if(!(cur != null)) {
					break;
				}
			}
			path.reverse();
			prefix = path.join(">");
		}
	} else if(_g == "") {
		if(forceId || !xdom_XDom.document.documentElement.contains(scope)) {
			prefix = "#" + (scope.id = "_xdom_" + xdom_Selector.ns + "_" + xdom_Selector.counter++);
		} else if(xdom_Selector.hasScope) {
			prefix = ":scope";
		} else {
			var cur = scope;
			var path = [];
			while(true) {
				var _g1 = cur.id;
				if(_g1 == null) {
					path.push(cur.tagName);
				} else if(_g1 == "") {
					path.push(cur.tagName);
				} else {
					var v = _g1;
					path.push("#" + v);
					break;
				}
				cur = cur.parentElement;
				if(!(cur != null)) {
					break;
				}
			}
			path.reverse();
			prefix = path.join(">");
		}
	} else {
		var v = _g;
		prefix = "#" + v;
	}
	return "" + prefix + " " + selector;
};
var xdom_Wrapped = {};
xdom_Wrapped.get_nodeList = function(this1) {
	if(!this1.nodeList) {
		return [];
	} else {
		return true;
	}
};
xdom_Wrapped.get_children = function(this1) {
	if(!this1.children) {
		return [];
	} else {
		return true;
	}
};
xdom_Wrapped.get_dataset = function(this1) {
	if(!this1.dataset) {
		return { };
	} else {
		return true;
	}
};
xdom_Wrapped.qsa = function(this1,selector) {
	if(this1 != null && this1.querySelectorAll != null) {
		if(this1 == xdom_XDom.document) {
			return xdom_XDom.document.querySelectorAll(selector);
		} else {
			var e = this1;
			return (e.matches(selector) ? [e] : []).concat(xdom_html_Collection.toArray(e.querySelectorAll(xdom_Selector.prefixed(e,selector))));
		}
	} else {
		return xdom_html_Collection.empty();
	}
};
xdom_Wrapped.upcast = function(w) {
	return w;
};
xdom_Wrapped.get_onabort = function(this1) {
	return xdom_html_EventSource.make(this1,"abort");
};
xdom_Wrapped.get_onblur = function(this1) {
	return xdom_html_EventSource.make(this1,"blur");
};
xdom_Wrapped.get_oncanplay = function(this1) {
	return xdom_html_EventSource.make(this1,"canplay");
};
xdom_Wrapped.get_oncanplaythrough = function(this1) {
	return xdom_html_EventSource.make(this1,"canplaythrough");
};
xdom_Wrapped.get_onchange = function(this1) {
	return xdom_html_EventSource.make(this1,"change");
};
xdom_Wrapped.get_onclick = function(this1) {
	return xdom_html_EventSource.make(this1,"click");
};
xdom_Wrapped.get_oncompositionend = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionend");
};
xdom_Wrapped.get_oncompositionstart = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionstart");
};
xdom_Wrapped.get_oncompositionupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionupdate");
};
xdom_Wrapped.get_oncontextmenu = function(this1) {
	return xdom_html_EventSource.make(this1,"contextmenu");
};
xdom_Wrapped.get_oncopy = function(this1) {
	return xdom_html_EventSource.make(this1,"copy");
};
xdom_Wrapped.get_oncut = function(this1) {
	return xdom_html_EventSource.make(this1,"cut");
};
xdom_Wrapped.get_ondblclick = function(this1) {
	return xdom_html_EventSource.make(this1,"dblclick");
};
xdom_Wrapped.get_ondrag = function(this1) {
	return xdom_html_EventSource.make(this1,"drag");
};
xdom_Wrapped.get_ondragend = function(this1) {
	return xdom_html_EventSource.make(this1,"dragend");
};
xdom_Wrapped.get_ondragenter = function(this1) {
	return xdom_html_EventSource.make(this1,"dragenter");
};
xdom_Wrapped.get_ondragleave = function(this1) {
	return xdom_html_EventSource.make(this1,"dragleave");
};
xdom_Wrapped.get_ondragover = function(this1) {
	return xdom_html_EventSource.make(this1,"dragover");
};
xdom_Wrapped.get_ondragstart = function(this1) {
	return xdom_html_EventSource.make(this1,"dragstart");
};
xdom_Wrapped.get_ondrop = function(this1) {
	return xdom_html_EventSource.make(this1,"drop");
};
xdom_Wrapped.get_ondurationchange = function(this1) {
	return xdom_html_EventSource.make(this1,"durationchange");
};
xdom_Wrapped.get_onemptied = function(this1) {
	return xdom_html_EventSource.make(this1,"emptied");
};
xdom_Wrapped.get_onended = function(this1) {
	return xdom_html_EventSource.make(this1,"ended");
};
xdom_Wrapped.get_onerror = function(this1) {
	return xdom_html_EventSource.make(this1,"error");
};
xdom_Wrapped.get_onfocus = function(this1) {
	return xdom_html_EventSource.make(this1,"focus");
};
xdom_Wrapped.get_onfullscreenchange = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenchange");
};
xdom_Wrapped.get_onfullscreenerror = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenerror");
};
xdom_Wrapped.get_ongotpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"gotpointercapture");
};
xdom_Wrapped.get_oninput = function(this1) {
	return xdom_html_EventSource.make(this1,"input");
};
xdom_Wrapped.get_oninvalid = function(this1) {
	return xdom_html_EventSource.make(this1,"invalid");
};
xdom_Wrapped.get_onkeydown = function(this1) {
	return xdom_html_EventSource.make(this1,"keydown");
};
xdom_Wrapped.get_onkeypress = function(this1) {
	return xdom_html_EventSource.make(this1,"keypress");
};
xdom_Wrapped.get_onkeyup = function(this1) {
	return xdom_html_EventSource.make(this1,"keyup");
};
xdom_Wrapped.get_onload = function(this1) {
	return xdom_html_EventSource.make(this1,"load");
};
xdom_Wrapped.get_onloadeddata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadeddata");
};
xdom_Wrapped.get_onloadedmetadata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadedmetadata");
};
xdom_Wrapped.get_onloadstart = function(this1) {
	return xdom_html_EventSource.make(this1,"loadstart");
};
xdom_Wrapped.get_onlostpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"lostpointercapture");
};
xdom_Wrapped.get_onmousedown = function(this1) {
	return xdom_html_EventSource.make(this1,"mousedown");
};
xdom_Wrapped.get_onmouseenter = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseenter");
};
xdom_Wrapped.get_onmouseleave = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseleave");
};
xdom_Wrapped.get_onmousemove = function(this1) {
	return xdom_html_EventSource.make(this1,"mousemove");
};
xdom_Wrapped.get_onmouseout = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseout");
};
xdom_Wrapped.get_onmouseover = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseover");
};
xdom_Wrapped.get_onmouseup = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseup");
};
xdom_Wrapped.get_onpaste = function(this1) {
	return xdom_html_EventSource.make(this1,"paste");
};
xdom_Wrapped.get_onpause = function(this1) {
	return xdom_html_EventSource.make(this1,"pause");
};
xdom_Wrapped.get_onplay = function(this1) {
	return xdom_html_EventSource.make(this1,"play");
};
xdom_Wrapped.get_onplaying = function(this1) {
	return xdom_html_EventSource.make(this1,"playing");
};
xdom_Wrapped.get_onpointercancel = function(this1) {
	return xdom_html_EventSource.make(this1,"pointercancel");
};
xdom_Wrapped.get_onpointerdown = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerdown");
};
xdom_Wrapped.get_onpointerenter = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerenter");
};
xdom_Wrapped.get_onpointerleave = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerleave");
};
xdom_Wrapped.get_onpointerlockchange = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockchange");
};
xdom_Wrapped.get_onpointerlockerror = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockerror");
};
xdom_Wrapped.get_onpointermove = function(this1) {
	return xdom_html_EventSource.make(this1,"pointermove");
};
xdom_Wrapped.get_onpointerout = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerout");
};
xdom_Wrapped.get_onpointerover = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerover");
};
xdom_Wrapped.get_onpointerup = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerup");
};
xdom_Wrapped.get_onprogress = function(this1) {
	return xdom_html_EventSource.make(this1,"progress");
};
xdom_Wrapped.get_onratechange = function(this1) {
	return xdom_html_EventSource.make(this1,"ratechange");
};
xdom_Wrapped.get_onreset = function(this1) {
	return xdom_html_EventSource.make(this1,"reset");
};
xdom_Wrapped.get_onresize = function(this1) {
	return xdom_html_EventSource.make(this1,"resize");
};
xdom_Wrapped.get_onscroll = function(this1) {
	return xdom_html_EventSource.make(this1,"scroll");
};
xdom_Wrapped.get_onseeked = function(this1) {
	return xdom_html_EventSource.make(this1,"seeked");
};
xdom_Wrapped.get_onseeking = function(this1) {
	return xdom_html_EventSource.make(this1,"seeking");
};
xdom_Wrapped.get_onselect = function(this1) {
	return xdom_html_EventSource.make(this1,"select");
};
xdom_Wrapped.get_onshow = function(this1) {
	return xdom_html_EventSource.make(this1,"show");
};
xdom_Wrapped.get_onstalled = function(this1) {
	return xdom_html_EventSource.make(this1,"stalled");
};
xdom_Wrapped.get_onsubmit = function(this1) {
	return xdom_html_EventSource.make(this1,"submit");
};
xdom_Wrapped.get_onsuspend = function(this1) {
	return xdom_html_EventSource.make(this1,"suspend");
};
xdom_Wrapped.get_ontimeupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"timeupdate");
};
xdom_Wrapped.get_ontouchcancel = function(this1) {
	return xdom_html_EventSource.make(this1,"touchcancel");
};
xdom_Wrapped.get_ontouchend = function(this1) {
	return xdom_html_EventSource.make(this1,"touchend");
};
xdom_Wrapped.get_ontouchmove = function(this1) {
	return xdom_html_EventSource.make(this1,"touchmove");
};
xdom_Wrapped.get_ontouchstart = function(this1) {
	return xdom_html_EventSource.make(this1,"touchstart");
};
xdom_Wrapped.get_onvolumechange = function(this1) {
	return xdom_html_EventSource.make(this1,"volumechange");
};
xdom_Wrapped.get_onwaiting = function(this1) {
	return xdom_html_EventSource.make(this1,"waiting");
};
xdom_Wrapped.get_onwheel = function(this1) {
	return xdom_html_EventSource.make(this1,"wheel");
};
var xdom_html_Collection = {};
xdom_html_Collection.get_length = function(this1) {
	return this1.length;
};
xdom_html_Collection.get = function(this1,index) {
	return this1[index];
};
xdom_html_Collection.toArray = function(this1) {
	return Array.prototype.slice.call(this1);
};
xdom_html_Collection.empty = function() {
	return xdom_html_Collection.EMPTY;
};
xdom_html_Collection.qsa = function(this1,selector) {
	var ret = [];
	var _g = 0;
	while(_g < this1.length) {
		var e = this1[_g];
		++_g;
		ret = ret.concat(e.qsa(selector));
	}
	return ret;
};
var xdom_html_Dataset = {};
xdom_html_Dataset.__getProperty = function(this1,name) {
	return this1[name];
};
xdom_html_Dataset.__setProperty = function(this1,name,value) {
	return this1[name] = value;
};
xdom_html_Dataset.keys = function(this1) {
	return Object.getOwnPropertyNames(this1);
};
xdom_html_Dataset.toggle = function(this1,name,force) {
	this1[name] = force == null ? this1[name] != null ? "" : null : !force ? "" : null;
};
var xdom_html_DatasetValue = {};
xdom_html_DatasetValue.toInt = function(this1) {
	return Std.parseInt(this1);
};
xdom_html_DatasetValue.toFloat = function(this1) {
	return parseFloat(this1);
};
xdom_html_DatasetValue.toFlag = function(this1) {
	return this1 != null;
};
xdom_html_DatasetValue.ofFlag = function(flag) {
	if(flag) {
		return "";
	} else {
		return null;
	}
};
xdom_html_DatasetValue.ofNumber = function(f) {
	if(isNaN(f)) {
		return null;
	} else if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
xdom_html_DatasetValue.not = function(v) {
	return v != null;
};
xdom_html_DatasetValue.lOrBool = function(v,b) {
	if(v == null) {
		return b;
	} else {
		return true;
	}
};
xdom_html_DatasetValue.rOrBool = function(b,v) {
	if(!b) {
		return v != null;
	} else {
		return true;
	}
};
xdom_html_DatasetValue.lOr = function(v,w) {
	if(v == null) {
		return w != null;
	} else {
		return true;
	}
};
xdom_html_DatasetValue.lAndBool = function(v,b) {
	if(v != null) {
		return b;
	} else {
		return false;
	}
};
xdom_html_DatasetValue.rAndBool = function(b,v) {
	if(b) {
		return v != null;
	} else {
		return false;
	}
};
xdom_html_DatasetValue.lAnd = function(v,w) {
	if(v != null) {
		return w != null;
	} else {
		return false;
	}
};
var xdom_html_Document = {};
xdom_html_Document.get_body = function(this1) {
	return this1.body;
};
xdom_html_Document.getElementById = function(this1,id) {
	return this1.getElementById(id);
};
xdom_html_Document.toNode = function(this1) {
	return xdom_Wrapped.upcast(this1);
};
xdom_html_Document.get_onabort = function(this1) {
	return xdom_html_EventSource.make(this1,"abort");
};
xdom_html_Document.get_onblur = function(this1) {
	return xdom_html_EventSource.make(this1,"blur");
};
xdom_html_Document.get_oncanplay = function(this1) {
	return xdom_html_EventSource.make(this1,"canplay");
};
xdom_html_Document.get_oncanplaythrough = function(this1) {
	return xdom_html_EventSource.make(this1,"canplaythrough");
};
xdom_html_Document.get_onchange = function(this1) {
	return xdom_html_EventSource.make(this1,"change");
};
xdom_html_Document.get_onclick = function(this1) {
	return xdom_html_EventSource.make(this1,"click");
};
xdom_html_Document.get_oncompositionend = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionend");
};
xdom_html_Document.get_oncompositionstart = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionstart");
};
xdom_html_Document.get_oncompositionupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"compositionupdate");
};
xdom_html_Document.get_oncontextmenu = function(this1) {
	return xdom_html_EventSource.make(this1,"contextmenu");
};
xdom_html_Document.get_oncopy = function(this1) {
	return xdom_html_EventSource.make(this1,"copy");
};
xdom_html_Document.get_oncut = function(this1) {
	return xdom_html_EventSource.make(this1,"cut");
};
xdom_html_Document.get_ondblclick = function(this1) {
	return xdom_html_EventSource.make(this1,"dblclick");
};
xdom_html_Document.get_ondrag = function(this1) {
	return xdom_html_EventSource.make(this1,"drag");
};
xdom_html_Document.get_ondragend = function(this1) {
	return xdom_html_EventSource.make(this1,"dragend");
};
xdom_html_Document.get_ondragenter = function(this1) {
	return xdom_html_EventSource.make(this1,"dragenter");
};
xdom_html_Document.get_ondragleave = function(this1) {
	return xdom_html_EventSource.make(this1,"dragleave");
};
xdom_html_Document.get_ondragover = function(this1) {
	return xdom_html_EventSource.make(this1,"dragover");
};
xdom_html_Document.get_ondragstart = function(this1) {
	return xdom_html_EventSource.make(this1,"dragstart");
};
xdom_html_Document.get_ondrop = function(this1) {
	return xdom_html_EventSource.make(this1,"drop");
};
xdom_html_Document.get_ondurationchange = function(this1) {
	return xdom_html_EventSource.make(this1,"durationchange");
};
xdom_html_Document.get_onemptied = function(this1) {
	return xdom_html_EventSource.make(this1,"emptied");
};
xdom_html_Document.get_onended = function(this1) {
	return xdom_html_EventSource.make(this1,"ended");
};
xdom_html_Document.get_onerror = function(this1) {
	return xdom_html_EventSource.make(this1,"error");
};
xdom_html_Document.get_onfocus = function(this1) {
	return xdom_html_EventSource.make(this1,"focus");
};
xdom_html_Document.get_onfullscreenchange = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenchange");
};
xdom_html_Document.get_onfullscreenerror = function(this1) {
	return xdom_html_EventSource.make(this1,"fullscreenerror");
};
xdom_html_Document.get_ongotpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"gotpointercapture");
};
xdom_html_Document.get_oninput = function(this1) {
	return xdom_html_EventSource.make(this1,"input");
};
xdom_html_Document.get_oninvalid = function(this1) {
	return xdom_html_EventSource.make(this1,"invalid");
};
xdom_html_Document.get_onkeydown = function(this1) {
	return xdom_html_EventSource.make(this1,"keydown");
};
xdom_html_Document.get_onkeypress = function(this1) {
	return xdom_html_EventSource.make(this1,"keypress");
};
xdom_html_Document.get_onkeyup = function(this1) {
	return xdom_html_EventSource.make(this1,"keyup");
};
xdom_html_Document.get_onload = function(this1) {
	return xdom_html_EventSource.make(this1,"load");
};
xdom_html_Document.get_onloadeddata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadeddata");
};
xdom_html_Document.get_onloadedmetadata = function(this1) {
	return xdom_html_EventSource.make(this1,"loadedmetadata");
};
xdom_html_Document.get_onloadstart = function(this1) {
	return xdom_html_EventSource.make(this1,"loadstart");
};
xdom_html_Document.get_onlostpointercapture = function(this1) {
	return xdom_html_EventSource.make(this1,"lostpointercapture");
};
xdom_html_Document.get_onmousedown = function(this1) {
	return xdom_html_EventSource.make(this1,"mousedown");
};
xdom_html_Document.get_onmouseenter = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseenter");
};
xdom_html_Document.get_onmouseleave = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseleave");
};
xdom_html_Document.get_onmousemove = function(this1) {
	return xdom_html_EventSource.make(this1,"mousemove");
};
xdom_html_Document.get_onmouseout = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseout");
};
xdom_html_Document.get_onmouseover = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseover");
};
xdom_html_Document.get_onmouseup = function(this1) {
	return xdom_html_EventSource.make(this1,"mouseup");
};
xdom_html_Document.get_onpaste = function(this1) {
	return xdom_html_EventSource.make(this1,"paste");
};
xdom_html_Document.get_onpause = function(this1) {
	return xdom_html_EventSource.make(this1,"pause");
};
xdom_html_Document.get_onplay = function(this1) {
	return xdom_html_EventSource.make(this1,"play");
};
xdom_html_Document.get_onplaying = function(this1) {
	return xdom_html_EventSource.make(this1,"playing");
};
xdom_html_Document.get_onpointercancel = function(this1) {
	return xdom_html_EventSource.make(this1,"pointercancel");
};
xdom_html_Document.get_onpointerdown = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerdown");
};
xdom_html_Document.get_onpointerenter = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerenter");
};
xdom_html_Document.get_onpointerleave = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerleave");
};
xdom_html_Document.get_onpointerlockchange = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockchange");
};
xdom_html_Document.get_onpointerlockerror = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerlockerror");
};
xdom_html_Document.get_onpointermove = function(this1) {
	return xdom_html_EventSource.make(this1,"pointermove");
};
xdom_html_Document.get_onpointerout = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerout");
};
xdom_html_Document.get_onpointerover = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerover");
};
xdom_html_Document.get_onpointerup = function(this1) {
	return xdom_html_EventSource.make(this1,"pointerup");
};
xdom_html_Document.get_onprogress = function(this1) {
	return xdom_html_EventSource.make(this1,"progress");
};
xdom_html_Document.get_onratechange = function(this1) {
	return xdom_html_EventSource.make(this1,"ratechange");
};
xdom_html_Document.get_onreset = function(this1) {
	return xdom_html_EventSource.make(this1,"reset");
};
xdom_html_Document.get_onresize = function(this1) {
	return xdom_html_EventSource.make(this1,"resize");
};
xdom_html_Document.get_onscroll = function(this1) {
	return xdom_html_EventSource.make(this1,"scroll");
};
xdom_html_Document.get_onseeked = function(this1) {
	return xdom_html_EventSource.make(this1,"seeked");
};
xdom_html_Document.get_onseeking = function(this1) {
	return xdom_html_EventSource.make(this1,"seeking");
};
xdom_html_Document.get_onselect = function(this1) {
	return xdom_html_EventSource.make(this1,"select");
};
xdom_html_Document.get_onshow = function(this1) {
	return xdom_html_EventSource.make(this1,"show");
};
xdom_html_Document.get_onstalled = function(this1) {
	return xdom_html_EventSource.make(this1,"stalled");
};
xdom_html_Document.get_onsubmit = function(this1) {
	return xdom_html_EventSource.make(this1,"submit");
};
xdom_html_Document.get_onsuspend = function(this1) {
	return xdom_html_EventSource.make(this1,"suspend");
};
xdom_html_Document.get_ontimeupdate = function(this1) {
	return xdom_html_EventSource.make(this1,"timeupdate");
};
xdom_html_Document.get_ontouchcancel = function(this1) {
	return xdom_html_EventSource.make(this1,"touchcancel");
};
xdom_html_Document.get_ontouchend = function(this1) {
	return xdom_html_EventSource.make(this1,"touchend");
};
xdom_html_Document.get_ontouchmove = function(this1) {
	return xdom_html_EventSource.make(this1,"touchmove");
};
xdom_html_Document.get_ontouchstart = function(this1) {
	return xdom_html_EventSource.make(this1,"touchstart");
};
xdom_html_Document.get_onvolumechange = function(this1) {
	return xdom_html_EventSource.make(this1,"volumechange");
};
xdom_html_Document.get_onwaiting = function(this1) {
	return xdom_html_EventSource.make(this1,"waiting");
};
xdom_html_Document.get_onwheel = function(this1) {
	return xdom_html_EventSource.make(this1,"wheel");
};
var xdom_html_EventSource = {};
xdom_html_EventSource._new = function(f) {
	var this1 = f;
	return this1;
};
xdom_html_EventSource.once = function(this1,c) {
	var c1 = c;
	var link = null;
	link = this1(function(v) {
		tink_core_Callback.invoke(c1,v);
		if(link != null) {
			link.cancel();
		}
		c1 = null;
		link = null;
	});
	return link;
};
xdom_html_EventSource.get_signal = function(this1) {
	var self = this1;
	if(self.__xdomSignal == null) {
		self.__xdomSignal = new tink_core__$Signal_Suspendable(function(cb) {
			var this2 = this1(cb);
			if(this2 == null) {
				return tink_core_CallbackLink.noop;
			} else {
				return $bind(this2,this2.cancel);
			}
		});
	}
	return self.__xdomSignal;
};
xdom_html_EventSource.map = function(this1,f) {
	return tink_core_Signal.map(xdom_html_EventSource.get_signal(this1),f);
};
xdom_html_EventSource.filter = function(this1,f) {
	return tink_core_Signal.filter(xdom_html_EventSource.get_signal(this1),f);
};
xdom_html_EventSource.select = function(this1,f) {
	return tink_core_Signal.select(xdom_html_EventSource.get_signal(this1),f);
};
xdom_html_EventSource.join = function(this1,other) {
	return tink_core_Signal.join(xdom_html_EventSource.get_signal(this1),other);
};
xdom_html_EventSource.nextTime = function(this1,condition) {
	return tink_core_Signal.nextTime(xdom_html_EventSource.get_signal(this1),condition);
};
xdom_html_EventSource.delegate = function(this1,s,cb) {
	var prefixed = null;
	return this1(function(e) {
		var root = e.currentTarget;
		var cur = e.target;
		if(prefixed == null) {
			prefixed = xdom_Selector.prefixed(root,s,true);
		}
		while(cur != null) {
			if(cur.matches(prefixed)) {
				var event = { currentTarget : cur};
				Object.setPrototypeOf(event,e);
				tink_core_Callback.invoke(cb,event);
			}
			if(cur == root) {
				break;
			}
			cur = cur.parentElement;
		}
	});
};
xdom_html_EventSource.make = function(target,event) {
	if(target != null && target.addEventListener != null) {
		var target1 = target;
		var this1 = function(cb) {
			var handle = function(event) {
				tink_core_Callback.invoke(cb,event);
			};
			target1.addEventListener(event,handle);
			var _g = $bind(target1,target1.removeEventListener);
			var type = event;
			var listener = handle;
			var this1 = new tink_core_SimpleLink(function() {
				_g(type,listener);
			});
			return this1;
		};
		return this1;
	} else {
		var this1 = function(cb) {
			return null;
		};
		return this1;
	}
};
var xdom_html_EventSignal = {};
xdom_html_EventSignal.once = function(this1,c) {
	var c1 = c;
	var link = null;
	var _e = this1;
	link = (function(handler) {
		return _e.listen(handler);
	})(function(v) {
		tink_core_Callback.invoke(c1,v);
		if(link != null) {
			link.cancel();
		}
		c1 = null;
		link = null;
	});
	return link;
};
xdom_html_EventSignal.of = function(s) {
	return s;
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
js_Boot.__toStr = ({ }).toString;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}

        if (typeof Element !== "undefined" && !Element.prototype.matches)
          Element.prototype.matches = Element.prototype.msMatchesSelector;
      ;
Cix0.inst = new Cix0();
Cix1.inst = new Cix1();
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
tink_state_Observable.stack = new haxe_ds_List();
tink_state_Observable.scheduled = [];
tink_state_Observable.hasRAF = typeof window != 'undefined' && 'requestAnimationFrame' in window;
tink_state_Observable.isScheduled = false;
tink_state_Observable.counter = 0;
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
coconut_diffing_Widget.defer = tink_state_Observable.schedule;
coconut_vdom_View.idCounter = 0;
tink_state_ObservableIterator.TRIGGER = haxe_ds_Option.Some(tink_core_Noise.Noise);
Main.__type = { create : function(__coco_data_) {
	return new Main(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
Dropdown.__type = { create : function(__coco_data_) {
	return new Dropdown(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
coconut_diffing_Differ.WIDGET_INST = { };
coconut_diffing_Differ.EMPTY = { };
coconut_vdom__$Html_Svg.SVG = "http://www.w3.org/2000/svg";
coconut_vdom_Html.nodeTypes = new haxe_ds_StringMap();
coconut_vdom_Html.WBR = coconut_vdom_Html.nodeType("wbr");
coconut_vdom_Html.VIDEO = coconut_vdom_Html.nodeType("video");
coconut_vdom_Html.UL = coconut_vdom_Html.nodeType("ul");
coconut_vdom_Html.TRACK = coconut_vdom_Html.nodeType("track");
coconut_vdom_Html.TR = coconut_vdom_Html.nodeType("tr");
coconut_vdom_Html.TITLE = coconut_vdom_Html.nodeType("title");
coconut_vdom_Html.THEAD = coconut_vdom_Html.nodeType("thead");
coconut_vdom_Html.TH = coconut_vdom_Html.nodeType("th");
coconut_vdom_Html.TFOOT = coconut_vdom_Html.nodeType("tfoot");
coconut_vdom_Html.TEXTAREA = coconut_vdom_Html.nodeType("textarea");
coconut_vdom_Html.TD = coconut_vdom_Html.nodeType("td");
coconut_vdom_Html.TBODY = coconut_vdom_Html.nodeType("tbody");
coconut_vdom_Html.TABLE = coconut_vdom_Html.nodeType("table");
coconut_vdom_Html.SVG = coconut_vdom_Html.nodeType("svg:svg");
coconut_vdom_Html.SUMMARY = coconut_vdom_Html.nodeType("summary");
coconut_vdom_Html.STYLE = coconut_vdom_Html.nodeType("style");
coconut_vdom_Html.STRONG = coconut_vdom_Html.nodeType("strong");
coconut_vdom_Html.SPAN = coconut_vdom_Html.nodeType("span");
coconut_vdom_Html.SOURCE = coconut_vdom_Html.nodeType("source");
coconut_vdom_Html.SMALL = coconut_vdom_Html.nodeType("small");
coconut_vdom_Html.SELECT = coconut_vdom_Html.nodeType("select");
coconut_vdom_Html.SECTION = coconut_vdom_Html.nodeType("section");
coconut_vdom_Html.SCRIPT = coconut_vdom_Html.nodeType("script");
coconut_vdom_Html.RECT = coconut_vdom_Html.nodeType("svg:rect");
coconut_vdom_Html.PRE = coconut_vdom_Html.nodeType("pre");
coconut_vdom_Html.POLYGON = coconut_vdom_Html.nodeType("svg:polygon");
coconut_vdom_Html.PICTURE = coconut_vdom_Html.nodeType("picture");
coconut_vdom_Html.PATH = coconut_vdom_Html.nodeType("svg:path");
coconut_vdom_Html.PARAM = coconut_vdom_Html.nodeType("param");
coconut_vdom_Html.P = coconut_vdom_Html.nodeType("p");
coconut_vdom_Html.OPTION = coconut_vdom_Html.nodeType("option");
coconut_vdom_Html.OL = coconut_vdom_Html.nodeType("ol");
coconut_vdom_Html.OBJECT = coconut_vdom_Html.nodeType("object");
coconut_vdom_Html.NAV = coconut_vdom_Html.nodeType("nav");
coconut_vdom_Html.META = coconut_vdom_Html.nodeType("meta");
coconut_vdom_Html.MENU = coconut_vdom_Html.nodeType("menu");
coconut_vdom_Html.MAIN = coconut_vdom_Html.nodeType("main");
coconut_vdom_Html.LINK = coconut_vdom_Html.nodeType("link");
coconut_vdom_Html.LI = coconut_vdom_Html.nodeType("li");
coconut_vdom_Html.LEGEND = coconut_vdom_Html.nodeType("legend");
coconut_vdom_Html.LABEL = coconut_vdom_Html.nodeType("label");
coconut_vdom_Html.INS = coconut_vdom_Html.nodeType("ins");
coconut_vdom_Html.INPUT = coconut_vdom_Html.nodeType("input");
coconut_vdom_Html.IMG = coconut_vdom_Html.nodeType("img");
coconut_vdom_Html.IFRAME = coconut_vdom_Html.nodeType("iframe");
coconut_vdom_Html.I = coconut_vdom_Html.nodeType("i");
coconut_vdom_Html.HTML = coconut_vdom_Html.nodeType("html");
coconut_vdom_Html.HR = coconut_vdom_Html.nodeType("hr");
coconut_vdom_Html.HEADER = coconut_vdom_Html.nodeType("header");
coconut_vdom_Html.HEAD = coconut_vdom_Html.nodeType("head");
coconut_vdom_Html.H6 = coconut_vdom_Html.nodeType("h6");
coconut_vdom_Html.H5 = coconut_vdom_Html.nodeType("h5");
coconut_vdom_Html.H4 = coconut_vdom_Html.nodeType("h4");
coconut_vdom_Html.H3 = coconut_vdom_Html.nodeType("h3");
coconut_vdom_Html.H2 = coconut_vdom_Html.nodeType("h2");
coconut_vdom_Html.H1 = coconut_vdom_Html.nodeType("h1");
coconut_vdom_Html.FORM = coconut_vdom_Html.nodeType("form");
coconut_vdom_Html.FOOTER = coconut_vdom_Html.nodeType("footer");
coconut_vdom_Html.FIELDSET = coconut_vdom_Html.nodeType("fieldset");
coconut_vdom_Html.EMBED = coconut_vdom_Html.nodeType("embed");
coconut_vdom_Html.EM = coconut_vdom_Html.nodeType("em");
coconut_vdom_Html.ELLIPSE = coconut_vdom_Html.nodeType("svg:ellipse");
coconut_vdom_Html.DT = coconut_vdom_Html.nodeType("dt");
coconut_vdom_Html.DL = coconut_vdom_Html.nodeType("dl");
coconut_vdom_Html.DIV = coconut_vdom_Html.nodeType("div");
coconut_vdom_Html.DETAILS = coconut_vdom_Html.nodeType("details");
coconut_vdom_Html.DEL = coconut_vdom_Html.nodeType("del");
coconut_vdom_Html.DD = coconut_vdom_Html.nodeType("dd");
coconut_vdom_Html.CODE = coconut_vdom_Html.nodeType("code");
coconut_vdom_Html.CIRCLE = coconut_vdom_Html.nodeType("svg:circle");
coconut_vdom_Html.CANVAS = coconut_vdom_Html.nodeType("canvas");
coconut_vdom_Html.BUTTON = coconut_vdom_Html.nodeType("button");
coconut_vdom_Html.BR = coconut_vdom_Html.nodeType("br");
coconut_vdom_Html.BODY = coconut_vdom_Html.nodeType("body");
coconut_vdom_Html.BLOCKQUOTE = coconut_vdom_Html.nodeType("blockquote");
coconut_vdom_Html.B = coconut_vdom_Html.nodeType("b");
coconut_vdom_Html.AUDIO = coconut_vdom_Html.nodeType("audio");
coconut_vdom_Html.ASIDE = coconut_vdom_Html.nodeType("aside");
coconut_vdom_Html.ARTICLE = coconut_vdom_Html.nodeType("article");
coconut_vdom_Html.A = coconut_vdom_Html.nodeType("a");
coconut_vdom__$Html_HtmlFragment.tags = new haxe_ds_StringMap();
coconut_vdom__$Html_Text.inst = new coconut_vdom__$Html_Text();
coconut_vdom__$Renderer_DomBackend.PLACEHOLDER = coconut_diffing_VNodeData.VNative(coconut_vdom__$Html_Text.inst,null,null,"",null);
coconut_vdom_Renderer.DIFFER = new coconut_diffing_Differ(new coconut_vdom__$Renderer_DomBackend());
data_HaxeVersion.Haxe3 = "haxe3";
data_HaxeVersion.Haxe4 = "haxe4";
data_HaxeVersion.Nightly = "haxe-nightly";
data_Target.Cpp = "C++";
data_Target.CppGcGen = "C++ (GC Gen)";
data_Target.Cppia = "Cppia";
data_Target.Node = "NodeJS";
data_Target.NodeEs6 = "NodeJS (ES6)";
data_Target.Java = "Java";
data_Target.Jvm = "JVM";
data_Target.HashLink = "HashLink";
data_Target.HashLinkC = "HashLink/C";
data_Target.HashLinkImmix = "HashLink Immix";
data_Target.HashLinkCImmix = "HashLink/C Immix";
data_Target.Cs = "C#";
data_Target.Php = "PHP";
data_Target.Python = "Python";
data_Target.Eval = "Eval";
data_Target.Lua = "Lua";
data_Target.LuaJit = "Luajit";
data_Target.Neko = "Neko";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
httpstatus_HttpStatusCode.Continue = 100;
httpstatus_HttpStatusCode.SwitchingProtocols = 101;
httpstatus_HttpStatusCode.Processing = 102;
httpstatus_HttpStatusCode.OK = 200;
httpstatus_HttpStatusCode.Created = 201;
httpstatus_HttpStatusCode.Accepted = 202;
httpstatus_HttpStatusCode.NonAuthoritativeInformation = 203;
httpstatus_HttpStatusCode.NoContent = 204;
httpstatus_HttpStatusCode.ResetContent = 205;
httpstatus_HttpStatusCode.PartialContent = 206;
httpstatus_HttpStatusCode.MultiStatus = 207;
httpstatus_HttpStatusCode.AlreadyReported = 208;
httpstatus_HttpStatusCode.IMUsed = 226;
httpstatus_HttpStatusCode.MultipleChoices = 300;
httpstatus_HttpStatusCode.MovedPermanently = 301;
httpstatus_HttpStatusCode.Found = 302;
httpstatus_HttpStatusCode.SeeOther = 303;
httpstatus_HttpStatusCode.NotModified = 304;
httpstatus_HttpStatusCode.UseProxy = 305;
httpstatus_HttpStatusCode.SwitchProxy = 306;
httpstatus_HttpStatusCode.TemporaryRedirect = 307;
httpstatus_HttpStatusCode.PermanentRedirect = 308;
httpstatus_HttpStatusCode.BadRequest = 400;
httpstatus_HttpStatusCode.Unauthorized = 401;
httpstatus_HttpStatusCode.PaymentRequired = 402;
httpstatus_HttpStatusCode.Forbidden = 403;
httpstatus_HttpStatusCode.NotFound = 404;
httpstatus_HttpStatusCode.MethodNotAllowed = 405;
httpstatus_HttpStatusCode.NotAcceptable = 406;
httpstatus_HttpStatusCode.ProxyAuthenticationRequired = 407;
httpstatus_HttpStatusCode.RequestTimeout = 408;
httpstatus_HttpStatusCode.Conflict = 409;
httpstatus_HttpStatusCode.Gone = 410;
httpstatus_HttpStatusCode.LengthRequired = 411;
httpstatus_HttpStatusCode.PreconditionFailed = 412;
httpstatus_HttpStatusCode.PayloadTooLarge = 413;
httpstatus_HttpStatusCode.URITooLong = 414;
httpstatus_HttpStatusCode.UnsupportedMediaType = 415;
httpstatus_HttpStatusCode.RangeNotSatisfiable = 416;
httpstatus_HttpStatusCode.ExpectationFailed = 417;
httpstatus_HttpStatusCode.ImATeapot = 418;
httpstatus_HttpStatusCode.MisdirectedRequest = 421;
httpstatus_HttpStatusCode.UnprocessableEntity = 422;
httpstatus_HttpStatusCode.Locked = 423;
httpstatus_HttpStatusCode.FailedDependency = 424;
httpstatus_HttpStatusCode.UpgradeRequired = 426;
httpstatus_HttpStatusCode.PreconditionRequired = 428;
httpstatus_HttpStatusCode.TooManyRequests = 429;
httpstatus_HttpStatusCode.RequestHeaderFieldsTooLarge = 431;
httpstatus_HttpStatusCode.UnavailableForLegalReasons = 451;
httpstatus_HttpStatusCode.InternalServerError = 500;
httpstatus_HttpStatusCode.NotImplemented = 501;
httpstatus_HttpStatusCode.BadGateway = 502;
httpstatus_HttpStatusCode.ServiceUnavailable = 503;
httpstatus_HttpStatusCode.GatewayTimeout = 504;
httpstatus_HttpStatusCode.HTTPVersionNotSupported = 505;
httpstatus_HttpStatusCode.VariantAlsoNegotiates = 506;
httpstatus_HttpStatusCode.InsufficientStorage = 507;
httpstatus_HttpStatusCode.LoopDetected = 508;
httpstatus_HttpStatusCode.NotExtended = 510;
httpstatus_HttpStatusCode.NetworkAuthenticationRequired = 511;
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink_Chunk.EMPTY = new tink__$Chunk_EmptyChunk();
tink_Stringly.SUPPORTED_DATE_REGEX = new EReg("^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{3})?(Z|[\\+-]\\d{2}:\\d{2})$","");
tink_Url.SCHEME = 2;
tink_Url.PAYLOAD = 3;
tink_Url.AUTH = 6;
tink_Url.HOSTNAMES = 7;
tink_Url.PATH = 8;
tink_Url.QUERY = 10;
tink_Url.HASH = 12;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core_Progress.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_Promise.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core_Promise.NEVER = (function($this) {
	var $r;
	var ret = tink_core_Future.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_http_ChunkedParser.LINEBREAK = tink_chunk_Seekable.ofBytes(haxe_io_Bytes.ofString("\r\n"));
tink_http_Fetch.client = new haxe_ds_EnumValueMap();
tink_http_Fetch.sclient = new haxe_ds_EnumValueMap();
tink_http_HeaderValue.DAYS = "Sun,Mon,Tue,Wen,Thu,Fri,Sat".split(",");
tink_http_HeaderValue.MONTHS = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(",");
tink_http_HeaderName.REFERER = "referer";
tink_http_HeaderName.HOST = "host";
tink_http_HeaderName.SET_COOKIE = "set-cookie";
tink_http_HeaderName.COOKIE = "cookie";
tink_http_HeaderName.CONTENT_TYPE = "content-type";
tink_http_HeaderName.CONTENT_LENGTH = "content-length";
tink_http_HeaderName.CONTENT_DISPOSITION = "content-disposition";
tink_http_HeaderName.ACCEPT = "accept";
tink_http_HeaderName.ACCEPT_ENCODING = "accept-encoding";
tink_http_HeaderName.TRANSFER_ENCODING = "transfer-encoding";
tink_http_HeaderName.LOCATION = "location";
tink_http_HeaderName.AUTHORIZATION = "authorization";
tink_http_HeaderName.ORIGIN = "origin";
tink_http_HeaderName.VARY = "vary";
tink_http_HeaderName.CACHE_CONTROL = "cache-control";
tink_http_HeaderName.EXPIRES = "expires";
tink_http_HeaderName.ACCESS_CONTROL_REQUEST_METHOD = "access-control-request-method";
tink_http_HeaderName.ACCESS_CONTROL_REQUEST_HEADERS = "access-control-request-headers";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_ORIGIN = "access-control-allow-origin";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_CREDENTIALS = "access-control-allow-credentials";
tink_http_HeaderName.ACCESS_CONTROL_EXPOSE_HEADERS = "access-control-expose-headers";
tink_http_HeaderName.ACCESS_CONTROL_MAX_AGE = "access-control-max-age";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_METHODS = "access-control-allow-methods";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_HEADERS = "access-control-allow-headers";
tink_http_HeaderParser.INVALID = tink_io_ParseStep.Failed(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Header.hx", lineNumber : 307, className : "tink.http.HeaderParser", methodName : "INVALID"}));
tink_http_Method.GET = "GET";
tink_http_Method.HEAD = "HEAD";
tink_http_Method.OPTIONS = "OPTIONS";
tink_http_Method.POST = "POST";
tink_http_Method.PUT = "PUT";
tink_http_Method.PATCH = "PATCH";
tink_http_Method.DELETE = "DELETE";
tink_io__$Sink_Blackhole.inst = new tink_io__$Sink_Blackhole();
tink_io_SinkYielding.BLACKHOLE = tink_io__$Sink_Blackhole.inst;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io_Source.EMPTY = tink_streams_Empty.inst;
tink_io_Worker.EAGER = new tink_io__$Worker_EagerWorker();
tink_io_Worker.pool = [tink_io_Worker.EAGER];
tink_json_BasicParser.DBQT = (function($this) {
	var $r;
	var this1 = String.fromCodePoint(34);
	$r = this1;
	return $r;
}(this));
tink_pure_FilterResult.ExcludeAndStop = -3;
tink_pure_FilterResult.Exclude = 0;
tink_pure_FilterResult.Include = 1;
tink_pure_FilterResult.IncludeAndStop = 3;
tink_pure__$List_Node.EMPTY = [];
tink_state_ConstObservable.NEVER = (function($this) {
	var $r;
	var this1 = new tink_core__$Future_SuspendableFuture(function(_) {
		return null;
	});
	$r = this1;
	return $r;
}(this));
tink_state_Progress.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_url_Path.root = (function($this) {
	var $r;
	var this1 = "/";
	$r = this1;
	return $r;
}(this));
tink_web_proxy_RemoteEndpoint.NO_HEADERS = [];
tink_web_proxy_RemoteEndpoint.NO_PATH = [];
tink_web_routing_Response.BINARY = "application/octet-stream";
ui_Chart.ROOT = Cix0.inst.css;
ui_Chart.CANVAS = Cix1.inst.css;
ui_Chart.__type = { create : function(__coco_data_) {
	return new ui_Chart(__coco_data_);
}, update : function(attr,v) {
	v.__initAttributes(attr);
}};
xdom_XDom.window = window;
xdom_XDom.document = window.document;
xdom_XDom.console = $global.console;
xdom_Selector.hasScope = (function($this) {
	var $r;
	try {
		$r = true;
	} catch( _g ) {
		$r = false;
	}
	return $r;
}(this));
xdom_Selector.ns = xdom_XDom.window._xdom_ns = (xdom_XDom.window._xdom_ns | 0) + 1;
xdom_Selector.counter = 0;
xdom_html_Collection.EMPTY = [];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
